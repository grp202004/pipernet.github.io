{"version":3,"sources":["state/PreferencesStore.ts","state/Cluster3dObjectStore.ts","state/GraphDelegate.ts","components/ComponentRef.tsx","state/GraphMutation.ts","state/GraphStore.ts","state/ImportStore.ts","state/SearchStore.ts","state/ClusterStore.ts","state/CssStore.ts","constants/index.ts","state/NodeInteractionStore.ts","state/ClusterInteractionStore.ts","state/HelperStackPanelStore.ts","state/index.ts","components/utils/ClusterChooser.tsx","images/icon.png","components/panels/SearchPanel.tsx","components/Navbar.tsx","components/utils/SimpleSelect.tsx","components/dialogs/importDialog.tsx","components/dialogs/ExportDialog.tsx","components/utils/DataSheetDialogWrapper.tsx","components/utils/InputFormUtils.ts","components/dialogs/NodeDataSheetDialog.tsx","components/utils/NodeChooser.tsx","components/dialogs/EdgeDataSheetDialog.tsx","components/utils/NodeAdder.tsx","components/dialogs/AddNodeDialog.tsx","components/dialogs/AddEdgeDialog.tsx","components/dialogs/ImportGEXFDialog.tsx","components/Dialogs.tsx","components/panels/SelectionBox.tsx","state/utils/MouseEventUtils.ts","components/panels/CanvasDrawPanel.tsx","state/utils/ToasterUtils.ts","components/panels/CanvasDrawStraightLinePanel.tsx","components/visualize/Visualizer.tsx","components/panels/NodeDetailPanel.tsx","components/panels/MultiDetailPanel.tsx","components/panels/DeleteEdgeInteractionPanel.tsx","components/utils/Collapsable.tsx","components/panels/ClusterPanel.tsx","components/utils/ColorPicker.tsx","components/panels/EdgesPanel.tsx","components/panels/LabelsPanel.tsx","components/panels/NodesPanel.tsx","components/panels/GraphOptionsCard.tsx","components/panels/InteractionModePanel/ClusterSplittingPanelStack.tsx","components/panels/InteractionModePanel/NodeSelectionPanel.tsx","components/panels/InteractionModePanel/InteractionModePanel.tsx","components/panels/RightClickPanel.tsx","components/FloatingCards.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["VisualizationMode","PreferencesStore","rightClickPositionX","rightClickPositionY","exportDialogOpen","preferenceDialogOpen","statisticsDialogOpen","AddNodeDialogOpen","AddEdgeDialogOpen","nodeDataSheetDialogOpen","edgeDataSheetDialogOpen","rightClickOn","rightClickPanelOpen","deleteEdgePanelOpen","graphOptionsCardOpen","visualizationMode","Normal","makeAutoObservable","this","except","Cluster3dObjectStore","threeScene","fusionClusterObjects","clusterObjectsMap","UUID2ClusterValueMap","canAlterNodePosition","remove","dispose","State","cluster","clusterBy","Map","initialMap","attributePoints","forEach","value","key","set","createMesh","THREE","add","convexHullObjects","initEmptyMapAndFusion","mesh","geometry","copy","convexHullObject","uuid","res","children","every","item","material","newMap","points","get","length","sphere","SphereGeometry","css","node","size","resolution","translate","x","y","z","tempArray","vector","push","positions","Float32Array","setAttribute","computeBoundingSphere","sphereGeo","boundingSphere","radius","center","shape","ConvexGeometry","Array","from","convexGeometry","geom","name","meshMaterial","color","attributeColor","transparent","opacity","side","depthWrite","oldOpacity","setTimeout","_object","meshId","clusterInteraction","currentlyHoveredClusterId","selectedClusters","includes","meshSelectedMaterial","meshNormalMaterial","meshHighlightMaterial","chaserListX","chaserListY","chaserListZ","attributeKeys","sphereGeometry","position","computeNodeSphereDistribution","index","attribute","graph","rawGraph","getNodeAttribute","chaserX","chaser","initialValue","duration","target","chaserY","chaserZ","interval","setInterval","graphDelegate","graphDelegateMethods","refresh","clearInterval","numberOfPoints","dlong","Math","PI","sqrt","dz","long","ptsOnSphere","r","ptNew","cos","sin","createCustomNodeObject","_id","_cluster","id","hovered","selected","multiSelected","isClusterNode","createCustomLinkObject","_source","_target","source","isClusterLink","GraphDelegate","clusterObject","_graphDelegateMethods","scene","newGraph","addInvisibleClusterNode","decorateRawGraph","tempGraph","nodes","links","forEachNode","attributes","forEachEdge","edge","oldGraph","graphCopy","names","getAttributeValues","clusterID","addNode","_visualize","addEdgeWithKey","nodeObject","linkObject","nodeId","distance","distRatio","hypot","cameraPosition","d3Force","link","clusterForce","normalForce","d3ReheatSimulation","ComponentRef","nodeDetail","multiNodeDetail","visualizer","canvasDrawPanel","canvasDrawStraightLinePanel","clusterSplittingPanelStack","_instance","instance","reaction","interaction","currentlyHoveredNodeId","forceUpdate","GraphMutation","_this","that","newAttributes","hasOwnProperty","decorateRawNode","refreshGraph","dropNode","decorateRawEdge","addEdge","dropEdge","GraphStore","Graph","allowSelfLoops","multi","type","mutating","metadata","snapshotName","nodeProperties","_rawGraph","_metadata","flush","updateVisualizationGraph","ImportStore","isLoading","edgeFileName","nodeFileName","gexfFileName","importDialogOpen","importGEXFDialogOpen","selectedEdgeFileFromInput","selectedNodeFileFromInput","selectedGEXFFileFromInput","importConfig","hasNodeFile","nodeFile","isReady","parseError","path","hasHeader","topN","columns","mapping","delimiter","edgeFile","fromId","toId","fileObject","file","reader","FileReader","readAsText","Promise","resolve","reject","onload","content","result","replace","parse","comment","trim","auto_parse","skip_empty_lines","undefined","err","Toaster","create","Position","TOP","show","message","intent","Intent","DANGER","timeout","gexf","readCSV","config","fromColumn","parseInt","toColumn","tempNodes","readNodeCSV","toString","Object","assign","readEdgeCSV","idx","hasNode","keys","readGEXF","entries","getNodeAttributes","edgeFileConfig","fileAsString","lines","split","topLinesAsString","map","l","slice","join","console","log","it","onerror","error","action","onClick","window","location","reload","text","nodeFileConfig","SearchStore","isPreviewing","searchStr","filterProps","outputList","searchStrIgnoreCase","toLocaleLowerCase","searchAttr","ClusterStore","to","setCluster","keyValueMap","Set","keyAttribute","values","attributeKeysMap","colors","randomcolor","seed","count","NodeGlobalConfig","defaultColor","selectedColor","multiSelectedColor","highlightColor","EdgeGlobalConfig","defaultWidth","highlightWidth","LabelConfig","ClusterConfig","CssStore","label","isAnimating","InteractionStore","selectedNode","selectedNodes","selectedEdge","boxSelectionOpen","boxSelection_startPoint","boxSelection_endPoint","left","min","top","right","max","down","Attributes","coords","graph2ScreenCoords","neighbors","neighbor","getEdgeKey","node1","node2","go","back","oldAttributeVisualize","updateVisualizeAttributeParser","getEdgeAttribute","newAttribute","oldAttributes","ClusterInteractionStore","selectedCluster","drawPanelActivate","drawStraightLine","lineSegment","confirmClusterSplittingTempData","event","meshSpotlightMaterial","getObjectById","indexOf","splice","preferences","closeAllPanel","date","Date","toLocaleString","clusterId","_","clusterValue","setNodeAttribute","screenCoords","coord","tempLineSegment","point","polygonContains","updateNodeVisualizeAttribute","anotherClusterId","thisCluster","nodesToAlter","HelperStackPanelStore","clusterSplittingPanelStackOpen","clusterSplittingCurrentStep","NodeSelectionPanelOpen","AppState","import","search","helper","NodeInteractionStore","privateConstructor","_state","autorun","renderImportEdgePreview","renderImportNodePreview","resumeAnimation","pauseAnimation","ClusterSplitting","step","clearDrawing","order","number","fireImmediately","updateAllMaterials","updateEdgeVisualizeAttribute","currentlyHoveredNodeNeighborEdges","neighborEdges","observer","itemRenderer","props","handleClick","propertiesWithNone","unshift","items","showNone","fullProperties","filterable","onItemSelect","onSelect","syncWith","React","Component","defaultProps","state","filter","prefix","disabled","FILTER_OPTIONS","setState","icon","inputValueRenderer","a","query","onQueryChange","itemListPredicate","candidates","onMouseOver","cameraFocusOn","onMouseLeave","openOnKeyDown","noResults","popoverProps","minimal","style","zIndex","align","Alignment","LEFT","title","src","logo","width","height","alt","placement","BOTTOM","marginTop","marginLeft","checked","onChange","RIGHT","marginRight","open","CommonItemRenderer","itemPredicate","object","toLowerCase","small","PreviewTable","renderWrapper","className","numRows","selectedRegions","rows","cols","cellRenderer","i","multiDialogRef","createRef","canImport","renderNodesSelection","onInputChange","files","renderEdgesSelection","importedNodes","importedEdges","closeDialog","finalButtonProps","importGraphFromCSV","then","setGraph","hasAttribute","getAttribute","newDelimiter","ref","classnames","isOpen","onClose","panel","Classes","DIALOG_BODY","justifyContent","alignItems","display","maxWidth","renderDelimiterSelection","large","ready","_node","_edge","write","headers","exportData","export","data","edges","interactive","elevation","Elevation","ONE","computeGEXFFile","filename","computeNodeFile","separator","computeEdgeFile","loading","loadingOptions","TableLoadingOption","CELLS","COLUMN_HEADERS","ROW_HEADERS","for","onOpened","minWidth","renderTable","handleStringChange","handler","stringifyNodeDetail","parseNumberOrString","numberVal","Number","isNaN","GraphNodeTable","filterQuery","addNodeDialogOpen","deleteAlertOpen","nodeToDelete","renderColumns","rowIndex","columnIndex","renderCell","element","cell","filteredTable","newVal","setValue","onConfirm","tooltip","deleteNodeRenderer","deleteNodeAlert","cancelButtonText","confirmButtonText","onCancel","textAlign","newTable","asyncControl","leftIcon","placeholder","fill","defaultRowHeight","SUCCESS","select","labelFor","labelInfo","rightIcon","GraphEdgeTable","addEdgeDialogOpen","edgeToDelete","chosenSource","chosenTarget","deleteEdgeRenderer","deleteEdgeAlert","addEdgeDialog","onClosed","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","PRIMARY","hasEdge","renderMode","RenderMode","NONE","newNodeId","canImportTag","renderAttributesForm","newValue","componentDidMount","prop","autoFocus","rightElement","onAdded","fileIsSelect","importGraphFromGEXF","renderImportButton","Dialogs","boxStyle","startPoint","endPoint","mouseDown","onMouseDownCallback","startpoint","clientX","clientY","onMouseMoveCallback","_calculateSelectionBox","onMouseUpCallback","boxSelectNode","abs","onMouseDown","onMouseMove","onMouseUp","onDocumentLeftClick","ReactDOM","findDOMNode","box","getBoundingClientRect","camera","unproject","intersects","sub","normalize","intersectObjects","clusterLeftClickCallback","onDocumentRightClick","clusterRightClickCallback","onDocumentMouseMove","clusterHoverCallback","canvasRef","current","JSON","canvasMethods","getSaveData","exportDrawing","canvas","canvasHeight","canvasWidth","lazyRadius","brushRadius","brushColor","catenaryColor","drawPoints","reverse","computeSplitCluster","clear","createToaster","componentRef","ctx","lineJoin","lineCap","clearRect","lineWidth","beginPath","moveTo","lineTo","strokeStyle","stroke","getContext","visualizationGraph","nodePointerInteraction","graphRef","hoverNodeCallback","previousNode","nodeLeftClickCallback","NodeSelection","nodeRightClickCallback","backgroundClickCallback","backgroundRightClickCallback","renderDrawCanvas","renderGraph","graphData","nodeLabel","nodeRelSize","nodeColor","computeNodeColor","nodeVisibility","nodeResolution","nodeThreeObjectExtend","nodeThreeObject","sprite","SpriteText","textHeight","backgroundColor","visible","translateX","onNodeHover","onNodeClick","onNodeRightClick","onNodeDragEnd","fx","fy","fz","linkVisibility","linkWidth","computeEdgeWidth","linkColor","computeEdgeColor","onBackgroundRightClick","onBackgroundClick","enablePointerInteraction","onEngineTick","clusterDelegation","cooldownTicks","onEngineStop","alterNodePosition","document","addEventListener","CustomMouseEvent","removeEventListener","mountDelegateMethods","graphMethods","clusterInteractionListener","ClusterSelection","cellRenderer_property","cellRenderer_value","onNode","formatLongFloat","nodeAttributeValue","num","parseFloat","toPrecision","enableRowHeader","targetNode","neighborsRenderer","onMouseEnter","LARGE","FILL","onToggle","shapeOptionOpen","forceOptionOpen","forceCollapse","Collapsable","stepSize","labelStepSize","updateClusterForce","shapeCollapse","float","interactionKind","PopoverInteractionKind","CLICK","popoverClassName","sizeOptionOpen","thicknessOptionOpen","colorOptionOpen","hex","timeOutRef","colorCollapse","sizeCollapse","animate","Expander","titles","renderFirstPanel","renderSecondPanel","selectedValue","renderThirdPanel","splitCluster","renderWhichPanel","currentStep","renderWhichBack","PANEL_STACK_HEADER_BACK","renderPanelStack","PANEL_STACK_VIEW","minHeight","PANEL_STACK_HEADER","HEADING","ellipsize","usePortal","getMessage","BUTTON","MINIMAL","active","WARNING","mode","getIntent","makeObservable","stylePosition","computed","newClusterAttributeValue","clusterName","ELEVATION_1","formNewCluster","releaseFromCluster","mergeSelectedClusters","releaseSelectedClusters","on","renderNodeMenu","renderClusterMenu","renderBackgroundMenu","optionsVisible","optionsInvisible","sideButtonVis","sideButtonInv","toggleOptions","TWO","GraphOptionsCard","paddingTop","paddingRight","paddingBottom","NodeDetailPanel","MultiDetailPanel","App","DARK","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c283811b.chunk.js","sourcesContent":["import { makeAutoObservable } from \"mobx\";\n\n/**\n * @description the four interaction modes\n * @author Zichen XU, Zhiyuan LYU\n * @export\n * @enum {number}\n */\nexport enum VisualizationMode {\n    Normal = \"Normal\", // normal state\n    ClusterSelection = \"Cluster Selection\", // selecting the cluster to be Merged\n    NodeSelection = \"Node Selection\", // multi-selecting the node\n    ClusterSplitting = \"Cluster Splitting\", // drawing the line to split the cluster\n}\n\n/**\n * @description it controls the open/close of dialogs/panels\n * and the VisualizationMode(Normal/NodeSelection/ClusterSelection/ClusterSplitting) as well\n * @author Zichen XU\n * @export\n * @class PreferencesStore\n */\nexport default class PreferencesStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    // Right Click Position\n\n    rightClickPositionX = 30;\n    rightClickPositionY = 30;\n\n    // Dialog\n    exportDialogOpen = false;\n    private preferenceDialogOpen = false;\n    private statisticsDialogOpen = false;\n\n    AddNodeDialogOpen = false;\n    AddEdgeDialogOpen = false;\n\n    nodeDataSheetDialogOpen = false;\n    edgeDataSheetDialogOpen = false;\n\n    // Panel\n\n    rightClickOn = null as null | \"Node\" | \"Cluster\" | \"Background\";\n    rightClickPanelOpen = false;\n    deleteEdgePanelOpen = false;\n\n    graphOptionsCardOpen = false;\n\n    closeAllPanel(except?: string) {\n        this.deleteEdgePanelOpen = false;\n        this.graphOptionsCardOpen = false;\n        if (except !== \"rightClickPanel\") {\n            this.rightClickPanelOpen = false;\n        }\n    }\n\n    // 3D Graph\n\n    visualizationMode: VisualizationMode = VisualizationMode.Normal;\n}\n","import { makeAutoObservable } from \"mobx\";\nimport * as THREE from \"three\";\nimport { SphereGeometry } from \"three\";\nimport { ConvexGeometry } from \"three/examples/jsm/geometries/ConvexGeometry\";\nimport State from \".\";\nimport chaser from \"chaser\";\n\n/**\n * @description the code in this file basically initialize the corresponding Object3D for each cluster\n * control the addition/deletion/disposition/accessing/updatePosition/updateMaterial of clusters inside the scene\n * according to the updated map from ClusterStore\n * @author Zichen XU\n * @export\n * @class Cluster3dObjectStore\n */\nexport default class Cluster3dObjectStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    /**\n     * @description the THREE.js WebGL Scene of the visualization\n     * @author Zichen XU\n     * @type {THREE.Scene}\n     */\n    threeScene!: THREE.Scene;\n\n    /**\n     * @description all the clusters should form a 3D Group to be imported into Scene\n     * if no cluster attribute is set, this will be set to null\n     *\n     * each children is a THREE.Mesh\n     * @author Zichen XU\n     * @type {(THREE.Group | null)}\n     */\n    fusionClusterObjects: THREE.Group | null = null;\n\n    /**\n     * @description the map between attribute value and its corresponding Mesh Group\n     * if you want to update the geometry, plz update all the children inside which Mesh Group\n     * if no cluster attribute is set, this will be set to null\n     * @author Zichen XU\n     * @type {(Map<string | number, THREE.Mesh> | null)}\n     */\n    private clusterObjectsMap: Map<string | number, THREE.Mesh> | null = null;\n\n    /**\n     * @description create empty BufferGeometry and mesh with colour\n     * then initialize $fusionClusterObjects and $clusterObjectsMap with it\n     * and then add the THREE.Group to the Scene\n     * @author Zichen XU\n     * @returns {*}\n     */\n    initEmptyMapAndFusion() {\n        if (this.fusionClusterObjects) {\n            this.threeScene.remove(this.fusionClusterObjects);\n            this.dispose();\n        }\n        if (State.cluster.clusterBy === null) {\n            return;\n        }\n        this.UUID2ClusterValueMap = new Map<string, string | number>();\n        let initialMap = new Map<string | number, THREE.Mesh>();\n        State.cluster.attributePoints.forEach((value, key) => {\n            initialMap.set(\n                key,\n                this.createMesh(new THREE.BufferGeometry(), key)\n            );\n        });\n\n        this.clusterObjectsMap = initialMap;\n        this.fusionClusterObjects = new THREE.Group();\n        initialMap.forEach((value) => {\n            this.fusionClusterObjects?.add(value);\n        });\n        this.threeScene.add(this.fusionClusterObjects);\n    }\n\n    /**\n     * @description should be called on each render frame\n     * will update the geometry inside each cluster object\n     *\n     * if is the first time (both are null), will run initEmptyMapAndFusion() first\n     *\n     * if meet with clusterBy == null, will dispose all Object3d\n     * @author Zichen XU\n     * @returns {*}\n     */\n    clusterDelegation() {\n        if (State.cluster.clusterBy === null) {\n            return;\n        } else {\n            if (\n                this.fusionClusterObjects == null ||\n                this.convexHullObjects == null\n            ) {\n                this.initEmptyMapAndFusion();\n            }\n            this.clusterObjectsMap?.forEach(\n                (mesh: THREE.Mesh, key: string | number) => {\n                    mesh.geometry.copy(this.convexHullObject(key));\n                }\n            );\n        }\n    }\n\n    /**\n     * @description get the THREE.Mesh object by its uuid\n     * @author Zichen XU\n     * @param {string} uuid\n     * @returns {*}  {(THREE.Mesh | null)}\n     */\n    getObjectById(uuid: string): THREE.Mesh | null {\n        let res: THREE.Object3D | null = null;\n        this.fusionClusterObjects?.children.every((item: THREE.Object3D) => {\n            if (item.uuid === uuid) {\n                res = item;\n                return false;\n            } else {\n                return true;\n            }\n        });\n        return res;\n    }\n\n    /**\n     * @description dispose the geometries and materials in every clusterObject\n     * and set these props to be null, which indicates that no additional 3d object is added into Scene\n     * @author Zichen XU\n     */\n    private dispose() {\n        this.clusterObjectsMap?.forEach((mesh: THREE.Mesh) => {\n            let material = mesh.material as THREE.Material;\n            material.dispose();\n            mesh.geometry.dispose();\n        });\n        this.clusterObjectsMap = null;\n        this.fusionClusterObjects = null;\n        this.UUID2ClusterValueMap = new Map<string, string | number>();\n    }\n\n    /**\n     * @description the map between the value of the cluster and the BufferGeometry that this cluster created\n     * @author Zichen XU\n     * @readonly\n     * @type {(Map<string | number, THREE.BufferGeometry>)}\n     */\n    get convexHullObjects(): Map<string | number, THREE.BufferGeometry> {\n        let newMap = new Map<string | number, THREE.BufferGeometry>();\n        State.cluster.attributePoints.forEach((value, key) => {\n            newMap.set(key, this.convexHullObject(key));\n        });\n        return newMap;\n    }\n\n    /**\n     * @description get the computed convexHull BufferGeometry of the specified attribute value\n     * @author Zichen XU\n     * @param {(string | number)} key\n     * @returns {*}  {THREE.BufferGeometry}\n     */\n    private convexHullObject(key: string | number): THREE.BufferGeometry {\n        let points = State.cluster.attributePoints.get(key) as THREE.Vector3[];\n\n        if (!points || points.length === 0) {\n            return new THREE.BufferGeometry();\n        } else if (points.length === 1) {\n            let sphere = new SphereGeometry(\n                State.css.node.size + 5,\n                State.css.cluster.resolution,\n                State.css.cluster.resolution\n            );\n            sphere.translate(points[0].x, points[0].y, points[0].z);\n            return sphere;\n        } else if (points.length < 4) {\n            // there are 2 or 3 points in this cluster\n            let geometry = new THREE.BufferGeometry();\n            let tempArray: number[] = [];\n            points.forEach((vector) => {\n                tempArray.push(vector.x, vector.y, vector.z);\n            });\n            const positions = new Float32Array(tempArray);\n            geometry.setAttribute(\n                \"position\",\n                new THREE.BufferAttribute(positions, 3)\n            );\n            geometry.computeBoundingSphere();\n            let sphereGeo = geometry.boundingSphere as THREE.Sphere;\n            let sphere = new SphereGeometry(\n                sphereGeo.radius + 5,\n                State.css.cluster.resolution,\n                State.css.cluster.resolution\n            );\n            sphere.translate(\n                sphereGeo.center.x,\n                sphereGeo.center.y,\n                sphereGeo.center.z\n            );\n            return sphere;\n        } else {\n            if (State.css.cluster.shape === \"convexHull\") {\n                // when there are more than 3 points, simply gnerate a convexgeometry\n                return new ConvexGeometry(Array.from(points));\n            } else {\n                // State.css.clusterShape === \"Sphere\"\n                let convexGeometry = new ConvexGeometry(Array.from(points));\n                convexGeometry.computeBoundingSphere();\n                let sphereGeo = convexGeometry.boundingSphere as THREE.Sphere;\n                let sphere = new SphereGeometry(\n                    sphereGeo.radius + 5,\n                    State.css.cluster.resolution,\n                    State.css.cluster.resolution\n                );\n                sphere.translate(\n                    sphereGeo.center.x,\n                    sphereGeo.center.y,\n                    sphereGeo.center.z\n                );\n                return sphere;\n            }\n        }\n    }\n\n    /**\n     * @description create a Three.Group, which contains 2 Three.Mesh, of the input geometry\n     * @author Zichen XU\n     * @private\n     * @param {THREE.BufferGeometry} geom\n     * @param {(string | number)} name\n     * @returns {*}  {THREE.Mesh}\n     */\n    private createMesh(\n        geom: THREE.BufferGeometry,\n        name: string | number\n    ): THREE.Mesh {\n        const meshMaterial = new THREE.MeshBasicMaterial({\n            color: State.cluster.attributeColor.get(name),\n            transparent: true,\n            opacity: 0.15,\n        });\n        meshMaterial.side = THREE.DoubleSide; //将材质设置成正面反面都可见\n        meshMaterial.depthWrite = false;\n\n        let mesh = new THREE.Mesh(geom, meshMaterial);\n        this.UUID2ClusterValueMap.set(mesh.uuid, name);\n        mesh.name = \"THREE_CLUSTER_\" + name;\n        return mesh;\n    }\n\n    /**\n     * @description a map from (the uuid that get from the WebGL) to (the cluster value of this cluster)\n     * @author Zichen XU\n     * @type {(Map<string, string | number>)}\n     */\n    UUID2ClusterValueMap!: Map<string, string | number>;\n\n    /**\n     * @description add the mesh material a short highlight\n     * @author Zichen XU\n     * @param {THREE.Mesh} mesh\n     */\n    meshSpotlightMaterial(mesh: THREE.Mesh) {\n        let material = mesh.material as THREE.Material;\n        const oldOpacity = material.opacity;\n        material.opacity = 0.7;\n        setTimeout(() => {\n            material.opacity = oldOpacity;\n        }, 100);\n    }\n\n    /**\n     * @description set the mesh material to be highlighted\n     * @author Zichen XU\n     * @private\n     * @static\n     * @param {THREE.Mesh} mesh\n     */\n    private static meshHighlightMaterial(mesh: THREE.Mesh) {\n        let material = mesh.material as THREE.Material;\n        material.opacity = 0.5;\n    }\n\n    /**\n     * @description set the mesh material to be as selected\n     * @author Zichen XU\n     * @private\n     * @static\n     * @param {THREE.Mesh} mesh\n     */\n    private static meshSelectedMaterial(mesh: THREE.Mesh) {\n        let material = mesh.material as THREE.Material;\n        material.opacity = 0.3;\n    }\n\n    /**\n     * @description set the mesh material back to normal\n     * @author Zichen XU\n     * @private\n     * @static\n     * @param {THREE.Mesh} mesh\n     */\n    private static meshNormalMaterial(mesh: THREE.Mesh) {\n        let material = mesh.material as THREE.Material;\n        material.opacity = 0.15;\n    }\n\n    /**\n     * @description update and refresh all materials of all the cluster objects\n     * @author Zichen XU\n     */\n    updateAllMaterials() {\n        this.fusionClusterObjects?.children.forEach((_object) => {\n            let mesh = _object as THREE.Mesh;\n            const meshId = mesh.uuid;\n            if (State.clusterInteraction.currentlyHoveredClusterId === meshId) {\n                Cluster3dObjectStore.meshHighlightMaterial(mesh);\n                return;\n            } else if (\n                State.clusterInteraction.selectedClusters.includes(meshId)\n            ) {\n                Cluster3dObjectStore.meshSelectedMaterial(mesh);\n                return;\n            } else {\n                Cluster3dObjectStore.meshNormalMaterial(mesh);\n            }\n        });\n    }\n\n    /**\n     * @description determine whether at this time can the node to be auto-altered to the surface of the sphere\n     * if the engine reheat, will set this to true.\n     * @author Zichen XU\n     * @type {boolean}\n     */\n    canAlterNodePosition: boolean = false;\n\n    /**\n     * @description alter the nodes onto the surface of the sphere in 1s\n     * using the computeNodeSphereDistribution() to compute the position\n     * @author Zichen XU\n     */\n    alterNodePosition() {\n        interface chaserAndPosition {\n            chaser: any;\n            position: { x: number; y: number; z: number };\n        }\n\n        let chaserListX: chaserAndPosition[] = [];\n        let chaserListY: chaserAndPosition[] = [];\n        let chaserListZ: chaserAndPosition[] = [];\n\n        State.cluster.attributeKeys.forEach((points, cluster) => {\n            const sphereGeometry = this.clusterObjectsMap?.get(\n                cluster\n            ) as THREE.Mesh;\n            const radius = sphereGeometry.geometry.boundingSphere?.radius!;\n            let position = sphereGeometry.geometry.boundingSphere?.center!;\n            let newPositions = this.computeNodeSphereDistribution(\n                radius,\n                points.length\n            );\n\n            newPositions.forEach((value, index) => {\n                let attribute = State.graph.rawGraph.getNodeAttribute(\n                    points[index],\n                    \"_visualize\"\n                );\n                const chaserX = chaser({\n                    initialValue: attribute.x,\n                    duration: 1000,\n                });\n                chaserX.target = value.x + position.x;\n                chaserListX.push({ chaser: chaserX, position: attribute });\n\n                const chaserY = chaser({\n                    initialValue: attribute.y,\n                    duration: 1000,\n                });\n                chaserY.target = value.y + position.y;\n                chaserListY.push({ chaser: chaserY, position: attribute });\n\n                const chaserZ = chaser({\n                    initialValue: attribute.z,\n                    duration: 1000,\n                });\n                chaserZ.target = value.z + position.z;\n                chaserListZ.push({ chaser: chaserZ, position: attribute });\n            });\n        });\n\n        let interval = setInterval(() => {\n            chaserListX.forEach((value) => {\n                value.position.x = value.chaser.value;\n            });\n            chaserListY.forEach((value) => {\n                value.position.y = value.chaser.value;\n            });\n            chaserListZ.forEach((value) => {\n                value.position.z = value.chaser.value;\n            });\n            State.graphDelegate.graphDelegateMethods.refresh();\n        }, 50);\n        setTimeout(() => clearInterval(interval), 1000);\n    }\n\n    /**\n     * @description using a algorithm to compute a array of points that distribute on the sphere specified by the radius\n     * @author Zichen XU\n     * @private\n     * @param {number} radius\n     * @param {number} [numberOfPoints=45]\n     * @returns {*}  {{ x: number; y: number; z: number }[]}\n     */\n    private computeNodeSphereDistribution(\n        radius: number,\n        numberOfPoints = 45\n    ): { x: number; y: number; z: number }[] {\n        let dlong = Math.PI * (3.0 - Math.sqrt(5.0));\n        let dz = 2.0 / numberOfPoints;\n        let long = 0.0;\n        let z = 1.0 - dz / 2.0;\n        let ptsOnSphere: { x: number; y: number; z: number }[] = [];\n        for (let index = 0; index < numberOfPoints; index++) {\n            let r = Math.sqrt(1.0 - z * z);\n            let ptNew = {\n                x: Math.cos(long) * r * radius,\n                y: Math.sin(long) * r * radius,\n                z: z * radius,\n            };\n            ptsOnSphere.push(ptNew);\n            z = z - dz;\n            long = long + dlong;\n        }\n        return ptsOnSphere;\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\nimport Graph from \"graphology\";\nimport State from \".\";\nimport {\n    ForceGraphMethods,\n    LinkObject,\n    NodeObject,\n} from \"react-force-graph-3d\";\nimport Cluster3dObjectStore from \"./Cluster3dObjectStore\";\n\n/**\n * @description\n * hovered: false, selected: false: DefaultColor;\n * hovered: false, selected: true: SelectedColor;\n * hovered: true, selected: false: HighlightColor;\n * hovered: true, selected: true: HighlightColor;\n * @author Zichen XU\n * @export\n * @interface ICustomNodeObject\n * @extends {NodeObject}\n */\nexport interface ICustomNodeObject extends NodeObject {\n    hovered: boolean;\n    selected: boolean;\n    multiSelected: boolean;\n    isClusterNode?: boolean;\n}\n\n/**\n * @description\n * hovered: false, selected: false: DefaultColor;\n * hovered: false, selected: true: SelectedColor;\n * hovered: true, selected: false: HighlightColor;\n * hovered: true, selected: true: HighlightColor;\n * @author Zichen XU\n * @export\n * @interface ICustomLinkObject\n * @extends {LinkObject}\n */\nexport interface ICustomLinkObject extends LinkObject {\n    hovered: boolean;\n    selected: boolean;\n    isClusterLink?: boolean;\n}\n\n/**\n * @description create a default CustomNodeObject by specifying the id\n * and whether this node is the cluster node\n * @author Zichen XU\n * @export\n * @param {string} _id\n * @param {boolean} [_cluster=false]\n * @returns {*}  {ICustomNodeObject}\n */\nexport function createCustomNodeObject(\n    _id: string,\n    _cluster: boolean = false\n): ICustomNodeObject {\n    return {\n        id: _id,\n        hovered: false,\n        selected: false,\n        multiSelected: false,\n        isClusterNode: _cluster,\n    };\n}\n\n/**\n * @description create a default CustomLinkObject by specifying the source and target id\n * and whether this node is the cluster link\n * @author Zichen XU\n * @export\n * @param {string} _source\n * @param {string} _target\n * @param {boolean} [_cluster=false]\n * @returns {*}  {ICustomLinkObject}\n */\nexport function createCustomLinkObject(\n    _source: string,\n    _target: string,\n    _cluster: boolean = false\n): ICustomLinkObject {\n    return {\n        source: _source,\n        target: _target,\n        hovered: false,\n        selected: false,\n        isClusterLink: _cluster,\n    };\n}\n\n/**\n * @description acts as a bridge between the graphology graph data structure and the 3d-force-graph we use to render the 3D scene\n * The visualizationGraph() will compute the clustered graph to be send to 3d-renderer\n * The cluster data generated by ClusterStore will be used in this process.\n *\n * we define some customized interfaces ICustomNodeObject and ICustomLinkObject which extends from the Node/LinkObject of 3d-force-graph\n * with adding fields like hovered, selected and multiSelected to deal with the WebGL mouse interaction.\n * This class also includes reference to the React.Ref of 3d-renderer\n * with providing functions like auto-focus the camera as well as update the force inside the cluster.\n * @author Zichen XU\n * @export\n * @class GraphDelegate\n */\nexport default class GraphDelegate {\n    constructor() {\n        makeAutoObservable(this);\n        this.clusterObject = new Cluster3dObjectStore();\n    }\n\n    /**\n     * @description assign the force-graph methods to this class\n     * should be called as long as the visualizer react component is mounted\n     * @author Zichen XU\n     * @param {ForceGraphMethods} _graphDelegateMethods\n     */\n    mountDelegateMethods(_graphDelegateMethods: ForceGraphMethods) {\n        this.graphDelegateMethods = _graphDelegateMethods;\n        this.clusterObject.threeScene = this.graphDelegateMethods.scene();\n    }\n\n    /**\n     * @description the ForceGraphMethods exposed by the visualization force-graph\n     * @author Zichen XU\n     * @see ForceGraphMethods\n     * @type {ForceGraphMethods}\n     */\n    graphDelegateMethods!: ForceGraphMethods;\n\n    /**\n     * @description compute the delegate graph that will be used by the ForceGraph3D\n     * will add invisible cluster nodes and edges to balance the clustered graph and adjust force\n     * the NodeObject and LinkObject inside attributes (named _visualize) will be used.\n     *\n     * @author Zichen XU\n     * @returns {*}\n     */\n    visualizationGraph() {\n        let newGraph: Graph;\n        if (State.cluster.clusterBy === null) {\n            newGraph = State.graph.rawGraph;\n        } else {\n            newGraph = this.addInvisibleClusterNode(\n                State.graph.decorateRawGraph(State.graph.rawGraph)\n            );\n        }\n        let tempGraph = {\n            nodes: [] as ICustomLinkObject[],\n            links: [] as ICustomLinkObject[],\n        };\n        newGraph.forEachNode((node, attributes) => {\n            tempGraph.nodes.push(attributes[\"_visualize\"]);\n        });\n\n        newGraph.forEachEdge((edge, attributes) => {\n            tempGraph.links.push(attributes[\"_visualize\"]);\n        });\n        return tempGraph;\n    }\n\n    /**\n     * @description return a new graph that contains the invisible clusters, formed as nodes\n     * as well as the edges that connected to the cluster node to simulate the force within the same cluster\n     * the new graph is a deep copy of the old node, so no worries of the original graph DS\n     * @author Zichen XU\n     * @private\n     * @param {Graph} oldGraph\n     * @returns {*}  {Graph}\n     */\n    private addInvisibleClusterNode(oldGraph: Graph): Graph {\n        let graphCopy = oldGraph.copy();\n        let names = [\n            \"_CLUSTER_1_\",\n            \"_CLUSTER_2_\",\n            \"_CLUSTER_3_\",\n            \"_CLUSTER_4_\",\n            \"_CLUSTER_5_\",\n            \"_CLUSTER_6_\",\n            \"_CLUSTER_7_\",\n            \"_CLUSTER_8_\",\n            \"_CLUSTER_9_\",\n            \"_CLUSTER_10_\",\n        ];\n        for (let index = 0; index < names.length; index++) {\n            State.cluster.getAttributeValues.forEach(\n                (attribute: string | number) => {\n                    // if a node does not belong to any cluster, a undefined will be formed with no cluster to generate\n                    if (attribute === \"undefined\") return;\n\n                    let clusterID = names[index] + attribute;\n                    graphCopy.addNode(clusterID, {\n                        _visualize: createCustomNodeObject(clusterID, true),\n                    });\n\n                    // add edges to simulate the force of the same cluster\n                    State.cluster.attributeKeys\n                        .get(attribute)\n                        ?.forEach((target) => {\n                            graphCopy.addEdgeWithKey(\n                                `${clusterID}-${target}`,\n                                clusterID,\n                                target,\n                                {\n                                    _visualize: createCustomLinkObject(\n                                        clusterID,\n                                        target,\n                                        true\n                                    ),\n                                }\n                            );\n                        });\n                }\n            );\n        }\n\n        return graphCopy;\n    }\n\n    /**\n     * @description determine whether this Node is the cluster delegate node\n     * @author Zichen XU\n     * @param {NodeObject} nodeObject\n     * @returns {*}\n     */\n    nodeVisibility(nodeObject: NodeObject) {\n        let node = nodeObject as ICustomNodeObject;\n        return !node.isClusterNode;\n    }\n\n    /**\n     * @description determine whether this edge is the cluster delegate edge\n     * @author Zichen XU\n     * @param {LinkObject} linkObject\n     * @returns {*}\n     */\n    linkVisibility(linkObject: LinkObject) {\n        let link = linkObject as ICustomLinkObject;\n        return !link.isClusterLink;\n    }\n\n    ////\n\n    /**\n     * @description the link to Cluster3dObjectStore to manipulate the cluster related to WebGL\n     * @author Zichen XU\n     * @type {Cluster3dObjectStore}\n     */\n    clusterObject: Cluster3dObjectStore;\n\n    ////\n\n    /**\n     * @description this will re-position the camera to focus on the specified node\n     * if distance not specified, a default of 40 will be used\n     * @author Zichen XU\n     * @param {string} nodeId the node to be focused\n     * @param {number} [distance=40] the ending distance between the camera and the node\n     * @returns {*}\n     */\n    cameraFocusOn(nodeId: string, distance: number = 80) {\n        let node = State.graph.rawGraph.getNodeAttribute(nodeId, \"_visualize\");\n        if (!(node.x && node.y && node.z)) return;\n        // Aim at node from outside it\n        const distRatio = 1 + distance / Math.hypot(node.x, node.y, node.z);\n\n        this.graphDelegateMethods.cameraPosition(\n            {\n                x: node.x * distRatio,\n                y: node.y * distRatio,\n                z: node.z * distRatio,\n            }, // new position\n            { x: node.x, y: node.y, z: node.z }, // lookAt ({ x, y, z })\n            3000 // ms transition duration\n        );\n    }\n\n    ////\n\n    /**\n     * @description set the force inside each cluster in the ForceGraph\n     * @author Zichen XU\n     */\n    updateClusterForce() {\n        this.graphDelegateMethods\n            ?.d3Force(\"link\")\n            //@ts-ignore\n            ?.distance((link: CustomLinkObject) => {\n                return link.isClusterLink\n                    ? State.css.cluster.clusterForce\n                    : State.css.cluster.normalForce;\n            });\n        this.graphDelegateMethods.d3ReheatSimulation();\n    }\n}\n","import { makeAutoObservable, reaction } from \"mobx\";\nimport State from \"../state\";\n\nclass ComponentRef {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    static _instance: ComponentRef | null = null;\n\n    nodeDetail!: React.Component | any;\n\n    multiNodeDetail!: React.Component | any;\n\n    visualizer!: React.Component | any;\n\n    canvasDrawPanel!: React.Component | any;\n\n    canvasDrawStraightLinePanel!: React.Component | any;\n\n    clusterSplittingPanelStack!: React.Component | any;\n\n    // add singleton to prevent creating multiple instances of the State class\n    static get instance() {\n        if (ComponentRef._instance === null) {\n            let instance = new ComponentRef();\n            ComponentRef._instance = instance;\n            return instance;\n        } else {\n            return ComponentRef._instance;\n        }\n    }\n}\n\nreaction(\n    () => State.interaction.currentlyHoveredNodeId,\n    () => ComponentRef.instance.nodeDetail?.forceUpdate()\n);\n\nexport default ComponentRef.instance;\n","import { Attributes, EdgeKey, NodeKey } from \"graphology-types\";\nimport { makeAutoObservable } from \"mobx\";\nimport State from \".\";\nimport GraphStore from \"./GraphStore\";\n\n/**\n * the wrapper mutating function that relates to the mutation of the rawGraph DS\n * all the mutation of the Graph should all go through this API rather than calling on rawGraph directly.\n *\n * @export\n * @class GraphMutation\n */\nexport default class GraphMutation {\n    constructor(_this: GraphStore) {\n        makeAutoObservable(this);\n        this.that = _this;\n    }\n\n    /**\n     * @description the graph store\n     * @see GraphStore\n     * @author Zichen XU\n     * @private\n     * @type {GraphStore}\n     */\n    private that!: GraphStore;\n\n    /**\n     * @description add the node with this attribute to the Graph and refresh the 3d Graph\n     * if not specify attributes._visualize , then will add it into the attributes before adding to Graph\n     * @author Zichen XU\n     * @param {NodeKey} node\n     * @param {Attributes} [attributes]\n     */\n    public addNode(node: NodeKey, attributes?: Attributes): void {\n        let newAttributes: Attributes;\n        if (!attributes) {\n            newAttributes = {};\n            State.graph.decorateRawNode(node as string, newAttributes);\n        } else if (!attributes.hasOwnProperty(\"_visualize\")) {\n            newAttributes = attributes;\n            State.graph.decorateRawNode(node as string, newAttributes);\n        } else {\n            newAttributes = attributes;\n        }\n        this.that.rawGraph.addNode(node, newAttributes);\n        this.that.refreshGraph();\n    }\n\n    /**\n     * @description delete the node with this nodeId in the Graph and refresh the 3d Graph\n     * @author Zichen XU\n     * @param {string} nodeId\n     */\n    public dropNode(nodeId: string): void {\n        this.that.rawGraph.dropNode(nodeId);\n        this.that.refreshGraph();\n    }\n\n    /**\n     * @description add the edge with this attribute to the Graph and refresh the 3d Graph\n     * if not specify attributes._visualize , then will add it into the attributes before adding to Graph\n     * @author Zichen XU\n     * @param {NodeKey} source\n     * @param {NodeKey} target\n     * @param {Attributes} [attributes]\n     */\n    public addEdge(\n        source: NodeKey,\n        target: NodeKey,\n        attributes?: Attributes\n    ): void {\n        let newAttributes: Attributes;\n        if (!attributes) {\n            newAttributes = {};\n            State.graph.decorateRawEdge(\n                source as string,\n                target as string,\n                newAttributes\n            );\n        } else if (!attributes.hasOwnProperty(\"_visualize\")) {\n            newAttributes = attributes;\n            State.graph.decorateRawEdge(\n                source as string,\n                target as string,\n                newAttributes\n            );\n        } else {\n            newAttributes = attributes;\n        }\n        this.that.rawGraph.addEdge(source, target, newAttributes);\n        this.that.refreshGraph();\n    }\n\n    /**\n     * @description delete the edge with this key in the Graph and refresh the 3d Graph\n     * @author Zichen XU\n     * @param {EdgeKey} edge\n     */\n    public dropEdge(edge: EdgeKey): void {\n        this.that.rawGraph.dropEdge(edge);\n        this.that.refreshGraph();\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\nimport Graph from \"graphology\";\nimport { Attributes } from \"graphology-types\";\nimport {\n    createCustomNodeObject,\n    createCustomLinkObject,\n} from \"./GraphDelegate\";\nimport ComponentRef from \"../components/ComponentRef\";\nimport State from \".\";\nimport GraphMutation from \"./GraphMutation\";\n\n/**\n * @description the metadata that importDialog should update to this\n * @author Zichen XU\n * @export\n * @interface IMetaData\n */\nexport interface IMetaData {\n    snapshotName: string;\n\n    // attributes of nodes in imported graph\n    nodeProperties: string[];\n}\n\n/**\n * @description define a class for storing the raw graph (graphology object),\n * the related metadata information, the public api for setting, refreshing\n * and decorating(change the barebone graph into the appropriate instances that we use to send to 3d-graph renderer)\n * the graph as well as the entry of GraphMutation for manipulating the graph.\n * @author Zichen XU\n * @export\n * @class GraphStore\n */\nexport default class GraphStore {\n    constructor() {\n        makeAutoObservable(this);\n        this.mutating = new GraphMutation(this);\n    }\n\n    /**\n     * @description the graphology data structure to store a graph.\n     * has a lot of APIs to manipulate as well as iterate through the graph\n     * @author Zichen XU\n     * @type {Graph}\n     */\n    rawGraph: Graph = new Graph({\n        allowSelfLoops: true,\n        multi: false,\n        type: \"undirected\",\n    });\n\n    /**\n     * @description should be called when individual nodes are added to the graph.\n     * add the CustomNodeObject to node attributes stored in the data structure\n     * @author Zichen XU\n     * @see CustomNodeObject\n     * @param {string} node\n     * @param {Attributes} attributes\n     */\n    decorateRawNode(node: string, attributes: Attributes) {\n        attributes._visualize = createCustomNodeObject(node, false);\n    }\n\n    /**\n     * should be called when individual edges are added to the graph.\n     *\n     * add the CustomLinkObject to node attributes stored in the data structure\n     * @see CustomLinkObject\n     * name as @code _visualize in attributes\n     *\n     * @param {string} source\n     * @param {string} target\n     * @param {Attributes} attributes\n     */\n    decorateRawEdge(source: string, target: string, attributes: Attributes) {\n        attributes._visualize = createCustomLinkObject(source, target, false);\n    }\n\n    /**\n     * should be called on every graph import\n     * add the the _visualize to every links inside the specified graph\n     *\n     * the _visualize is for storing the object to be send to front-end to render the graph\n     *\n     * @param {Graph} _rawGraph\n     * @return {*}  {Graph}\n     */\n    decorateRawGraph(_rawGraph: Graph): Graph {\n        _rawGraph.forEachNode((node, attributes) =>\n            this.decorateRawNode(node, attributes)\n        );\n\n        _rawGraph.forEachEdge((edge, attributes, source, target) =>\n            this.decorateRawEdge(source, target, attributes)\n        );\n        return _rawGraph;\n    }\n\n    /**\n     * proxy method to set the new graph\n     * if intend to set a new graph, please use this method instead of directly modify GraphStore\n     *\n     * @param {Graph} _rawGraph\n     * @param {IMetaData} _metadata\n     */\n    public setGraph(_rawGraph: Graph, _metadata: IMetaData | null = null) {\n        this.rawGraph = this.decorateRawGraph(_rawGraph);\n        if (_metadata) {\n            this.metadata = _metadata;\n        }\n        State.interaction.flush();\n        State.cluster.clusterBy = null;\n        State.graphDelegate.clusterObject.initEmptyMapAndFusion();\n        ComponentRef.visualizer.updateVisualizationGraph();\n    }\n\n    /**\n     * @description should be called when the graph gets updated\n     * (the data inside the graph gets updated, or the attribute to be clustered has changed)\n     * @author Zichen XU\n     */\n    public refreshGraph() {\n        State.interaction.flush();\n        ComponentRef.visualizer.updateVisualizationGraph();\n    }\n\n    /**\n     * @description the wrapper methods to mutate the graph\n     * all the mutations of the graph should go through this API rather than calling this.rawGraph.[mutate]\n     * has basic functions like addNode, dropNode, addEdge, dropEdge...\n     * @author Zichen XU\n     * @see {GraphMutation}\n     * @type {GraphMutation}\n     */\n    mutating: GraphMutation;\n\n    /**\n     * @description the metadata related to the raw graph\n     * should be updated if a new graph is imported\n     * @author Zichen XU\n     * @type {IMetaData}\n     */\n    metadata: IMetaData = {\n        snapshotName: \"SNAPSHOT\",\n        nodeProperties: [],\n    };\n}\n","import { Intent, Position, Toaster } from \"@blueprintjs/core\";\nimport { makeAutoObservable } from \"mobx\";\nimport Graph from \"graphology\";\nimport gexf from \"graphology-gexf\";\nimport parse from \"csv-parse/lib/sync\";\nimport { IMetaData } from \"./GraphStore\";\n\n/**\n * @description interface for the node file being configured\n * @author Zichen XU\n * @export\n * @interface INodeFileConfig\n */\nexport interface INodeFileConfig {\n    // the file is successfully parsed and ready for display\n    isReady: boolean;\n    parseError: boolean;\n    path: string;\n\n    // has header at the top\n    hasHeader: boolean;\n\n    // Get top 20 lines. Or if there's less than 10 line, get all the lines.\n    topN: any[];\n    //names for the columns of this csv\n    columns: string[];\n    mapping: {\n        id: string;\n    };\n    delimiter: string;\n}\n/**\n * @description interface for the edge file being configured\n * @author Zichen XU\n * @export\n * @interface IEdgeFileConfig\n */\nexport interface IEdgeFileConfig {\n    isReady: boolean;\n    parseError: boolean;\n\n    // should save the csv to temp for further change the cluster attribute\n    path: string;\n    hasHeader: boolean;\n\n    // array of objects storing the\n    topN: any[];\n    columns: string[];\n    mapping: {\n        fromId: string;\n        toId: string;\n    };\n    delimiter: string;\n}\n\n/**\n * @description this class defines some necessary configs for the graph-importing procedures\n * such as the `INodeFileConfig` and `IEdgeFileConfig` for customizing the csv/gexf file parsing procedure\n * Other functions like `renderImportNode/EdgePreview` renders the preview table in the ImportDialog\n * and `importGraphFromCSV/GEXF` reads the file input and produce the `graphology` object to be assigned to `GraphStore`\n * with some basic error handling strategies\n * These functions are designed to be synchronized to prevent frozen of UI.\n * @author Zichen XU\n * @export\n */\nexport default class ImportStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    // whether the graph is in importing\n    isLoading = false;\n    //name of the edge file\n    edgeFileName = \"Choose Edge File ...\";\n\n    //name of the node file\n    nodeFileName = \"Choose Node File ...\";\n\n    //name of the GEXF file\n    gexfFileName = \"Choose GEXF File ...\";\n\n    importDialogOpen = false;\n\n    importGEXFDialogOpen = false;\n\n    // specific: File object selected via the file input.\n    selectedEdgeFileFromInput!: File;\n    selectedNodeFileFromInput!: File;\n\n    selectedGEXFFileFromInput!: File;\n\n    importConfig = {\n        hasNodeFile: false,\n        nodeFile: {\n            // the file is successfully parsed and ready for display\n            isReady: false,\n            parseError: false,\n            path: \"\",\n\n            // has header at the top\n            hasHeader: true,\n\n            // Get top 20 lines. Or if there's less than 10 line, get all the lines.\n            topN: [],\n            //names for the columns of this csv\n            columns: [],\n            mapping: {\n                id: \"Unknown\",\n            },\n            delimiter: \",\",\n        } as INodeFileConfig,\n        edgeFile: {\n            isReady: false,\n            parseError: false,\n\n            // should save the csv to temp for further change the cluster attribute\n            path: \"\",\n            hasHeader: true,\n\n            // array of objects storing the\n            topN: [],\n            columns: [],\n            mapping: {\n                fromId: \"Unknown\",\n                toId: \"Unknown\",\n            },\n            delimiter: \",\",\n        } as IEdgeFileConfig,\n    };\n\n    /**\n     * @description read the CSV file specified by fileObject, with options defined by other paras\n     * and return a list of objects containing the key-value pair of attribute-value\n     * @author Zichen XU\n     * @private\n     * @param {File} fileObject\n     * @param {boolean} hasHeader\n     * @param {string} delimiter\n     * @returns {*}  {Promise<any[]>}\n     *      * where Object is of { attribute: number | string, anotherAttribute: number | string, ... } type\n\n     */\n    private async readCSV(\n        fileObject: File,\n        hasHeader: boolean,\n        delimiter: string\n    ): Promise<any[]> {\n        const file = fileObject;\n        const reader = new FileReader();\n        reader.readAsText(file);\n        return new Promise((resolve, reject) => {\n            reader.onload = () => {\n                let content: any = reader.result;\n                content = content.replace(/\\r\\n/g, \"\\n\");\n                content = content.replace(/\\r/g, \"\\n\");\n                try {\n                    if (hasHeader) {\n                        resolve(\n                            parse(content, {\n                                comment: \"#\",\n                                trim: true,\n                                auto_parse: true,\n                                skip_empty_lines: true,\n                                columns: hasHeader,\n                                delimiter,\n                            })\n                        );\n                    }\n                    resolve(\n                        parse(content, {\n                            comment: \"#\",\n                            trim: true,\n                            auto_parse: true,\n                            skip_empty_lines: true,\n                            columns: undefined,\n                            delimiter,\n                        })\n                    );\n                } catch (err) {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: \" + err.message,\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                }\n            };\n        });\n    }\n\n    /**\n     * @description parse the graph from import GEXF file specified in selectedGEXFFileFromInput\n     * and return a Graph object\n     * @author Zichen XU\n     * @private\n     * @returns {*}  {Promise<Graph>}\n     */\n    private async readGEXF(): Promise<Graph> {\n        const file = this.selectedGEXFFileFromInput;\n        const reader = new FileReader();\n        reader.readAsText(file);\n        return new Promise((resolve, reject) => {\n            reader.onload = () => {\n                try {\n                    resolve(gexf.parse(Graph, reader.result as string));\n                } catch (err) {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: \" + err.message,\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                    this.isLoading = false;\n                }\n            };\n        });\n    }\n\n    /**\n     * @description helper function to read edge csv and call this.readCSV()\n     * @author Zichen XU\n     * @returns {*}  {Promise<any[]>}\n     */\n    public readEdgeCSV(): Promise<any[]> {\n        return this.readCSV(\n            this.selectedEdgeFileFromInput,\n            this.importConfig.edgeFile.hasHeader,\n            this.importConfig.edgeFile.delimiter\n        );\n    }\n\n    /**\n     * @description helper function to read node csv and call this.readCSV()\n     * @author Zichen XU\n     * @returns {*}  {Promise<any[]>}\n     */\n    public readNodeCSV(): Promise<any[]> {\n        return this.readCSV(\n            this.selectedNodeFileFromInput,\n            this.importConfig.nodeFile.hasHeader,\n            this.importConfig.nodeFile.delimiter\n        );\n    }\n\n    /**\n     * @description will create a Graph structure to store the nodes and edges in the imported File\n     * should handle whether or not have the NodeFile, whether or not have the header of each file\n     * if successfully imported, change the .isReady to be true\n     * @author Zichen XU\n     * @returns {*}\n     */\n    public async importGraphFromCSV() {\n        const config = this.importConfig;\n\n        // the CSV lib we use uses int index when there's not header/column names specified\n        const fromColumn = config.edgeFile.hasHeader\n            ? config.edgeFile.mapping.fromId\n            : parseInt(config.edgeFile.mapping.fromId);\n        const toColumn = config.edgeFile.hasHeader\n            ? config.edgeFile.mapping.toId\n            : parseInt(config.edgeFile.mapping.toId);\n\n        let tempNodes: any[] = [];\n        let tempEdges: any[] = [];\n\n        const graph = new Graph({\n            allowSelfLoops: true,\n            multi: false,\n            type: \"undirected\",\n        });\n\n        // parse Node file and store into the Graph DS\n        if (config.hasNodeFile) {\n            if (this.importConfig.nodeFile.hasHeader) {\n                // if has header, then tempNodes returns an array of objects\n                tempNodes = (await this.readNodeCSV()) as Object[];\n                tempNodes.forEach((node) => {\n                    let nodeId = node[config.nodeFile.mapping.id].toString();\n                    delete node[config.nodeFile.mapping.id];\n                    graph.addNode(nodeId, node);\n                });\n            } else {\n                // if no header, then tempNodes returns an array of array\n                tempNodes = (await this.readNodeCSV()) as any[][];\n                tempNodes.forEach((node) => {\n                    let nodeId = node[config.nodeFile.mapping.id].toString();\n                    let attributes = Object.assign({}, node);\n                    delete attributes[config.nodeFile.mapping.id];\n                    graph.addNode(nodeId, attributes);\n                });\n            }\n        }\n\n        // parse Edge file and store into the Graph DS\n        tempEdges = await this.readEdgeCSV();\n        tempEdges.forEach((edge, idx) => {\n            let fromId = edge[fromColumn].toString();\n            let toId = edge[toColumn].toString();\n\n            if (!graph.hasNode(fromId)) {\n                graph.addNode(fromId, {});\n            }\n            if (!graph.hasNode(toId)) {\n                graph.addNode(toId, {});\n            }\n            graph.addEdgeWithKey(idx, fromId, toId);\n        });\n\n        config.edgeFile.isReady = true;\n\n        let nodeProperties = config.hasNodeFile\n            ? Object.keys(tempNodes[0])\n            : [\"id\"];\n\n        return {\n            graph: graph,\n            metadata: {\n                snapshotName: \"Untitled\",\n                nodeProperties: nodeProperties,\n            } as IMetaData,\n        };\n    }\n\n    /**\n     * @description will create a Graph structure to store the nodes and edges in the imported File\n     * please use try catch to avoid any invalid GEXF file\n     * @author Zichen XU\n     * @returns {*}\n     */\n    public async importGraphFromGEXF() {\n        let graph = await this.readGEXF();\n        let nodeProperties: string[] = [];\n        for (const [key] of Object.entries(\n            graph.getNodeAttributes(graph.nodes()[0])\n        )) {\n            nodeProperties.push(key);\n        }\n\n        return {\n            graph: graph,\n            metadata: {\n                snapshotName: \"Untitled\",\n                nodeProperties: nodeProperties,\n            } as IMetaData,\n        };\n    }\n\n    /**\n     * @description change the importConfig.edgeFile.topN to be the top 10 parsed elements in the input edge file\n     * change the importConfig.edgeFile.columns to be the attributes of the imported edge file\n     * set the .mapping.fromId and .mapping.toId to be the first and second (if have) attribute of the input edge file.\n     *\n     * if successfully parsed, set the .isReady to be true, else set the.parseError\n     *\n     * This function will autorun if user specify the selectedEdgeFileFromInput and the changes that this function will make is to get ready for the rendering of preview Table in the ImportDialog\n     *\n     * @author Zichen XU\n     * @returns {*}\n     */\n    public async renderImportEdgePreview() {\n        let file = this.selectedEdgeFileFromInput;\n        let edgeFileConfig = this.importConfig.edgeFile;\n        let hasHeader = edgeFileConfig.hasHeader;\n        let delimiter = edgeFileConfig.delimiter;\n\n        edgeFileConfig.parseError = false;\n\n        return new Promise<void>((resolve, reject): void => {\n            if (!file) {\n                return;\n            }\n            const reader = new FileReader();\n            reader.readAsText(file);\n\n            reader.onload = () => {\n                // Read entire CSV into memory as string\n                let fileAsString = reader.result as string;\n\n                // if the file is not regularly formatted, replace the EOL character\n                fileAsString = fileAsString.replace(/\\r\\n/g, \"\\n\");\n                fileAsString = fileAsString.replace(/\\r/g, \"\\n\");\n\n                // Get top 10ß lines. Or if there's less than 10 line, get all the lines.\n                const lines = fileAsString.split(\"\\n\");\n                const topLinesAsString = lines\n                    .map((l) => l.trim())\n                    .slice(0, lines.length < 10 ? lines.length : 10)\n                    .join(\"\\n\");\n                console.log(topLinesAsString);\n\n                // Parse the top lines\n                try {\n                    const it = hasHeader\n                        ? parse(topLinesAsString, {\n                              comment: \"#\",\n                              trim: true,\n                              auto_parse: true,\n                              skip_empty_lines: true,\n                              columns: hasHeader,\n                              delimiter: delimiter,\n                          })\n                        : parse(topLinesAsString, {\n                              comment: \"#\",\n                              trim: true,\n                              auto_parse: true,\n                              skip_empty_lines: true,\n                              columns: undefined,\n                              delimiter: delimiter,\n                          });\n                    edgeFileConfig.topN = it;\n                    edgeFileConfig.columns = Object.keys(it[0]).map(\n                        (key) => `${key}`\n                    );\n\n                    // if there exists two or more columns in the parsed edge file\n                    if (edgeFileConfig.columns.length >= 2) {\n                        edgeFileConfig.mapping.fromId =\n                            edgeFileConfig.columns[0];\n                        edgeFileConfig.mapping.toId = edgeFileConfig.columns[1];\n                        edgeFileConfig.isReady = true;\n                    } else if (edgeFileConfig.columns.length === 1) {\n                        edgeFileConfig.mapping.fromId = edgeFileConfig.mapping.toId =\n                            edgeFileConfig.columns[0];\n                        edgeFileConfig.isReady = true;\n                    } else {\n                        Toaster.create({\n                            position: Position.TOP,\n                        }).show({\n                            message: \"Error: Fails to parse file\",\n                            intent: Intent.DANGER,\n                            timeout: -1,\n                        });\n                        edgeFileConfig.parseError = true;\n                    }\n                    resolve();\n                } catch {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: Fails to parse file\",\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                    edgeFileConfig.parseError = true;\n                    reject();\n                }\n            };\n\n            reader.onerror = () => {\n                console.error(reader.error);\n                Toaster.create({\n                    position: Position.TOP,\n                }).show({\n                    action: {\n                        onClick: () => window.location.reload(),\n                        text: \"Refresh Page\",\n                    },\n                    message: \"Error: Fails to open file\",\n                    intent: Intent.DANGER,\n                    timeout: -1,\n                });\n                reject();\n            };\n        });\n    }\n\n    /**\n     * @description change the importConfig.nodeFile.topN to be the top 10 parsed elements in the input node file\n     * change the importConfig.nodeFile.columns to be the attributes of the imported node file\n     * set the .mapping.id .mapping.cluster to be the first and second (if have) attribute of the input edge file.\n     *\n     * if successfully parsed, set the .isReady to be true, else set the.parseError\n     *\n     * This function will autorun if user specify the selectedNodeFileFromInput and the changes that this function will make is to get ready for the rendering of preview Table in the ImportDialog\n\n     * @author Zichen XU\n     * @returns {*} \n     */\n    public async renderImportNodePreview() {\n        let file = this.selectedNodeFileFromInput;\n        let nodeFileConfig = this.importConfig.nodeFile;\n        let hasHeader = nodeFileConfig.hasHeader;\n        let delimiter = nodeFileConfig.delimiter;\n\n        nodeFileConfig.parseError = false;\n\n        return new Promise<void>((resolve, reject): void => {\n            if (!file) {\n                return;\n            }\n            const reader = new FileReader();\n            reader.readAsText(file);\n\n            reader.onload = () => {\n                // Read entire CSV into memory as string\n                let fileAsString = reader.result as string;\n\n                // if the file is not regularly formatted, replace the EOL character\n                fileAsString = fileAsString.replace(/\\r\\n/g, \"\\n\");\n                fileAsString = fileAsString.replace(/\\r/g, \"\\n\");\n\n                // Get top 10 lines. Or if there's less than 10 line, get all the lines.\n                const lines = fileAsString.split(\"\\n\");\n                const topLinesAsString = lines\n                    .map((l) => l.trim())\n                    .slice(0, lines.length < 10 ? lines.length : 10)\n                    .join(\"\\n\");\n                console.log(topLinesAsString);\n\n                // Parse the top lines\n                try {\n                    const it = hasHeader\n                        ? parse(topLinesAsString, {\n                              comment: \"#\",\n                              trim: true,\n                              auto_parse: true,\n                              skip_empty_lines: true,\n                              columns: hasHeader,\n                              delimiter,\n                          })\n                        : parse(topLinesAsString, {\n                              comment: \"#\",\n                              trim: true,\n                              auto_parse: true,\n                              skip_empty_lines: true,\n                              columns: undefined,\n                              delimiter,\n                          });\n                    nodeFileConfig.topN = it;\n                    nodeFileConfig.columns = Object.keys(it[0]).map(\n                        (key) => `${key}`\n                    );\n\n                    // if there exists two or more columns in the parsed edge file\n                    if (nodeFileConfig.columns.length >= 1) {\n                        nodeFileConfig.mapping.id = nodeFileConfig.columns[0];\n                        nodeFileConfig.isReady = true;\n                    } else {\n                        Toaster.create({\n                            position: Position.TOP,\n                        }).show({\n                            message: \"Error: Fails to parse file\",\n                            intent: Intent.DANGER,\n                            timeout: -1,\n                        });\n                        nodeFileConfig.parseError = true;\n                    }\n                    resolve();\n                } catch {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: Fails to parse file\",\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                    nodeFileConfig.parseError = true;\n                    reject();\n                }\n            };\n\n            reader.onerror = () => {\n                console.error(reader.error);\n                Toaster.create({\n                    position: Position.TOP,\n                }).show({\n                    action: {\n                        onClick: () => window.location.reload(),\n                        text: \"Refresh Page\",\n                    },\n                    message: \"Error: Fails to open file\",\n                    intent: Intent.DANGER,\n                    timeout: -1,\n                });\n                reject();\n            };\n        });\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\nimport State from \".\";\n\n/**\n * @description this file is the backend support for the NodeSearch feature\n * and will compute the possible searching candidates according to the query parameters\n * @author Zichen XU\n * @export\n * @class SearchStore\n */\nexport default class SearchStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    //\n    /**\n     * @description if is previewing, ignore all mouse hovers detected by NodeDetailPanel\n     * because it is showing the detail of selected node\n     * @author Zichen XU\n     */\n    isPreviewing = false;\n\n    /**\n     * @description the search string typed in by user\n     * can use defined regex like:\n     * id:123\n     * attr:color:red\n     * @author Zichen XU\n     */\n    searchStr = \"\";\n\n    /**\n     * @description if filter search is selected\n     * null will be to search on id, and others will be to search based on that attribute value\n     * @author Zichen XU\n     * @type {(string | null)}\n     */\n    filterProps: string | null = null;\n\n    // contains node ids\n\n    /**\n     * @description compute a list of nodeids queried by the searchStr\n     * @author Zichen XU\n     * @type {string[]}\n     */\n    get candidates(): string[] {\n        let outputList: string[] = [];\n        let searchStrIgnoreCase = this.searchStr.toLocaleLowerCase();\n        if (this.filterProps === null) {\n            // search on id\n            State.graph.rawGraph.forEachNode((node) => {\n                if (node.toLocaleLowerCase().includes(searchStrIgnoreCase)) {\n                    outputList.push(node);\n                }\n            });\n        } else {\n            // have specify the attribute\n            const searchAttr = this.filterProps as string;\n            State.graph.rawGraph.forEachNode((node, attributes) => {\n                if (attributes.hasOwnProperty(searchAttr)) {\n                    let attribute = attributes[searchAttr];\n                    if (\n                        attribute\n                            .toString()\n                            .toLocaleLowerCase()\n                            .includes(searchStrIgnoreCase)\n                    ) {\n                        outputList.push(node);\n                    }\n                }\n            });\n        }\n        return outputList;\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\nimport * as THREE from \"three\";\nimport randomcolor from \"randomcolor\";\nimport State from \".\";\n\n/**\n * this store handles the cluster generating according to the clusterBy defined by user\n * by applying the computed value in MobX\n * the keyAttributes, getAttributeValues, attributeKeys, attributeColor and attributePoints will auto-compute accordingly in code reference order\n * and ultimately produce a mapping from (the cluster value) to (a array of node points)\n * which shall be used by Cluster3DObjectStore to compute the 3D-convex hull used in the 3d-renderer\n *\n * @export\n * @class ClusterStore\n */\nexport default class ClusterStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    /**\n     * @description specify which attribute to be clustered\n     * the default value should be null, and front-end graph will interpret this to Not-Cluster\n     *\n     * @summary attention: please use setCluster() to alter this data\n     * @author Zichen XU\n     * @type {(string | null)}\n     */\n    clusterBy: string | null = null;\n\n    /**\n     * @description the setter of clusterBy\n     * will update the front-end 3d graph about the cluster changes\n     * @author Zichen XU\n     * @param {(string | null)} to\n     * @param {boolean} [forceUpdate=false]\n     */\n    setCluster(to: string | null, forceUpdate: boolean = false) {\n        if (forceUpdate) {\n            this.setCluster(null);\n            this.setCluster(to);\n        } else {\n            this.clusterBy = to;\n            State.graphDelegate.clusterObject.initEmptyMapAndFusion();\n            State.graph.refreshGraph();\n            State.graph.rawGraph.setAttribute(\"default\", to);\n        }\n    }\n\n    /**\n     * @computed\n     * @description a auto computed map\n     * will auto-update if $rawGraph or $clusterBy is changed\n     * [the id of a Node -> the value of the attribute specified by $clusterBy]\n     * @author Zichen XU\n     * @readonly\n     * @type {(Map<string, string | number>)}\n     */\n    get keyAttribute(): Map<string, string | number> {\n        const keyValueMap = new Map<string, string | number>();\n        if (this.clusterBy === null) {\n            return keyValueMap;\n        }\n        const attribute = this.clusterBy as string;\n\n        State.graph.rawGraph.forEachNode((key, attributes) => {\n            // if this attribute is defined\n            if (attributes.hasOwnProperty(attribute)) {\n                if (attributes[attribute] === \"\") {\n                    // ignore those which empty attribute\n                } else {\n                    keyValueMap.set(key, attributes[attribute]);\n                }\n            } else {\n                // this attribute is undefined in this node\n            }\n        });\n        return keyValueMap;\n    }\n\n    /**\n     * @computed\n     * @description the possible attribute values of the attribute defined by $clusterBy\n     * @author Zichen XU\n     * @readonly\n     * @type {((string | number)[])}\n     */\n    get getAttributeValues(): (string | number)[] {\n        return Array.from(new Set(this.keyAttribute.values()));\n    }\n\n    /**\n     * @computed\n     * @description a auto computed map\n     * will auto-update if $rawGraph or $clusterBy is changed\n     * [the possible values of the attribute specified by $clusterBy -> a list of Node ids]\n     * @author Zichen XU\n     * @readonly\n     * @type {(Map<string | number, string[]>)}\n     */\n    get attributeKeys(): Map<string | number, string[]> {\n        const attributeKeysMap = new Map<string | number, string[]>();\n        this.getAttributeValues.forEach((value) => {\n            attributeKeysMap.set(value, []);\n        });\n        this.keyAttribute.forEach((value, key) => {\n            attributeKeysMap.get(value)?.push(key);\n        });\n        return attributeKeysMap;\n    }\n\n    /**\n     * @computed\n     * @description a auto computed map\n     * will auto-update if $rawGraph or $clusterBy is changed\n     * [the possible values of the attribute specified by $clusterBy -> the random colour of this cluster]\n     * used to avoid re-compute the colours on every frame refresh\n     * @author Zichen XU\n     * @readonly\n     * @type {(Map<string | number, string>)}\n     */\n    get attributeColor(): Map<string | number, string> {\n        let colors = randomcolor({\n            seed: 1,\n            count: this.getAttributeValues.length,\n        });\n        let position = 0;\n        let map = new Map<string | number, string>();\n        this.getAttributeValues.forEach((attribute) => {\n            map.set(attribute, colors[position++]);\n        });\n        return map;\n    }\n\n    /**\n     * @computed\n     * @description a auto computed map\n     * will auto-update if $rawGraph or $clusterBy is changed\n     * [the possible values of the attribute specified by $clusterBy -> the Nodes points in that cluster]\n     * will change on every frame refresh as the Node's position keeps changing.\n     * @author Zichen XU\n     * @readonly\n     * @type {(Map<string | number, THREE.Vector3[]>)}\n     */\n    get attributePoints(): Map<string | number, THREE.Vector3[]> {\n        let map = new Map<string | number, THREE.Vector3[]>();\n        this.getAttributeValues.forEach((attribute) => {\n            let vectorList: THREE.Vector3[] = [];\n            map.set(attribute, vectorList);\n        });\n        State.graph.rawGraph.forEachNode((key, attributes) => {\n            map.get(this.keyAttribute.get(key) as string | number)?.push(\n                new THREE.Vector3(\n                    attributes._visualize.x,\n                    attributes._visualize.y,\n                    attributes._visualize.z\n                )\n            );\n        });\n        return map;\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\n\n/**\n * @description the global configurations for the css of all nodes\n * @author Zichen XU\n * @class NodeGlobalConfig\n */\nclass NodeGlobalConfig {\n    constructor() {\n        makeAutoObservable(this);\n    }\n    defaultColor: string = \"#808080\";\n    selectedColor: string = \"#ffffAA\";\n    multiSelectedColor: string = \"#ffffff\";\n    highlightColor: string = \"#ff6060\";\n\n    resolution = 12;\n\n    size = 4;\n}\n\n/**\n * @description the global configurations for the css of all edges\n * @author Zichen XU\n * @class EdgeGlobalConfig\n */\nclass EdgeGlobalConfig {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    defaultColor = \"#ffffff\";\n\n    selectedColor = \"#ffff00\";\n    highlightColor = \"#ff8E8E\";\n\n    defaultWidth: number = 1;\n\n    highlightWidth: number = 2;\n\n    resolution = 6;\n}\n/**\n * @description the global configurations for the css of all labels\n * @author Zichen XU\n * @class LabelConfig\n */\nclass LabelConfig {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    show = true;\n    color = \"#d3d3d3\";\n    size = 4;\n}\n/**\n * @description the global configurations for the css of all clusters\n * @author Zichen XU\n * @class ClusterConfig\n */\nclass ClusterConfig {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    clusterForce = 20;\n    normalForce = 50;\n    resolution = 10;\n    shape: \"convexHull\" | \"sphere\" = \"convexHull\";\n}\n\n/**\n * @description as the name indicates, it stores the customized style of Nodes/Edges/Label/Clusters\n * and any change on it should then call State.graphDelegate.graphDelegateMethods.refresh() to apply changes\n * @author Zichen XU, Zhiyuan LYU\n * @export\n * @class CssStore\n */\nexport default class CssStore {\n    constructor() {\n        makeAutoObservable(this);\n        this.node = new NodeGlobalConfig();\n        this.edge = new EdgeGlobalConfig();\n        this.label = new LabelConfig();\n        this.cluster = new ClusterConfig();\n    }\n\n    node!: NodeGlobalConfig;\n\n    edge!: EdgeGlobalConfig;\n\n    label!: LabelConfig;\n\n    cluster!: ClusterConfig;\n\n    isAnimating: boolean = true;\n}\n","import convert from \"xml-js\";\n\nexport const GITHUB_URL = \"\";\n\nexport const SAMPLE_GRAPH_SNAPSHOTS = [\n    [\n        \"Les Miserables\",\n        \"source,target,value\\rNapoleon,Myriel,1\\rMlle.Baptistine,Myriel,8\\rMme.Magloire,Myriel,10\\rMme.Magloire,Mlle.Baptistine,6\\rCountessdeLo,Myriel,1\\rGeborand,Myriel,1\\rChamptercier,Myriel,1\\rCravatte,Myriel,1\\rCount,Myriel,2\\rOldMan,Myriel,1\\rValjean,Labarre,1\\rValjean,Mme.Magloire,3\\rValjean,Mlle.Baptistine,3\\rValjean,Myriel,5\\rMarguerite,Valjean,1\\rMme.deR,Valjean,1\\rIsabeau,Valjean,1\\rGervais,Valjean,1\\rListolier,Tholomyes,4\\rFameuil,Tholomyes,4\\rFameuil,Listolier,4\\rBlacheville,Tholomyes,4\\rBlacheville,Listolier,4\\rBlacheville,Fameuil,4\\rFavourite,Tholomyes,3\\rFavourite,Listolier,3\\rFavourite,Fameuil,3\\rFavourite,Blacheville,4\\rDahlia,Tholomyes,3\\rDahlia,Listolier,3\\rDahlia,Fameuil,3\\rDahlia,Blacheville,3\\rDahlia,Favourite,5\\rZephine,Tholomyes,3\\rZephine,Listolier,3\\rZephine,Fameuil,3\\rZephine,Blacheville,3\\rZephine,Favourite,4\\rZephine,Dahlia,4\\rFantine,Tholomyes,3\\rFantine,Listolier,3\\rFantine,Fameuil,3\\rFantine,Blacheville,3\\rFantine,Favourite,4\\rFantine,Dahlia,4\\rFantine,Zephine,4\\rFantine,Marguerite,2\\rFantine,Valjean,9\\rMme.Thenardier,Fantine,2\\rMme.Thenardier,Valjean,7\\rThenardier,Mme.Thenardier,13\\rThenardier,Fantine,1\\rThenardier,Valjean,12\\rCosette,Mme.Thenardier,4\\rCosette,Valjean,31\\rCosette,Tholomyes,1\\rCosette,Thenardier,1\\rJavert,Valjean,17\\rJavert,Fantine,5\\rJavert,Thenardier,5\\rJavert,Mme.Thenardier,1\\rJavert,Cosette,1\\rFauchelevent,Valjean,8\\rFauchelevent,Javert,1\\rBamatabois,Fantine,1\\rBamatabois,Javert,1\\rBamatabois,Valjean,2\\rPerpetue,Fantine,1\\rSimplice,Perpetue,2\\rSimplice,Valjean,3\\rSimplice,Fantine,2\\rSimplice,Javert,1\\rScaufflaire,Valjean,1\\rWoman1,Valjean,2\\rWoman1,Javert,1\\rJudge,Valjean,3\\rJudge,Bamatabois,2\\rChampmathieu,Valjean,3\\rChampmathieu,Judge,3\\rChampmathieu,Bamatabois,2\\rBrevet,Judge,2\\rBrevet,Champmathieu,2\\rBrevet,Valjean,2\\rBrevet,Bamatabois,1\\rChenildieu,Judge,2\\rChenildieu,Champmathieu,2\\rChenildieu,Brevet,2\\rChenildieu,Valjean,2\\rChenildieu,Bamatabois,1\\rCochepaille,Judge,2\\rCochepaille,Champmathieu,2\\rCochepaille,Brevet,2\\rCochepaille,Chenildieu,2\\rCochepaille,Valjean,2\\rCochepaille,Bamatabois,1\\rPontmercy,Thenardier,1\\rBoulatruelle,Thenardier,1\\rEponine,Mme.Thenardier,2\\rEponine,Thenardier,3\\rAnzelma,Eponine,2\\rAnzelma,Thenardier,2\\rAnzelma,Mme.Thenardier,1\\rWoman2,Valjean,3\\rWoman2,Cosette,1\\rWoman2,Javert,1\\rMotherInnocent,Fauchelevent,3\\rMotherInnocent,Valjean,1\\rGribier,Fauchelevent,2\\rMme.Burgon,Jondrette,1\\rGavroche,Mme.Burgon,2\\rGavroche,Thenardier,1\\rGavroche,Javert,1\\rGavroche,Valjean,1\\rGillenormand,Cosette,3\\rGillenormand,Valjean,2\\rMagnon,Gillenormand,1\\rMagnon,Mme.Thenardier,1\\rMlle.Gillenormand,Gillenormand,9\\rMlle.Gillenormand,Cosette,2\\rMlle.Gillenormand,Valjean,2\\rMme.Pontmercy,Mlle.Gillenormand,1\\rMme.Pontmercy,Pontmercy,1\\rMlle.Vaubois,Mlle.Gillenormand,1\\rLt.Gillenormand,Mlle.Gillenormand,2\\rLt.Gillenormand,Gillenormand,1\\rLt.Gillenormand,Cosette,1\\rMarius,Mlle.Gillenormand,6\\rMarius,Gillenormand,12\\rMarius,Pontmercy,1\\rMarius,Lt.Gillenormand,1\\rMarius,Cosette,21\\rMarius,Valjean,19\\rMarius,Tholomyes,1\\rMarius,Thenardier,2\\rMarius,Eponine,5\\rMarius,Gavroche,4\\rBaronessT,Gillenormand,1\\rBaronessT,Marius,1\\rMabeuf,Marius,1\\rMabeuf,Eponine,1\\rMabeuf,Gavroche,1\\rEnjolras,Marius,7\\rEnjolras,Gavroche,7\\rEnjolras,Javert,6\\rEnjolras,Mabeuf,1\\rEnjolras,Valjean,4\\rCombeferre,Enjolras,15\\rCombeferre,Marius,5\\rCombeferre,Gavroche,6\\rCombeferre,Mabeuf,2\\rProuvaire,Gavroche,1\\rProuvaire,Enjolras,4\\rProuvaire,Combeferre,2\\rFeuilly,Gavroche,2\\rFeuilly,Enjolras,6\\rFeuilly,Prouvaire,2\\rFeuilly,Combeferre,5\\rFeuilly,Mabeuf,1\\rFeuilly,Marius,1\\rCourfeyrac,Marius,9\\rCourfeyrac,Enjolras,17\\rCourfeyrac,Combeferre,13\\rCourfeyrac,Gavroche,7\\rCourfeyrac,Mabeuf,2\\rCourfeyrac,Eponine,1\\rCourfeyrac,Feuilly,6\\rCourfeyrac,Prouvaire,3\\rBahorel,Combeferre,5\\rBahorel,Gavroche,5\\rBahorel,Courfeyrac,6\\rBahorel,Mabeuf,2\\rBahorel,Enjolras,4\\rBahorel,Feuilly,3\\rBahorel,Prouvaire,2\\rBahorel,Marius,1\\rBossuet,Marius,5\\rBossuet,Courfeyrac,12\\rBossuet,Gavroche,5\\rBossuet,Bahorel,4\\rBossuet,Enjolras,10\\rBossuet,Feuilly,6\\rBossuet,Prouvaire,2\\rBossuet,Combeferre,9\\rBossuet,Mabeuf,1\\rBossuet,Valjean,1\\rJoly,Bahorel,5\\rJoly,Bossuet,7\\rJoly,Gavroche,3\\rJoly,Courfeyrac,5\\rJoly,Enjolras,5\\rJoly,Feuilly,5\\rJoly,Prouvaire,2\\rJoly,Combeferre,5\\rJoly,Mabeuf,1\\rJoly,Marius,2\\rGrantaire,Bossuet,3\\rGrantaire,Enjolras,3\\rGrantaire,Combeferre,1\\rGrantaire,Courfeyrac,2\\rGrantaire,Joly,2\\rGrantaire,Gavroche,1\\rGrantaire,Bahorel,1\\rGrantaire,Feuilly,1\\rGrantaire,Prouvaire,1\\rMotherPlutarch,Mabeuf,3\\rGueulemer,Thenardier,5\\rGueulemer,Valjean,1\\rGueulemer,Mme.Thenardier,1\\rGueulemer,Javert,1\\rGueulemer,Gavroche,1\\rGueulemer,Eponine,1\\rBabet,Thenardier,6\\rBabet,Gueulemer,6\\rBabet,Valjean,1\\rBabet,Mme.Thenardier,1\\rBabet,Javert,2\\rBabet,Gavroche,1\\rBabet,Eponine,1\\rClaquesous,Thenardier,4\\rClaquesous,Babet,4\\rClaquesous,Gueulemer,4\\rClaquesous,Valjean,1\\rClaquesous,Mme.Thenardier,1\\rClaquesous,Javert,1\\rClaquesous,Eponine,1\\rClaquesous,Enjolras,1\\rMontparnasse,Javert,1\\rMontparnasse,Babet,2\\rMontparnasse,Gueulemer,2\\rMontparnasse,Claquesous,2\\rMontparnasse,Valjean,1\\rMontparnasse,Gavroche,1\\rMontparnasse,Eponine,1\\rMontparnasse,Thenardier,1\\rToussaint,Cosette,2\\rToussaint,Javert,1\\rToussaint,Valjean,1\\rChild1,Gavroche,2\\rChild2,Gavroche,2\\rChild2,Child1,3\\rBrujon,Babet,3\\rBrujon,Gueulemer,3\\rBrujon,Thenardier,3\\rBrujon,Gavroche,1\\rBrujon,Eponine,1\\rBrujon,Claquesous,1\\rBrujon,Montparnasse,1\\rMme.Hucheloup,Bossuet,1\\rMme.Hucheloup,Joly,1\\rMme.Hucheloup,Grantaire,1\\rMme.Hucheloup,Bahorel,1\\rMme.Hucheloup,Courfeyrac,1\\rMme.Hucheloup,Gavroche,1\\rMme.Hucheloup,Enjolras,1\",\n    ],\n    [\"COVID-19 Citation Graph 06-02\", \"../samples/json/a.json\"],\n];\n\nexport async function fetchSampleGraph(url: string) {\n    try {\n        let response = await fetch(url, { mode: \"no-cors\" });\n        let gexfJson = await response.json();\n        return new File([convert.json2xml(gexfJson)], \"sample.gexf\", {\n            type: \"text/xml\",\n        });\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const NAVBAR_HEIGHT = 50;\n\nexport const NODE_AND_EDGE_FILE = \"import both nodes and edges file\";\nexport const ONLY_EDGE_FILE = \"only import edges file\";\n\nexport const COLOR_LIST = {\n    aliceblue: 0xf0f8ff,\n    antiquewhite: 0xfaebd7,\n    aqua: 0x00ffff,\n    aquamarine: 0x7fffd4,\n    azure: 0xf0ffff,\n    beige: 0xf5f5dc,\n    bisque: 0xffe4c4,\n    black: 0x000000,\n    blanchedalmond: 0xffebcd,\n    blue: 0x0000ff,\n    blueviolet: 0x8a2be2,\n    brown: 0xa52a2a,\n    burlywood: 0xdeb887,\n    cadetblue: 0x5f9ea0,\n    chartreuse: 0x7fff00,\n    chocolate: 0xd2691e,\n    coral: 0xff7f50,\n    cornflowerblue: 0x6495ed,\n    cornsilk: 0xfff8dc,\n    crimson: 0xdc143c,\n    cyan: 0x00ffff,\n    darkblue: 0x00008b,\n    darkcyan: 0x008b8b,\n    darkgoldenrod: 0xb8860b,\n    darkgray: 0xa9a9a9,\n    darkgreen: 0x006400,\n    darkgrey: 0xa9a9a9,\n    darkkhaki: 0xbdb76b,\n    darkmagenta: 0x8b008b,\n    darkolivegreen: 0x556b2f,\n    darkorange: 0xff8c00,\n    darkorchid: 0x9932cc,\n    darkred: 0x8b0000,\n    darksalmon: 0xe9967a,\n    darkseagreen: 0x8fbc8f,\n    darkslateblue: 0x483d8b,\n    darkslategray: 0x2f4f4f,\n    darkslategrey: 0x2f4f4f,\n    darkturquoise: 0x00ced1,\n    darkviolet: 0x9400d3,\n    deeppink: 0xff1493,\n    deepskyblue: 0x00bfff,\n    dimgray: 0x696969,\n    dimgrey: 0x696969,\n    dodgerblue: 0x1e90ff,\n    firebrick: 0xb22222,\n    floralwhite: 0xfffaf0,\n    forestgreen: 0x228b22,\n    fuchsia: 0xff00ff,\n    gainsboro: 0xdcdcdc,\n    ghostwhite: 0xf8f8ff,\n    gold: 0xffd700,\n    goldenrod: 0xdaa520,\n    gray: 0x808080,\n    green: 0x008000,\n    greenyellow: 0xadff2f,\n    grey: 0x808080,\n    honeydew: 0xf0fff0,\n    hotpink: 0xff69b4,\n    indianred: 0xcd5c5c,\n    indigo: 0x4b0082,\n    ivory: 0xfffff0,\n    khaki: 0xf0e68c,\n    lavender: 0xe6e6fa,\n    lavenderblush: 0xfff0f5,\n    lawngreen: 0x7cfc00,\n    lemonchiffon: 0xfffacd,\n    lightblue: 0xadd8e6,\n    lightcoral: 0xf08080,\n    lightcyan: 0xe0ffff,\n    lightgoldenrodyellow: 0xfafad2,\n    lightgray: 0xd3d3d3,\n    lightgreen: 0x90ee90,\n    lightgrey: 0xd3d3d3,\n    lightpink: 0xffb6c1,\n    lightsalmon: 0xffa07a,\n    lightseagreen: 0x20b2aa,\n    lightskyblue: 0x87cefa,\n    lightslategray: 0x778899,\n    lightslategrey: 0x778899,\n    lightsteelblue: 0xb0c4de,\n    lightyellow: 0xffffe0,\n    lime: 0x00ff00,\n    limegreen: 0x32cd32,\n    linen: 0xfaf0e6,\n    magenta: 0xff00ff,\n    maroon: 0x800000,\n    mediumaquamarine: 0x66cdaa,\n    mediumblue: 0x0000cd,\n    mediumorchid: 0xba55d3,\n    mediumpurple: 0x9370db,\n    mediumseagreen: 0x3cb371,\n    mediumslateblue: 0x7b68ee,\n    mediumspringgreen: 0x00fa9a,\n    mediumturquoise: 0x48d1cc,\n    mediumvioletred: 0xc71585,\n    midnightblue: 0x191970,\n    mintcream: 0xf5fffa,\n    mistyrose: 0xffe4e1,\n    moccasin: 0xffe4b5,\n    navajowhite: 0xffdead,\n    navy: 0x000080,\n    oldlace: 0xfdf5e6,\n    olive: 0x808000,\n    olivedrab: 0x6b8e23,\n    orange: 0xffa500,\n    orangered: 0xff4500,\n    orchid: 0xda70d6,\n    palegoldenrod: 0xeee8aa,\n    palegreen: 0x98fb98,\n    paleturquoise: 0xafeeee,\n    palevioletred: 0xdb7093,\n    papayawhip: 0xffefd5,\n    peachpuff: 0xffdab9,\n    peru: 0xcd853f,\n    pink: 0xffc0cb,\n    plum: 0xdda0dd,\n    powderblue: 0xb0e0e6,\n    purple: 0x800080,\n    rebeccapurple: 0x663399,\n    red: 0xff0000,\n    rosybrown: 0xbc8f8f,\n    royalblue: 0x4169e1,\n    saddlebrown: 0x8b4513,\n    salmon: 0xfa8072,\n    sandybrown: 0xf4a460,\n    seagreen: 0x2e8b57,\n    seashell: 0xfff5ee,\n    sienna: 0xa0522d,\n    silver: 0xc0c0c0,\n    skyblue: 0x87ceeb,\n    slateblue: 0x6a5acd,\n    slategray: 0x708090,\n    slategrey: 0x708090,\n    snow: 0xfffafa,\n    springgreen: 0x00ff7f,\n    steelblue: 0x4682b4,\n    tan: 0xd2b48c,\n    teal: 0x008080,\n    thistle: 0xd8bfd8,\n    tomato: 0xff6347,\n    turquoise: 0x40e0d0,\n    violet: 0xee82ee,\n    wheat: 0xf5deb3,\n    white: 0xffffff,\n    whitesmoke: 0xf5f5f5,\n    yellow: 0xffff00,\n    yellowgreen: 0x9acd32,\n};\n","import { Attributes } from \"graphology-types\";\nimport { makeAutoObservable } from \"mobx\";\nimport State from \".\";\nimport { NAVBAR_HEIGHT } from \"../constants\";\nexport default class InteractionStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    /**\n     * @description the currently selected node\n     * represents the node being right-clicked on\n     * @author Zhiyuan LYU\n     * @type {(string | null)}\n     */\n    selectedNode: string | null = null;\n\n    /**\n     * @description the currently selected nodes id\n     * the singleNodeDetailPanel will render and refresh if this changes\n     * used in NodeSelection panel to do actions on those selected nodes\n     * @author Zhiyuan LYU\n     * @type {string[]}\n     */\n    selectedNodes: string[] = [];\n\n    /**\n     * @description the currently selected edge id\n     * @author Zhiyuan LYU\n     * @type {(string | null)}\n     */\n    selectedEdge: string | null = null;\n\n    /**\n     * @description when the menuItem 'box-select Node' of RightClickPanel is clicked, then this will be set to true,\n     *  and the component 'SelectionBox' will be  visualized only the mode is 'Node Selection' and this variable is true\n     * @author Zhiyuan LYU\n     * @type {boolean}\n     */\n    boxSelectionOpen: boolean = false;\n\n    /**\n     * @description this stores the x and y coordinates when mouse clicked down for box selection\n     * @author Zhiyuan LYU\n     * @type {Attributes}\n     */\n    boxSelection_startPoint: Attributes = {\n        x: 0,\n        y: 0,\n    };\n\n    /**\n     * @description this stores the x and y coordinates when mouse clicked up for box selection\n     * @author Zhiyuan LYU\n     * @type {Attributes}\n     */\n    boxSelection_endPoint: Attributes = {\n        x: 0,\n        y: 0,\n    };\n\n    /**\n     * @description compute the selected node within this selection box\n     * @author Zhiyuan LYU\n     */\n    boxSelectNode() {\n        //clear selectedNodes\n        State.interaction.selectedNodes = [];\n\n        //calculate the box\n        let left = Math.min(\n            this.boxSelection_startPoint.x,\n            this.boxSelection_endPoint.x\n        );\n        let top =\n            Math.min(\n                this.boxSelection_startPoint.y,\n                this.boxSelection_endPoint.y\n            ) - NAVBAR_HEIGHT;\n        let right = Math.max(\n            this.boxSelection_startPoint.x,\n            this.boxSelection_endPoint.x\n        );\n        let down =\n            Math.max(\n                this.boxSelection_startPoint.y,\n                this.boxSelection_endPoint.y\n            ) - NAVBAR_HEIGHT;\n\n        //check which node is inside the box,if true push them into selectedNodes\n        State.graph.rawGraph.forEachNode((node, Attributes) => {\n            let coords = State.graphDelegate.graphDelegateMethods.graph2ScreenCoords(\n                Attributes._visualize.x,\n                Attributes._visualize.y,\n                Attributes._visualize.z\n            );\n            if (\n                left <= coords.x &&\n                coords.x <= right &&\n                top <= coords.y &&\n                down >= coords.y\n            ) {\n                State.interaction.selectedNodes.push(node);\n            }\n        });\n    }\n\n    /**\n     * @description the currently hovered node id\n     * the multiNodeDetailPanel will render and refresh if this changes\n     * @author Zhiyuan LYU\n     * @type {(string | null)}\n     */\n    currentlyHoveredNodeId: string | null = null;\n\n    /**\n     * @description compute the neighbors of the currently hovered node id\n     * @author Zichen XU\n     * @readonly\n     * @type {(string[] | null)}\n     */\n    get currentlyHoveredNodeNeighborEdges(): string[] | null {\n        if (this.currentlyHoveredNodeId === null) {\n            return null;\n        } else {\n            let neighbors = State.graph.rawGraph.neighbors(\n                this.currentlyHoveredNodeId\n            );\n            return neighbors?.map((neighbor: string) => {\n                return this.getEdgeKey(\n                    neighbor,\n                    this.currentlyHoveredNodeId as string\n                ) as string;\n            });\n        }\n    }\n\n    /**\n     * @description get the key of the edge with source and target bidirectional\n     * @author Zhiyuan LYU\n     * @param {string} node1\n     * @param {string} node2\n     * @returns {*}  {(string | null)}\n     */\n    getEdgeKey(node1: string, node2: string): string | null {\n        let go: string | undefined = State.graph.rawGraph.edge(node1, node2);\n        if (go === undefined) {\n            let back: string | undefined = State.graph.rawGraph.edge(\n                node2,\n                node1\n            );\n            if (back === undefined) {\n                return null;\n            } else {\n                return back;\n            }\n        } else {\n            return go;\n        }\n    }\n\n    /**\n     * @description update the _visualize object inside node attribute and calls graph refresh\n     * @author Zichen XU\n     * @param {string} id\n     * @param {Attributes} attribute\n     * @param {(Attributes | null)} [oldAttributeVisualize=null]\n     */\n    updateNodeVisualizeAttribute(\n        id: string,\n        attribute: Attributes,\n        oldAttributeVisualize: Attributes | null = null\n    ) {\n        if (oldAttributeVisualize === null) {\n            oldAttributeVisualize = State.graph.rawGraph.getNodeAttribute(\n                id,\n                \"_visualize\"\n            );\n        }\n\n        this.updateVisualizeAttributeParser(\n            attribute,\n            oldAttributeVisualize as Attributes\n        );\n    }\n\n    /**\n     * @description update the _visualize object inside edge attribute and calls graph refresh\n     * @author Zichen XU\n     * @param {string} key\n     * @param {Attributes} attribute\n     * @param {(Attributes | null)} [oldAttributeVisualize=null]\n     */\n    updateEdgeVisualizeAttribute(\n        key: string,\n        attribute: Attributes,\n        oldAttributeVisualize: Attributes | null = null\n    ) {\n        if (oldAttributeVisualize === null) {\n            oldAttributeVisualize = State.graph.rawGraph.getEdgeAttribute(\n                key,\n                \"_visualize\"\n            );\n        }\n        this.updateVisualizeAttributeParser(\n            attribute,\n            oldAttributeVisualize as Attributes\n        );\n    }\n\n    /**\n     * @description helper method to call by updateEdgeVisualizeAttribute and updateNodeVisualizeAttribute\n     * @author Zichen XU\n     * @private\n     * @param {*} newAttribute\n     * @param {*} oldAttributes\n     */\n    private updateVisualizeAttributeParser(\n        newAttribute: any,\n        oldAttributes: any\n    ) {\n        if (newAttribute.hasOwnProperty(\"hovered\")) {\n            oldAttributes.hovered = newAttribute.hovered;\n        } else if (newAttribute.hasOwnProperty(\"selected\")) {\n            oldAttributes.selected = newAttribute.selected;\n        } else if (newAttribute.hasOwnProperty(\"multiSelected\")) {\n            oldAttributes.multiSelected = newAttribute.multiSelected;\n        }\n    }\n\n    /**\n     * @description should call this on every refresh of graph DS\n     * or simply change the InteractionMode\n     * @author Zichen XU\n     */\n    flush() {\n        this.selectedNode = null;\n        this.selectedNodes = [];\n        this.selectedEdge = null;\n        this.currentlyHoveredNodeId = null;\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\nimport * as THREE from \"three\";\nimport { polygonContains } from \"d3-polygon\";\nimport State from \".\";\n\n/**\n * @description the cluster-mouse-interaction related filed and functions are hereby written in this class\n * such as `currentlyHoveredClusterId`, `selectedCluster` and `selectedClusters`,\n * these selection should be `flush()` after using(or before entering another interaction mode)\n * the callback functions of mouse events are presented as well to handle events like hover/left/rightClick.\n * There are also helper methods to deal with features like mergeCluster and SplitCluster.\n *\n * In the cluster splitting procedure, after user draw a curved link,\n * the segment of that line will be stored in the `lineSegment` and `computeSplitCluster` will be called to compute the two stack of split nodes,\n * the result will be stored inside `confirmClusterSplittingTempData` waiting for the final `splitCluster()` function to confirm this operation\n * @author Zichen XU\n * @export\n * @class ClusterInteractionStore\n */\nexport default class ClusterInteractionStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    /**\n     * @description the cluster UUID (assigned by THREE.js) of the hovered cluster\n     * @author Zichen XU\n     * @type {(string | null)}\n     */\n    currentlyHoveredClusterId: string | null = null;\n\n    /**\n     * @description the selected Cluster UUID used in choosing which cluster to be split\n     * @author Zichen XU\n     * @type {(string | null)}\n     */\n    selectedCluster: string | null = null;\n\n    /**\n     * @description the selected Clusters UUID used in choosing which clusters to be merged\n     * @author Zichen XU\n     * @type {string[]}\n     */\n    selectedClusters: string[] = [];\n\n    /**\n     * @description flush the above fields in situations like switching VisualizationMode\n     * re-import or after graph mutation\n     * @author Zichen XU\n     */\n    flush() {\n        this.currentlyHoveredClusterId = null;\n        this.selectedCluster = null;\n        this.selectedClusters = [];\n    }\n\n    /**\n     * @description this will only be active in the ClusterSelection and ClusterSplit\n     * it will set the selectedCluster and add/remove this cluster in the selectedClusters list\n     * @author Zichen XU\n     * @param {string} uuid uuid of the custer on left-click\n     * @param {MouseEvent} event\n     */\n    clusterLeftClickCallback(uuid: string, event: MouseEvent) {\n        State.graphDelegate.clusterObject.meshSpotlightMaterial(\n            State.graphDelegate.clusterObject.getObjectById(uuid) as THREE.Mesh\n        );\n        // multi-selection\n        let index;\n\n        State.clusterInteraction.selectedCluster = uuid;\n\n        // if already in the list of selected, remove\n        if (\n            (index = State.clusterInteraction.selectedClusters.indexOf(\n                uuid\n            )) !== -1\n        ) {\n            State.clusterInteraction.selectedClusters.splice(index, 1);\n        } else {\n            // if not in the list, add\n            State.clusterInteraction.selectedClusters.push(uuid);\n        }\n    }\n\n    /**\n     * @description this will only be active in the ClusterSelection and ClusterSplit\n     * it will set the currentlyHoveredClusterId to this cluster\n     * @author Zichen XU\n     * @param {(string | null)} uuid of the custer on mouse hover\n     * @param {MouseEvent} event\n     */\n    clusterHoverCallback(uuid: string | null, event: MouseEvent) {\n        State.clusterInteraction.currentlyHoveredClusterId = uuid;\n    }\n\n    /**\n     * @description this will only be active in the ClusterSelection\n     * it will set the selectedCluster to this cluster and open the rightClickPanel\n     * @author Zichen XU\n     * @param {(string | null)} uuid of the custer on mouse hover\n     * @param {MouseEvent} event\n     */\n    clusterRightClickCallback(uuid: string | null, event: MouseEvent) {\n        State.clusterInteraction.selectedCluster = uuid;\n        State.preferences.rightClickPositionX = event.x;\n        State.preferences.rightClickPositionY = event.y;\n        if (uuid) {\n            State.preferences.rightClickOn = \"Cluster\";\n        } else {\n            State.preferences.rightClickOn = \"Background\";\n        }\n        State.preferences.rightClickPanelOpen = true;\n        State.preferences.closeAllPanel(\"rightClickPanel\");\n    }\n\n    /**\n     * @description loop through the selected clusters and set the nodes within that cluster\n     * the newly-formed attribute is named _merge-cluster\n     * and the value to that attribute is the Time() of this time\n     * other nodes unrelated will be set to empty string in this attribute\n     * @author Zichen XU\n     */\n    mergeSelectedClusters() {\n        let date = new Date().toLocaleString(\"en\");\n        let clusterId: string = `Cluster Merged @ ${date}`;\n        if (!State.graph.metadata.nodeProperties.includes(\"_merge-cluster\")) {\n            State.graph.metadata.nodeProperties.push(\"_merge-cluster\");\n        }\n        State.graph.rawGraph.forEachNode((_, attributes) => {\n            attributes[\"_merge-cluster\"] = \"\";\n        });\n        this.selectedClusters.forEach((uuid) => {\n            const clusterValue = State.graphDelegate.clusterObject.UUID2ClusterValueMap.get(\n                uuid\n            ) as string | number;\n            const keys = State.cluster.attributeKeys.get(clusterValue);\n            keys?.forEach((nodeId) => {\n                State.graph.rawGraph.setNodeAttribute(\n                    nodeId,\n                    \"_merge-cluster\",\n                    clusterId\n                );\n            });\n        });\n        State.cluster.setCluster(\"_merge-cluster\");\n        this.flush();\n    }\n\n    /**\n     * @description loop through the selected clusters and set the nodes within that cluster\n     * @author Zichen XU\n     */\n    releaseSelectedClusters() {\n        this.selectedClusters.forEach((uuid) => {\n            const clusterValue = State.graphDelegate.clusterObject.UUID2ClusterValueMap.get(\n                uuid\n            ) as string | number;\n            const keys = State.cluster.attributeKeys.get(clusterValue);\n            keys?.forEach((nodeId) => {\n                State.graph.rawGraph.setNodeAttribute(\n                    nodeId,\n                    State.cluster.clusterBy as string,\n                    \"\"\n                );\n            });\n        });\n        State.cluster.setCluster(State.cluster.clusterBy, true);\n        this.flush();\n    }\n\n    /**\n     * @description whether the drawing panel used in ClusterSplit is active\n     * @author Zichen XU\n     * @type {boolean}\n     */\n    drawPanelActivate: boolean = false;\n\n    /**\n     * @description whether to draw a straight line or a curved line when clustering\n     *\n     * @author Zichen XU\n     * @type {boolean}\n     */\n    drawStraightLine: boolean = false;\n\n    /**\n     * @description the line segments returned by drawing a line\n     * it has the left/right-top points as well to form a polygon\n     * @author Zichen XU\n     * @type {any[]}\n     */\n    lineSegment!: any[];\n\n    /**\n     * @description the temp data returned by splitting the cluster\n     * the value attribute is either 0 or 1 to form two clusters\n     * this data is saved to preview the split to user and wait for final confirmation\n     * @author Zichen XU\n     * @type {({\n     *               value: number;\n     *               id: string;\n     *               x: number;\n     *               y: number;\n     *           }[]\n     *         | null)}\n     */\n    confirmClusterSplittingTempData:\n        | {\n              value: number;\n              id: string;\n              x: number;\n              y: number;\n          }[]\n        | null = null;\n\n    /**\n     * @description compute the clusterSplittingTempData based on the lineSegment data\n     * using the polygonContains to determine which node is in selection\n     * the value attribute is either 0 or 1 to form two clusters\n     * this data is saved to preview the split to user and wait for final confirmation\n     * @author Zichen XU\n     */\n    computeSplitCluster() {\n        let screenCoords = [] as {\n            id: string;\n            x: number;\n            y: number;\n            value: number;\n        }[];\n        const clusterValue = State.graphDelegate.clusterObject.UUID2ClusterValueMap.get(\n            State.clusterInteraction.selectedCluster as string\n        );\n        console.log(clusterValue);\n        let keys = State.cluster.attributeKeys.get(clusterValue!) as string[];\n        keys.forEach((node) => {\n            let attribute = State.graph.rawGraph.getNodeAttributes(node);\n            let coord = State.graphDelegate.graphDelegateMethods.graph2ScreenCoords(\n                attribute._visualize.x,\n                attribute._visualize.y,\n                attribute._visualize.z\n            );\n            screenCoords.push({ id: node, x: coord.x, y: coord.y, value: 0 });\n        });\n\n        let tempLineSegment: [number, number][] = this.lineSegment.map(\n            (value) => {\n                return [value.x, value.y];\n            }\n        );\n\n        screenCoords.forEach((point) => {\n            let inside = polygonContains(tempLineSegment, [point.x, point.y]);\n\n            if (inside) {\n                State.interaction.updateNodeVisualizeAttribute(point.id, {\n                    selected: true,\n                });\n                point.value = 1;\n            } else {\n                State.interaction.updateNodeVisualizeAttribute(point.id, {\n                    selected: false,\n                });\n                point.value = 0;\n            }\n        });\n\n        State.graphDelegate.graphDelegateMethods.refresh();\n        this.confirmClusterSplittingTempData = screenCoords;\n    }\n\n    /**\n     * @description this will be called when user confirm the cluster split\n     * it will set the attribute of these two groups to be different\n     * and clear the tempData\n     * @author Zichen XU\n     */\n    splitCluster() {\n        let date = new Date().toLocaleString(\"en\");\n        const clusterId: string = `Cluster Split @ ${date}`;\n        const anotherClusterId: string = `Another Cluster Split @ ${date}`;\n        const thisCluster = State.cluster.clusterBy;\n\n        const clusterValue = State.graphDelegate.clusterObject.UUID2ClusterValueMap.get(\n            this.selectedCluster as string\n        ) as string | number;\n        const nodesToAlter = State.cluster.attributeKeys.get(\n            clusterValue\n        ) as string[];\n        this.confirmClusterSplittingTempData?.forEach((node) => {\n            if (nodesToAlter.includes(node.id)) {\n                State.graph.rawGraph.setNodeAttribute(\n                    node.id,\n                    thisCluster as string,\n                    node.value === 1 ? clusterId : anotherClusterId\n                );\n            }\n        });\n        this.confirmClusterSplittingTempData = null;\n        State.cluster.setCluster(thisCluster, true);\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\n\n/**\n * @description you may notice that when selecting different VisualizationMode\n * a popover which contains either simple configs or helper messages will pop up\n * this class stores the necessary information to make that happen\n * @author Zichen XU\n * @export\n * @class HelperStackPanelStore\n */\nexport default class HelperStackPanelStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    // Cluster Splitting\n\n    /**\n     * @description if the clusterSplittingPanelStackOpen is open\n     * @author Zichen XU\n     * @type {boolean}\n     */\n    clusterSplittingPanelStackOpen: boolean = false;\n\n    /**\n     * @description can back to any step, and UI should refresh accordingly\n     *\n     * @author Zichen XU\n     * @type {(1 | 2 | 3)}\n     */\n    clusterSplittingCurrentStep: 1 | 2 | 3 = 1;\n\n    /**\n     * @description if the NodeSelectionPanelOpen is open\n     * @author Zichen XU\n     * @type {boolean}\n     */\n    NodeSelectionPanelOpen: boolean = false;\n}\n","import { autorun, reaction } from \"mobx\";\n\nimport PreferencesStore, { VisualizationMode } from \"./PreferencesStore\";\nimport GraphStore from \"./GraphStore\";\nimport ImportStore from \"./ImportStore\";\nimport SearchStore from \"./SearchStore\";\nimport ClusterStore from \"./ClusterStore\";\nimport CssStore from \"./CssStore\";\nimport GraphDelegate from \"./GraphDelegate\";\nimport NodeInteractionStore from \"./NodeInteractionStore\";\nimport ClusterInteractionStore from \"./ClusterInteractionStore\";\nimport HelperStackPanelStore from \"./HelperStackPanelStore\";\nimport ComponentRef from \"../components/ComponentRef\";\n\n/**\n * @description the overall state to store all information of this project\n * use the observable and observer to refresh the React UI\n * @author Zichen XU\n * @class AppState\n */\nclass AppState {\n    static _instance: AppState | null = null;\n\n    preferences!: PreferencesStore;\n    graph!: GraphStore;\n    graphDelegate!: GraphDelegate;\n    interaction!: NodeInteractionStore;\n    clusterInteraction!: ClusterInteractionStore;\n    import!: ImportStore;\n    search!: SearchStore;\n    cluster!: ClusterStore;\n    helper!: HelperStackPanelStore;\n    css!: CssStore;\n\n    private privateConstructor() {\n        this.preferences = new PreferencesStore();\n        this.graph = new GraphStore();\n        this.graphDelegate = new GraphDelegate();\n        this.interaction = new NodeInteractionStore();\n        this.clusterInteraction = new ClusterInteractionStore();\n        this.import = new ImportStore();\n        this.search = new SearchStore();\n        this.cluster = new ClusterStore();\n        this.helper = new HelperStackPanelStore();\n        this.css = new CssStore();\n    }\n\n    // add singleton to prevent creating multiple instances of the State class\n    static get instance() {\n        if (AppState._instance === null) {\n            let instance = new AppState();\n            instance.privateConstructor();\n            AppState._instance = instance;\n            return instance;\n        } else {\n            return AppState._instance;\n        }\n    }\n}\n\nconst State = AppState.instance;\n\n// this is for easily debugging in runtime\n//@ts-ignore\nwindow._state = State;\n\n// extract CSV from selected edge File object and update related fields.\n// will auto run if selectedEdgeFileFromInput or delimiter or anything is changed.\nautorun(() => State.import.renderImportEdgePreview());\n\n// extract CSV from selected node File object and update related fields.\n// will auto run if selectedNodeFileFromInput or delimiter or anything is changed.\nautorun(() => State.import.renderImportNodePreview());\n\n// set the graph to suspend animating according to State.css.isAnimating\nautorun(() => {\n    if (State.css.isAnimating) {\n        State.graphDelegate.graphDelegateMethods?.resumeAnimation();\n    } else {\n        State.graphDelegate.graphDelegateMethods?.pauseAnimation();\n    }\n});\n\n// if cluster selected, goto step 2\nautorun(() => {\n    if (\n        State.preferences.visualizationMode ===\n        VisualizationMode.ClusterSplitting\n    ) {\n        if (State.clusterInteraction.selectedCluster) {\n            State.helper.clusterSplittingCurrentStep = 2;\n            console.log(\"cluster selected\");\n        }\n    } else {\n        State.clusterInteraction.drawPanelActivate = false;\n    }\n});\n\n// the preparation and cleaning when changing of Step\nreaction(\n    () => State.helper.clusterSplittingCurrentStep,\n    (step) => {\n        console.log(`Graph Splitting change to step ${step}`);\n        switch (step) {\n            case 1:\n                State.clusterInteraction.drawPanelActivate = false;\n                State.clusterInteraction.confirmClusterSplittingTempData = null;\n                State.interaction.flush();\n                State.clusterInteraction.flush();\n                State.graphDelegate.graphDelegateMethods.refresh();\n                break;\n\n            case 2:\n                State.clusterInteraction.drawPanelActivate = true;\n                if (State.clusterInteraction.drawStraightLine) {\n                    ComponentRef?.canvasDrawStraightLinePanel.clearDrawing();\n                } else {\n                    ComponentRef?.canvasDrawPanel.clearDrawing();\n                }\n                State.graph.rawGraph.forEachNode((node, oldAttributes) => {\n                    State.interaction.updateNodeVisualizeAttribute(\n                        node,\n                        { selected: false },\n                        oldAttributes._visualize\n                    );\n                });\n                State.clusterInteraction.confirmClusterSplittingTempData = null;\n                State.interaction.flush();\n                State.graphDelegate.graphDelegateMethods.refresh();\n\n                break;\n\n            case 3:\n                State.clusterInteraction.drawPanelActivate = false;\n                break;\n        }\n    }\n);\n\n// if graph is empty, suspend the animation to save computing power\nreaction(\n    () => State.graph.rawGraph?.order,\n    (number) => {\n        if (number === 0) {\n            State.css.isAnimating = false;\n            console.log(\"Pause Animating\");\n        } else {\n            State.css.isAnimating = true;\n            console.log(\"Resume Animating\");\n        }\n    },\n    { fireImmediately: true }\n);\n\n// auto highlight the hovered Cluster\nreaction(\n    () => State.clusterInteraction.currentlyHoveredClusterId,\n    (currentlyHoveredClusterId) => {\n        console.log(\"currentlyHoveredNodeId\", currentlyHoveredClusterId);\n        State.graphDelegate.clusterObject.updateAllMaterials();\n    }\n);\n\n// auto highlight the selected Cluster\nreaction(\n    () => State.clusterInteraction.selectedCluster,\n    () => {\n        State.graphDelegate.clusterObject.updateAllMaterials();\n    }\n);\n\n// auto highlight the selected Clusters\nreaction(\n    () => State.clusterInteraction.selectedClusters,\n    () => {\n        State.graphDelegate.clusterObject.updateAllMaterials();\n    }\n);\n\n// auto color the hovered Node\nreaction(\n    () => State.interaction.currentlyHoveredNodeId,\n    (currentlyHoveredNodeId) => {\n        console.log(\"currentlyHoveredNodeId\", currentlyHoveredNodeId);\n        State.graph.rawGraph.forEachNode((node, oldAttributes) => {\n            if (node === currentlyHoveredNodeId) {\n                State.interaction.updateNodeVisualizeAttribute(\n                    node,\n                    { hovered: true },\n                    oldAttributes._visualize\n                );\n            } else {\n                State.interaction.updateNodeVisualizeAttribute(\n                    node,\n                    { hovered: false },\n                    oldAttributes._visualize\n                );\n            }\n        });\n    }\n);\n\n// auto color the selected node\nreaction(\n    () => State.interaction.selectedNode,\n    (selectedNode) => {\n        console.log(\"selectedNode\", selectedNode);\n        State.graph.rawGraph.forEachNode((node, oldAttributes) => {\n            if (selectedNode === node) {\n                State.interaction.updateNodeVisualizeAttribute(\n                    node,\n                    { selected: true },\n                    oldAttributes._visualize\n                );\n            } else {\n                State.interaction.updateNodeVisualizeAttribute(\n                    node,\n                    { selected: false },\n                    oldAttributes._visualize\n                );\n            }\n        });\n        State.graphDelegate.graphDelegateMethods.refresh();\n    }\n);\n\n// auto color the selected nodes\nreaction(\n    () => State.interaction.selectedNodes.map((node) => node),\n    (selectedNodes) => {\n        console.log(\"selectedNodes\", selectedNodes);\n        State.graph.rawGraph.forEachNode((node, oldAttributes) => {\n            if (selectedNodes.includes(node)) {\n                State.interaction.updateNodeVisualizeAttribute(\n                    node,\n                    { multiSelected: true },\n                    oldAttributes._visualize\n                );\n            } else {\n                State.interaction.updateNodeVisualizeAttribute(\n                    node,\n                    { multiSelected: false },\n                    oldAttributes._visualize\n                );\n            }\n        });\n        State.graphDelegate.graphDelegateMethods.refresh();\n    }\n);\n\n// auto color the selected edge\nreaction(\n    () => State.interaction.selectedEdge,\n    (selectedEdge) => {\n        console.log(\"selectedEdge\", selectedEdge);\n        State.graph.rawGraph.forEachEdge((edge, oldAttributes) => {\n            if (selectedEdge === edge) {\n                State.interaction.updateEdgeVisualizeAttribute(\n                    edge,\n                    { selected: true },\n                    oldAttributes._visualize\n                );\n            } else {\n                State.interaction.updateEdgeVisualizeAttribute(\n                    edge,\n                    { selected: false },\n                    oldAttributes._visualize\n                );\n            }\n        });\n        State.graphDelegate.graphDelegateMethods.refresh();\n    }\n);\n\n// auto color the neighbor edges\nreaction(\n    () => State.interaction.currentlyHoveredNodeNeighborEdges,\n    (neighborEdges) => {\n        State.graph.rawGraph.forEachEdge((edge, oldAttributes) => {\n            if (neighborEdges?.includes(edge)) {\n                State.interaction.updateEdgeVisualizeAttribute(\n                    edge,\n                    { hovered: true },\n                    oldAttributes._visualize\n                );\n            } else {\n                State.interaction.updateEdgeVisualizeAttribute(\n                    edge,\n                    { hovered: false },\n                    oldAttributes._visualize\n                );\n            }\n        });\n        State.graphDelegate.graphDelegateMethods.refresh();\n    }\n);\n\nexport default State;\n","import React, { MouseEventHandler } from \"react\";\nimport { Button, MenuItem } from \"@blueprintjs/core\";\nimport { Select } from \"@blueprintjs/select\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport { copy } from \"copy-anything\";\n\ninterface Props {\n    /**\n     * whether or not to show the None\n     *\n     * @type {string}\n     * @memberof Props\n     */\n    showNone: boolean;\n\n    /**\n     * function to call when a candidate is selected, will be called on every selection of candidate\n     * if None is selected, the item props will be set to null\n     *\n     * @memberof Props\n     */\n    onSelect: (item: string | null) => void;\n\n    /**\n     * the selected to display will sync with this props\n     *\n     * @type {(string | null)}\n     * @memberof Props\n     */\n    syncWith: string | null;\n}\n\ninterface CustomIItemRendererProps {\n    handleClick: MouseEventHandler<HTMLElement>;\n}\n\n/**\n * this component can be used to choose the attribute among all the attributes, with addition none to choose (can be toggled to off)\n * to use it, you have to specify whether to add additional None to the list and onChange function to call when a candidate is selected\n */\nexport default observer(\n    class ClusterChooser extends React.Component<Props, {}> {\n        static defaultProps = {\n            showNone: true,\n        };\n\n        get fullProperties(): string[] {\n            let propertiesWithNone = copy(State.graph.metadata.nodeProperties);\n            propertiesWithNone.unshift(\"None\");\n            return propertiesWithNone;\n        }\n\n        itemRenderer = (\n            item: any,\n            props: CustomIItemRendererProps\n        ): JSX.Element | null => {\n            if (item === \"None\") {\n                return (\n                    <MenuItem\n                        intent=\"primary\"\n                        key={item}\n                        onClick={props.handleClick}\n                        text={item}\n                    />\n                );\n            } else {\n                return (\n                    <MenuItem\n                        key={item}\n                        onClick={props.handleClick}\n                        text={item}\n                    />\n                );\n            }\n        };\n\n        render() {\n            return (\n                <Select\n                    items={\n                        this.props.showNone\n                            ? this.fullProperties\n                            : State.graph.metadata.nodeProperties\n                    }\n                    itemRenderer={this.itemRenderer}\n                    filterable={false}\n                    onItemSelect={(item: string) => {\n                        let selected = item === \"None\" ? null : item;\n                        this.props.onSelect(selected);\n                    }}\n                >\n                    <Button\n                        text={this.props.syncWith ?? this.fullProperties[0]}\n                    />\n                </Select>\n            );\n        }\n    }\n);\n","export default __webpack_public_path__ + \"static/media/icon.d621d30f.png\";","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport { Button, ControlGroup, MenuItem } from \"@blueprintjs/core\";\nimport { Select, Suggest } from \"@blueprintjs/select\";\nimport { CustomIItemRendererProps } from \"../utils/SimpleSelect\";\n\ninterface IFilterOption {\n    text: React.ReactNode;\n    disabled: boolean;\n    attribute?: string;\n}\n\nexport default observer(\n    class SearchPanel extends React.Component {\n        get FILTER_OPTIONS(): IFilterOption[] {\n            let prefix: IFilterOption[] = [\n                { text: \"ID includes\", disabled: false },\n                { text: <b>Or Search Attributes</b>, disabled: true },\n            ];\n            State.graph.metadata.nodeProperties.forEach((it) =>\n                prefix.push({\n                    text: `Attribute: ${it}`,\n                    disabled: false,\n                    attribute: it,\n                })\n            );\n            return prefix;\n        }\n\n        state = {\n            filter: \"ID includes\" as string,\n        };\n\n        private itemRenderer(\n            item: IFilterOption,\n            props: CustomIItemRendererProps\n        ): JSX.Element | null {\n            return (\n                <MenuItem\n                    key={item.text?.toString()}\n                    disabled={item.disabled}\n                    onClick={props.handleClick}\n                    text={item.text}\n                />\n            );\n        }\n\n        render() {\n            return (\n                <div>\n                    <ControlGroup>\n                        <Select\n                            items={this.FILTER_OPTIONS}\n                            itemRenderer={this.itemRenderer}\n                            filterable={false}\n                            onItemSelect={(item) => {\n                                this.setState({\n                                    filter: item.text,\n                                });\n                                State.search.filterProps =\n                                    item.attribute ?? null;\n                            }}\n                        >\n                            <Button icon=\"filter\">{this.state.filter}</Button>\n                        </Select>\n                        <Suggest\n                            inputValueRenderer={(a) => a}\n                            query={State.search.searchStr}\n                            onQueryChange={(value) =>\n                                (State.search.searchStr = value)\n                            }\n                            itemListPredicate={() => State.search.candidates}\n                            itemRenderer={(value: string) => (\n                                <MenuItem\n                                    text={value}\n                                    onMouseOver={() => {\n                                        State.search.isPreviewing = true;\n                                        State.interaction.currentlyHoveredNodeId = value;\n                                        State.graphDelegate.cameraFocusOn(\n                                            value\n                                        );\n                                    }}\n                                    onMouseLeave={() => {\n                                        State.search.isPreviewing = false;\n                                    }}\n                                />\n                            )}\n                            items={State.search.candidates}\n                            openOnKeyDown={true}\n                            noResults={\n                                <MenuItem disabled={true} text=\"No results.\" />\n                            }\n                            popoverProps={{ minimal: true }}\n                        />\n                    </ControlGroup>\n                </div>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport {\n    Button,\n    Menu,\n    MenuDivider,\n    MenuItem,\n    Position,\n    Switch,\n    Navbar as BlueprintNavbar,\n    NavbarGroup,\n    Alignment,\n    NavbarHeading,\n    NavbarDivider,\n} from \"@blueprintjs/core\";\nimport ClusterChooser from \"./utils/ClusterChooser\";\nimport logo from \"../images/icon.png\";\nimport State from \"../state\";\nimport { Popover2 } from \"@blueprintjs/popover2\";\nimport SearchPanel from \"./panels/SearchPanel\";\n\nexport default observer(\n    class Navbar extends React.Component {\n        render() {\n            return (\n                <BlueprintNavbar\n                    //@ts-ignore\n                    style={{ zIndex: 2 }}\n                >\n                    <NavbarGroup align={Alignment.LEFT}>\n                        <img\n                            title=\"PiperNet\"\n                            id=\"PiperNet Logo\"\n                            src={logo}\n                            width=\"35\"\n                            height=\"35\"\n                            alt=\"PiperNet Logo\"\n                        />\n                        <MenuDivider />\n                        <NavbarHeading>PiperNet</NavbarHeading>\n                        <Popover2\n                            content={\n                                <Menu>\n                                    <MenuItem\n                                        text=\"Import from CSV\"\n                                        icon=\"import\"\n                                        onClick={() => {\n                                            State.import.importDialogOpen = true;\n                                        }}\n                                    >\n                                        {/* {SAMPLE_GRAPH_SNAPSHOTS.map(\n                                            (sample) => {\n                                                const sampleSnapshotTitle =\n                                                    sample[0];\n                                                const sampleSnapshotUrl =\n                                                    sample[1];\n\n                                                return (\n                                                    <MenuItem\n                                                        icon=\"graph\"\n                                                        text={\n                                                            sampleSnapshotTitle\n                                                        }\n                                                        disabled={true}\n                                                        onClick={() => {\n                                                            fetchSampleGraph(\n                                                                sampleSnapshotUrl\n                                                            ).then((file) => {\n                                                                State.import.selectedGEXFFileFromInput = file;\n                                                                State.import\n                                                                    .importGraphFromGEXF()\n                                                                    .then(\n                                                                        (\n                                                                            res\n                                                                        ) => {\n                                                                            State.graph.rawGraph =\n                                                                                res.graph;\n                                                                            State.graph.metadata =\n                                                                                res.metadata;\n                                                                        }\n                                                                    );\n                                                            });\n                                                        }}\n                                                    />\n                                                );\n                                            }\n                                        )} */}\n                                    </MenuItem>\n\n                                    <MenuItem\n                                        icon=\"import\"\n                                        text=\"Open GEXF\"\n                                        onClick={() => {\n                                            State.import.importGEXFDialogOpen = true;\n                                        }}\n                                    />\n                                    <MenuDivider />\n                                    <MenuItem\n                                        icon=\"download\"\n                                        text=\"Export Graph\"\n                                        onClick={() => {\n                                            State.preferences.exportDialogOpen = true;\n                                        }}\n                                    />\n                                </Menu>\n                            }\n                            placement={Position.BOTTOM}\n                        >\n                            <Button minimal={true} icon=\"document\">\n                                Graph\n                            </Button>\n                        </Popover2>\n                        <Popover2\n                            content={\n                                <Menu>\n                                    <MenuItem\n                                        text=\"Node DataSheet\"\n                                        icon=\"ungroup-objects\"\n                                        onClick={() => {\n                                            State.preferences.nodeDataSheetDialogOpen = true;\n                                        }}\n                                    />\n                                    <MenuItem\n                                        text=\"Edge DataSheet\"\n                                        icon=\"link\"\n                                        onClick={() => {\n                                            State.preferences.edgeDataSheetDialogOpen = true;\n                                        }}\n                                    />\n                                    {/* <MenuItem\n                                        text=\"Statistics\"\n                                        icon=\"timeline-bar-chart\"\n                                        onClick={() => {\n                                            State.preferences.statisticsDialogOpen = true;\n                                        }}\n                                    /> */}\n                                </Menu>\n                            }\n                            placement={Position.BOTTOM}\n                        >\n                            <Button minimal={true} icon=\"wrench\">\n                                Tools\n                            </Button>\n                        </Popover2>\n                        <Switch\n                            style={{ marginTop: 10, marginLeft: 8 }}\n                            label=\"Graph Animation\"\n                            checked={State.css.isAnimating}\n                            onChange={() =>\n                                (State.css.isAnimating = !State.css.isAnimating)\n                            }\n                        />\n                    </NavbarGroup>\n\n                    {/* <ButtonGroup>\n                        <SimpleSelect\n                            className={classnames([Classes.ALERT_CONTENTS])}\n                            items={[\"3D\", \"2D\"]}\n                            value={State.preferences.view}\n                            onSelect={(it) => (State.preferences.view = it)}\n                        />\n                        <Divider />\n                    </ButtonGroup> */}\n\n                    <NavbarGroup align={Alignment.RIGHT}>\n                        <SearchPanel />\n                        <NavbarDivider />\n                        <div style={{ marginRight: 6 }}>Clustered by</div>\n                        <ClusterChooser\n                            onSelect={(cluster) => {\n                                State.cluster.setCluster(cluster);\n                            }}\n                            syncWith={State.cluster.clusterBy}\n                        />\n                        {/* <NavbarDivider />\n                        <SimpleSelect\n                            items={[\"trackball\", \"orbit\", \"fly\"]}\n                            text={State.preferences.controlType}\n                            onSelect={(it) => {\n                                State.preferences.controlType = it;\n                                ComponentRef.visualizer.updateVisualizationGraph();\n                            }}\n                        /> */}\n                        <Button\n                            minimal={true}\n                            icon=\"code\"\n                            onClick={() => {\n                                window.open(\n                                    \"https://github.com/grp202004/PiperNet\"\n                                );\n                            }}\n                        />\n                    </NavbarGroup>\n                </BlueprintNavbar>\n            );\n        }\n    }\n);\n","import React, { MouseEventHandler } from \"react\";\nimport { Button, MenuItem } from \"@blueprintjs/core\";\nimport { ItemPredicate, Select } from \"@blueprintjs/select\";\nimport { observer } from \"mobx-react\";\n\ninterface Props {\n    items: any[];\n    onSelect: (\n        item: any,\n        event?: React.SyntheticEvent<HTMLElement, Event> | undefined\n    ) => void;\n    text: string;\n    small: boolean;\n    search: boolean;\n}\n\nexport interface CustomIItemRendererProps {\n    handleClick: MouseEventHandler<HTMLElement>;\n}\n\nexport function CommonItemRenderer(\n    item: any,\n    props: CustomIItemRendererProps\n): JSX.Element | null {\n    return <MenuItem key={item} onClick={props.handleClick} text={item} />;\n}\n\nexport default observer(\n    class SimpleSelect extends React.Component<Props, {}> {\n        static defaultProps = {\n            small: false,\n            search: false,\n        };\n\n        itemPredicate: ItemPredicate<string> = (\n            query: string,\n            object: string\n        ) => {\n            return object.toLowerCase().indexOf(query.toLowerCase()) >= 0;\n        };\n        render() {\n            if (this.props.search) {\n                return (\n                    <Select\n                        items={this.props.items}\n                        itemPredicate={this.itemPredicate}\n                        itemRenderer={CommonItemRenderer}\n                        filterable={true}\n                        onItemSelect={this.props.onSelect}\n                        noResults={\n                            <MenuItem disabled={true} text=\"No results.\" />\n                        }\n                    >\n                        <Button\n                            text={this.props.text}\n                            small={this.props.small}\n                        />\n                    </Select>\n                );\n            } else {\n                return (\n                    <Select\n                        items={this.props.items}\n                        itemRenderer={CommonItemRenderer}\n                        filterable={false}\n                        onItemSelect={this.props.onSelect}\n                    >\n                        <Button\n                            text={this.props.text}\n                            small={this.props.small}\n                        />\n                    </Select>\n                );\n            }\n        }\n    }\n);\n","import React from \"react\";\nimport {\n    Callout,\n    Classes,\n    FileInput,\n    Spinner,\n    Switch,\n    Tag,\n    MultistepDialog,\n    DialogStep,\n    IButtonProps,\n    H4,\n    H2,\n} from \"@blueprintjs/core\";\nimport { Cell, Column, Table } from \"@blueprintjs/table\";\nimport classnames from \"classnames\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport SimpleSelect from \"../utils/SimpleSelect\";\nimport { IEdgeFileConfig, INodeFileConfig } from \"../../state/ImportStore\";\n\ninterface PreviewTableProps {\n    file: INodeFileConfig | IEdgeFileConfig;\n}\n\nlet PreviewTable = observer(\n    class PreviewTable extends React.Component<PreviewTableProps, {}> {\n        file = this.props.file;\n\n        renderWrapper = () => {\n            return this.file.parseError ? (\n                <Callout title={\"Error Parsing File\"} intent=\"warning\">\n                    Try with other options of <code>Delimiter</code> or review\n                    the file for import to find possible problems.\n                </Callout>\n            ) : (\n                <div>\n                    <Table\n                        className=\"import-preview-table\"\n                        numRows={this.file.topN.length}\n                        selectedRegions={Object.values(this.file.mapping)\n                            .map((it) => this.file.columns.indexOf(it))\n                            .map((it) => ({ rows: null, cols: [it, it] }))}\n                    >\n                        {this.file.columns.map((it) => (\n                            <Column\n                                key={it}\n                                name={it}\n                                cellRenderer={(i) => (\n                                    <Cell>{this.file.topN[i][it]}</Cell>\n                                )}\n                            />\n                        ))}\n                    </Table>\n                    <Tag>\n                        Only the top {this.file.topN.length} rows of the\n                        selected file are displayed.\n                    </Tag>\n                </div>\n            );\n        };\n\n        render() {\n            return this.renderWrapper();\n        }\n    }\n);\n\nexport default observer(\n    /**\n     * @description The multistep dialog for importing csv Node and Edge files\n     * @author Chenghao SHI\n     * @extends {React.Component}\n     */\n    class ImportDialog extends React.Component {\n        private multiDialogRef = React.createRef<MultistepDialog>();\n\n        state = {\n            delimiter: \",\",\n            step: 0,\n        };\n\n        // nextButtonProps = {\n        //     disabled:\n        //         (this.state.step === 0 &&\n        //             !State.import.importConfig.edgeFile.isReady) ||\n        //         !(\n        //             this.state.step === 2 &&\n        //             (!State.import.importConfig.hasNodeFile ||\n        //                 (State.import.importConfig.hasNodeFile &&\n        //                     State.import.importConfig.nodeFile.isReady))\n        //         ),\n        // };\n\n        canImport = () => {\n            if (State.import.importConfig.hasNodeFile) {\n                return (\n                    State.import.importConfig.edgeFile.isReady &&\n                    State.import.importConfig.nodeFile.isReady\n                );\n            } else {\n                return State.import.importConfig.edgeFile.isReady;\n            }\n        };\n\n        renderNodesSelection = () => {\n            const nodeFile = State.import.importConfig.nodeFile;\n\n            return State.import.importConfig.hasNodeFile ? (\n                <>\n                    <FileInput\n                        text={State.import.nodeFileName}\n                        onInputChange={(event) => {\n                            let target = event.target as HTMLInputElement;\n                            if (!target.files || target.files.length < 1) {\n                                return;\n                            }\n                            State.import.importConfig.hasNodeFile = true;\n                            State.import.nodeFileName = target.files[0].name;\n                            // after setting the selectedNodeFileFromInput, it will auto render the preview table\n                            State.import.selectedNodeFileFromInput =\n                                target.files[0];\n                        }}\n                    />\n\n                    <Switch\n                        label=\"Has Headers\"\n                        checked={nodeFile.hasHeader}\n                        onChange={() =>\n                            (nodeFile.hasHeader = !nodeFile.hasHeader)\n                        }\n                    />\n                    {nodeFile.isReady && (\n                        <div className=\"column-selection\">\n                            <PreviewTable file={nodeFile} />\n                            <br />\n                            Column for Node ID:\n                            <SimpleSelect\n                                items={nodeFile.columns}\n                                text={nodeFile.mapping.id}\n                                onSelect={(it) => (nodeFile.mapping.id = it)}\n                            />\n                        </div>\n                    )}\n                </>\n            ) : (\n                <H4>You don't need to import node file</H4>\n            );\n        };\n\n        renderEdgesSelection = () => {\n            const edgeFile = State.import.importConfig.edgeFile;\n            return (\n                <>\n                    <FileInput\n                        text={State.import.edgeFileName}\n                        onInputChange={(event) => {\n                            let target = event.target as HTMLInputElement;\n                            if (!target.files || target.files.length < 1) {\n                                return;\n                            }\n                            State.import.edgeFileName = target.files[0].name;\n                            State.import.selectedEdgeFileFromInput =\n                                target.files[0];\n                        }}\n                    />\n                    <Switch\n                        label=\"Has Headers\"\n                        checked={edgeFile.hasHeader}\n                        onChange={() =>\n                            (edgeFile.hasHeader = !edgeFile.hasHeader)\n                        }\n                    />\n                    {edgeFile.isReady && (\n                        <div>\n                            <PreviewTable file={edgeFile} />\n                            <br />\n                            Column for Source ID:\n                            <SimpleSelect\n                                items={edgeFile.columns}\n                                text={edgeFile.mapping.fromId}\n                                onSelect={(it) =>\n                                    (edgeFile.mapping.fromId = it)\n                                }\n                            />\n                            <br />\n                            Column for Target ID:\n                            <SimpleSelect\n                                items={edgeFile.columns}\n                                text={edgeFile.mapping.toId}\n                                onSelect={(it) => (edgeFile.mapping.toId = it)}\n                            />\n                        </div>\n                    )}\n                </>\n            );\n        };\n\n        renderDelimiterSelection() {\n            return (\n                <div>\n                    Selected Delimiter\n                    <SimpleSelect\n                        items={[\",\", \"\\\\t\", \";\", \"[SPACE]\"]}\n                        text={this.state.delimiter}\n                        onSelect={(newDelimiter) => {\n                            this.setState({ delimiter: newDelimiter });\n\n                            if (newDelimiter === \"\\\\t\") {\n                                newDelimiter = \"\\t\";\n                            } else if (newDelimiter === \"[SPACE]\") {\n                                newDelimiter = \" \";\n                            }\n\n                            State.import.importConfig.edgeFile.delimiter = newDelimiter;\n                            State.import.importConfig.nodeFile.delimiter = newDelimiter;\n                        }}\n                    />{\" \"}\n                </div>\n            );\n        }\n\n        importedNodes = () => {\n            return <Cell>{State.graph.rawGraph.order}</Cell>;\n        };\n\n        importedEdges = () => {\n            return <Cell>{State.graph.rawGraph.size}</Cell>;\n        };\n\n        closeDialog = () => {\n            State.import.importDialogOpen = false;\n        };\n\n        finalButtonProps: Partial<IButtonProps> = {\n            intent: \"primary\",\n            // disabled: this.canImport(),\n            onClick: () => {\n                State.import.isLoading = true;\n                State.import.importGraphFromCSV().then((res) => {\n                    State.graph.setGraph(res.graph, res.metadata);\n\n                    if (State.graph.rawGraph.hasAttribute(\"default\")) {\n                        State.cluster.setCluster(\n                            State.graph.rawGraph.getAttribute(\"default\")\n                        );\n                    }\n\n                    State.import.isLoading = false;\n                    State.import.importDialogOpen = false;\n                });\n            },\n            text: \"Import\",\n        };\n\n        render() {\n            return (\n                <MultistepDialog\n                    ref={this.multiDialogRef}\n                    className={classnames(\"multistep-dialog-box\")}\n                    icon=\"import\"\n                    isOpen={State.import.importDialogOpen}\n                    onClose={() => {\n                        State.import.importDialogOpen = false;\n                    }}\n                    // nextButtonProps={this.nextButtonProps}\n                    finalButtonProps={this.finalButtonProps}\n                    onChange={(id) => {\n                        this.setState({\n                            step: id,\n                        });\n                    }}\n                    title=\"Open Files\"\n                >\n                    <DialogStep\n                        id=\"csv_edge\"\n                        title=\"Choose a Edge file\"\n                        panel={\n                            <div\n                                className={classnames(\n                                    Classes.DIALOG_BODY,\n                                    \"multistep-dialog-body\"\n                                )}\n                                style={{\n                                    justifyContent: \"center\",\n                                    alignItems: \"center\",\n                                    display: \"flex\",\n                                }}\n                            >\n                                {State.import.isLoading ? (\n                                    <Spinner />\n                                ) : (\n                                    <div>\n                                        <div\n                                            className={classnames(\n                                                Classes.DIALOG_BODY,\n                                                \"import-dialog\"\n                                            )}\n                                            style={{ maxWidth: \"40vw\" }}\n                                        >\n                                            {this.renderEdgesSelection()}\n                                            <br />\n                                            {this.renderDelimiterSelection()}\n                                        </div>\n                                    </div>\n                                )}\n                            </div>\n                        }\n                    />\n                    <DialogStep\n                        id=\"csv_node_need\"\n                        title=\"Do i need to import node file ?\"\n                        panel={\n                            <div\n                                className={classnames(\n                                    Classes.DIALOG_BODY,\n                                    \"multistep-dialog-body\"\n                                )}\n                                style={{\n                                    justifyContent: \"center\",\n                                    alignItems: \"center\",\n                                }}\n                            >\n                                <H2>Do i need to import node file?</H2>\n                                <H4>\n                                    You can import nodes file to add node\n                                    attributes to this graph\n                                </H4>\n                                <p>\n                                    To import attributes we will need to proceed\n                                    another csv files: a list of nodes, Nodes\n                                    must have at least an ID, other fields are\n                                    optional\n                                </p>\n                                <br />\n                                <Switch\n                                    large={true}\n                                    checked={\n                                        State.import.importConfig.hasNodeFile\n                                    }\n                                    label=\"I want to import node file\"\n                                    onChange={() =>\n                                        (State.import.importConfig.hasNodeFile = !State\n                                            .import.importConfig.hasNodeFile)\n                                    }\n                                />\n                            </div>\n                        }\n                    />\n                    <DialogStep\n                        id=\"csv_node\"\n                        title=\"Choose a Node file\"\n                        panel={\n                            <div\n                                className={classnames(\n                                    Classes.DIALOG_BODY,\n                                    \"multistep-dialog-body\"\n                                )}\n                                style={{\n                                    justifyContent: \"center\",\n                                    alignItems: \"center\",\n                                    display: \"flex\",\n                                }}\n                            >\n                                {State.import.isLoading ? (\n                                    <Spinner />\n                                ) : (\n                                    <div>\n                                        <div\n                                            className={classnames(\n                                                Classes.DIALOG_BODY,\n                                                \"import-dialog\"\n                                            )}\n                                            style={{ maxWidth: \"40vw\" }}\n                                        >\n                                            {this.renderNodesSelection()}\n                                        </div>\n                                    </div>\n                                )}\n                            </div>\n                        }\n                    />\n                    {/* <DialogStep\n                        id=\"Info\"\n                        title=\"Informtion of graph\"\n                        panel={\n                            <div>\n                                <Card>\n                                    <Table numRows={1}>\n                                        <Column\n                                            name=\" number of Nodes \"\n                                            cellRenderer={this.importedNodes}\n                                        />\n                                        <Column\n                                            name=\" number of Edges \"\n                                            cellRenderer={this.importedEdges}\n                                        />\n                                    </Table>\n                                </Card>\n                                <br />\n                                <Divider />\n                                <div>\n                                    Set an attribute for cluster:\n                                    <ClusterChooser\n                                        onSelect={(cluster) => {\n                                            State.cluster.setCluster(cluster);\n                                        }}\n                                        syncWith={State.cluster.clusterBy}\n                                    />\n                                </div>\n                            </div>\n                        }\n                    /> */}\n                </MultistepDialog>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport {\n    Button,\n    ButtonGroup,\n    Card,\n    Classes,\n    Dialog,\n    Divider,\n    Elevation,\n    H3,\n    Spinner,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport gexf from \"graphology-gexf/browser\";\nimport State from \"../../state\";\nimport { CSVLink } from \"react-csv\";\n\nexport default observer(\n    /**\n     * @description Dialog used to export the graph into GEXF file or CSV Node/Edge files\n     * @author Chenghao SHI\n     * @extends {React.Component}\n     */\n    class ExportDialog extends React.Component {\n        state = {\n            ready: true,\n        };\n\n        /**\n         * compute the GEXF file from rawGraph\n         * delete the temporary _visualize attribute from the graph\n         *\n         * @returns {*}\n         */\n        computeGEXFFile() {\n            let graphCopy = State.graph.rawGraph.copy();\n            graphCopy.forEachNode((_node, attributes: any) => {\n                delete attributes[\"_visualize\"];\n            });\n            graphCopy.forEachEdge((_edge, attributes: any) => {\n                delete attributes[\"_visualize\"];\n            });\n            return gexf.write(graphCopy);\n        }\n\n        computeNodeFile() {\n            let headers: {\n                label: string;\n                key: string;\n            }[] = [];\n            headers.push({ label: \"_id\", key: \"_id\" });\n            State.graph.metadata.nodeProperties.map((value) => {\n                headers.push({ label: value, key: value });\n                return null;\n            });\n\n            let exportData = State.graph.rawGraph.export();\n            let data: any[] = [];\n            exportData.nodes.forEach((node) => {\n                data.push({\n                    _id: node.key,\n                    ...node.attributes,\n                });\n            });\n            return { headers: headers, data: data };\n        }\n\n        computeEdgeFile() {\n            let headers: {\n                label: string;\n                key: string;\n            }[] = [\n                { label: \"source\", key: \"source\" },\n                { label: \"target\", key: \"target\" },\n            ];\n\n            let exportData = State.graph.rawGraph.export();\n            let data: any[] = [];\n            exportData.edges.forEach((edge) => {\n                data.push({\n                    source: edge.source,\n                    target: edge.target,\n                });\n            });\n            return { headers: headers, data: data };\n        }\n\n        render() {\n            return (\n                <Dialog\n                    icon=\"projects\"\n                    isOpen={State.preferences.exportDialogOpen}\n                    onClose={() => {\n                        State.preferences.exportDialogOpen = false;\n                    }}\n                    title={`Export Graph`}\n                >\n                    {!this.state.ready ? (\n                        <Spinner />\n                    ) : (\n                        <div className={classnames(Classes.DIALOG_BODY)}>\n                            <Card interactive={false} elevation={Elevation.ONE}>\n                                <H3>\n                                    GEXF Export{\" \"}\n                                    <Button\n                                        icon=\"help\"\n                                        minimal={true}\n                                        onClick={() => {\n                                            window.open(\n                                                \"https://gephi.org/gexf/format/\"\n                                            );\n                                        }}\n                                    />\n                                </H3>\n                                <Divider />\n\n                                <CSVLink\n                                    data={this.computeGEXFFile()}\n                                    filename={\"Snapshot-GEXF.gexf\"}\n                                    className=\"btn btn-primary\"\n                                    target=\"_blank\"\n                                >\n                                    <Button>Download GEXF File</Button>\n                                </CSVLink>\n                            </Card>\n                            <br />\n                            <Card interactive={false} elevation={Elevation.ONE}>\n                                <H3>\n                                    CSV Export{\" \"}\n                                    <Button\n                                        icon=\"help\"\n                                        minimal={true}\n                                        onClick={() => {\n                                            window.open(\n                                                \"https://github.com/grp202004/PiperNet#data-import\"\n                                            );\n                                        }}\n                                    />\n                                </H3>\n\n                                <Divider />\n                                <ButtonGroup>\n                                    <CSVLink\n                                        data={this.computeNodeFile().data}\n                                        headers={this.computeNodeFile().headers}\n                                        separator={\",\"}\n                                        filename={\"Snapshot-Node.csv\"}\n                                        className=\"btn btn-primary\"\n                                        target=\"_blank\"\n                                    >\n                                        <Button>Download Node File</Button>\n                                    </CSVLink>\n                                    <Divider />\n                                    <CSVLink\n                                        data={this.computeEdgeFile().data}\n                                        headers={this.computeEdgeFile().headers}\n                                        separator={\",\"}\n                                        filename={\"Snapshot-Edge.csv\"}\n                                        className=\"btn btn-primary\"\n                                        target=\"_blank\"\n                                    >\n                                        <Button>Download Edge File</Button>\n                                    </CSVLink>\n                                </ButtonGroup>\n                            </Card>\n                        </div>\n                    )}\n                </Dialog>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Classes, Dialog } from \"@blueprintjs/core\";\nimport { Column, Table, TableLoadingOption } from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../state\";\n\ninterface Props {\n    for: string;\n    children: React.ReactNode;\n}\n\nexport default observer(\n    class DataSheetDialogWrapper extends React.Component<Props, {}> {\n        state = {\n            loading: true,\n        };\n\n        renderTable() {\n            if (this.state.loading) {\n                return (\n                    <div className=\"argo-table-container\">\n                        <Table\n                            className=\"pt-bordered pt-striped\"\n                            numRows={20}\n                            loadingOptions={[\n                                TableLoadingOption.CELLS,\n                                TableLoadingOption.COLUMN_HEADERS,\n                                TableLoadingOption.ROW_HEADERS,\n                            ]}\n                        >\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                        </Table>\n                    </div>\n                );\n            } else {\n                return this.props.children;\n            }\n        }\n\n        render() {\n            return (\n                <Dialog\n                    icon=\"database\"\n                    isOpen={\n                        this.props.for === \"node\"\n                            ? State.preferences.nodeDataSheetDialogOpen\n                            : State.preferences.edgeDataSheetDialogOpen\n                    }\n                    onOpened={() => {\n                        setTimeout(() => {\n                            this.setState({\n                                loading: false,\n                            });\n                        }, 100);\n                    }}\n                    onClose={() => {\n                        if (this.props.for === \"node\") {\n                            State.preferences.nodeDataSheetDialogOpen = false;\n                        } else {\n                            State.preferences.edgeDataSheetDialogOpen = false;\n                        }\n                        this.setState({\n                            loading: true,\n                        });\n                    }}\n                    title=\"Data Sheet\"\n                    style={{ minWidth: \"80vw\" }}\n                >\n                    <div className={classnames(Classes.DIALOG_BODY)}>\n                        {this.renderTable()}\n                    </div>\n                </Dialog>\n            );\n        }\n    }\n);\n","import { Attributes } from \"graphology-types\";\nimport React from \"react\";\n\n/** Event handler that exposes the target element's value as a boolean. */\nexport function handleBooleanChange(handler: (checked: boolean) => void) {\n    return (event: React.FormEvent<HTMLElement>) =>\n        handler((event.target as HTMLInputElement).checked);\n}\n\n/** Event handler that exposes the target element's value as a string. */\nexport function handleStringChange(handler: (value: string) => void) {\n    return (event: React.FormEvent<HTMLElement>) =>\n        handler((event.target as HTMLInputElement).value);\n}\n\n/** Event handler that exposes the target element's value as an inferred generic type. */\nexport function handleValueChange<T>(handler: (value: T) => void) {\n    return (event: React.FormEvent<HTMLElement>) =>\n        handler(((event.target as HTMLInputElement).value as unknown) as T);\n}\n\n/** Event handler that exposes the target element's value as a number. */\nexport function handleNumberChange(handler: (value: number) => void) {\n    return handleStringChange((value) => handler(+value));\n}\n\nexport function stringifyNodeDetail(attributes: Attributes): string {\n    let res = \"\";\n    for (var attribute in attributes) {\n        if (\n            attributes.hasOwnProperty(attribute) &&\n            attribute !== \"_visualize\" &&\n            attribute !== \"_options\"\n        ) {\n            res += attribute + \" : \" + attributes[attribute] + \" ; \";\n        }\n    }\n\n    return res;\n}\n\nexport function parseNumberOrString(value: string): string | number {\n    if (value === \"\") {\n        return \"\";\n    }\n    let numberVal = Number(value);\n    if (isNaN(numberVal)) {\n        return value;\n    } else {\n        return numberVal;\n    }\n}\n","import React from \"react\";\nimport {\n    Alert,\n    Button,\n    ButtonGroup,\n    Callout,\n    Code,\n    Divider,\n    InputGroup,\n    Intent,\n} from \"@blueprintjs/core\";\nimport {\n    Cell,\n    Column,\n    EditableCell,\n    ICellRenderer,\n    Table,\n} from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport DataSheetDialogWrapper from \"../utils/DataSheetDialogWrapper\";\nimport {\n    handleStringChange,\n    parseNumberOrString,\n    stringifyNodeDetail,\n} from \"../utils/InputFormUtils\";\nimport { Attributes, SerializedNode } from \"graphology-types\";\n\nlet GraphNodeTable = observer(\n    class GraphNodeTable extends React.Component {\n        state = {\n            filterQuery: \"\",\n            addNodeDialogOpen: false,\n            deleteAlertOpen: false,\n            nodeToDelete: null as SerializedNode | null,\n        };\n\n        get filteredTable() {\n            let newTable: SerializedNode[] = [];\n            State.graph.rawGraph.export().nodes.forEach((node) => {\n                if (\n                    node.key\n                        .toLocaleLowerCase()\n                        .includes(this.state.filterQuery.toLocaleLowerCase()) ||\n                    this.state.filterQuery === \"\"\n                ) {\n                    newTable.push(node);\n                }\n            });\n            return newTable;\n        }\n\n        nodeProperties = State.graph.metadata.nodeProperties;\n\n        renderColumns: any = () => {\n            const columns = this.nodeProperties.map((it, i) => {\n                if (it !== \"_options\") {\n                    return (\n                        <Column\n                            name={it}\n                            cellRenderer={(\n                                rowIndex: number,\n                                columnIndex: number\n                            ) => this.renderCell(rowIndex, it)}\n                        />\n                    );\n                }\n                return null;\n            });\n            return columns.filter((element) => {\n                return element !== undefined;\n            });\n        };\n\n        renderCell = (rowIndex: number, attribute: string) => {\n            let cellAttributes = this.filteredTable[rowIndex].attributes!!;\n            let cell = cellAttributes[attribute];\n\n            return (\n                <EditableCell\n                    value={cell}\n                    onChange={(newVal) =>\n                        this.setValue(newVal, rowIndex, attribute)\n                    }\n                    onConfirm={(newVal) =>\n                        this.setValue(newVal, rowIndex, attribute)\n                    }\n                    tooltip={cell}\n                />\n            );\n        };\n\n        // if the input is a number in string, it will convert the string into number to store\n        setValue = (value: string, rowIndex: number, attribute: string) => {\n            let id = this.filteredTable[rowIndex].key;\n            State.graph.rawGraph.setNodeAttribute(\n                id,\n                attribute,\n                parseNumberOrString(value)\n            );\n        };\n\n        deleteNodeRenderer: ICellRenderer = (rowIndex) => {\n            return (\n                <Cell>\n                    <Button\n                        onClick={() => {\n                            this.setState({\n                                nodeToDelete: this.filteredTable[rowIndex],\n                                deleteAlertOpen: true,\n                            });\n                        }}\n                        icon=\"trash\"\n                        intent=\"danger\"\n                        text=\"Delete\"\n                        minimal={true}\n                    />\n                </Cell>\n            );\n        };\n\n        deleteNodeAlert = () => {\n            return (\n                <Alert\n                    cancelButtonText=\"Cancel\"\n                    confirmButtonText=\"Confirm Delete\"\n                    icon=\"trash\"\n                    intent={Intent.DANGER}\n                    isOpen={this.state.deleteAlertOpen}\n                    onCancel={() => this.setState({ deleteAlertOpen: false })}\n                    onConfirm={() => {\n                        State.graph.mutating.dropNode(\n                            this.state.nodeToDelete?.key as string\n                        );\n                        this.setState({ deleteAlertOpen: false });\n                    }}\n                    style={{ minWidth: \"60vw\" }}\n                >\n                    <p>\n                        Are you sure you want to delete the node with ID{\" \"}\n                        <Code>{this.state.nodeToDelete?.key}</Code> with\n                        attributes:\n                        <Code>\n                            {stringifyNodeDetail(\n                                this.state.nodeToDelete\n                                    ?.attributes as Attributes\n                            )}\n                        </Code>\n                        This action cannot be reversed.\n                    </p>\n                </Alert>\n            );\n        };\n\n        style = {\n            textAlign: \"center\",\n        };\n\n        render() {\n            return (\n                <div>\n                    <Callout\n                        title={\n                            \"Try to click on a cell and type in something...\"\n                        }\n                        intent=\"primary\"\n                        icon=\"edit\"\n                    >\n                        The corresponding value of a node's attribute can be\n                        modified by clicking the cell and type in\n                    </Callout>\n\n                    <ButtonGroup>\n                        <Button\n                            onClick={() => this.forceUpdate()}\n                            icon=\"refresh\"\n                            intent=\"none\"\n                            text=\"Refresh\"\n                        />\n                        <Button\n                            onClick={() => {\n                                State.preferences.AddNodeDialogOpen = true;\n                            }}\n                            icon=\"new-object\"\n                            intent=\"primary\"\n                            text=\"Add Node\"\n                        />\n                        <Divider />\n                        <InputGroup\n                            style={{ width: \"40vw\" }}\n                            asyncControl={true}\n                            leftIcon=\"search\"\n                            onChange={handleStringChange((value) => {\n                                this.setState({ filterQuery: value });\n                            })}\n                            placeholder=\"Search any Node...\"\n                            value={this.state.filterQuery}\n                            fill={true}\n                        />\n                    </ButtonGroup>\n\n                    <hr />\n\n                    <Table\n                        className=\"argo-table\"\n                        defaultRowHeight={30}\n                        numRows={this.filteredTable.length}\n                    >\n                        <Column\n                            name=\"\"\n                            cellRenderer={this.deleteNodeRenderer}\n                            //@ts-ignore\n                            style={this.style}\n                        />\n                        <Column\n                            name=\"ID\"\n                            //@ts-ignore\n                            intent={Intent.SUCCESS}\n                            cellRenderer={(rowIndex) => {\n                                let id = this.filteredTable[rowIndex].key;\n                                return <Cell>{id}</Cell>;\n                            }}\n                        />\n                        {this.renderColumns()}\n                    </Table>\n                    {this.deleteNodeAlert()}\n                </div>\n            );\n        }\n    }\n);\n\nexport default observer(\n    class NodeDataSheetDialog extends React.Component {\n        render() {\n            return (\n                <DataSheetDialogWrapper for=\"node\">\n                    <GraphNodeTable />\n                </DataSheetDialogWrapper>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Button, FormGroup, MenuItem, Tooltip } from \"@blueprintjs/core\";\nimport { Select } from \"@blueprintjs/select\";\nimport { Attributes, SerializedNode } from \"graphology-types\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport { stringifyNodeDetail } from \"./InputFormUtils\";\n\n/**\n *\n * @interface Props\n */\ninterface Props {\n    /**\n     * the text to be shown above the selectButton\n     *\n     * @type {string}\n     * @memberof Props\n     */\n    text: string;\n\n    /**\n     * function to call when a candidate is selected, will be called on every selection of candidate\n     * the {nodeId} is the id of the selected node\n     *\n     * @memberof Props\n     */\n    onChange: (nodeId: string) => void;\n}\n\n/**\n * this component can be used to choose the node among all the nodes, with basic search filters available\n * to use it, you have to specify the text shown above the selectButton as well as the onChange function to call when a candidate is selected\n */\nexport default observer(\n    class NodeChooser extends React.Component<Props, {}> {\n        state = {\n            select: \"Choose \" + this.props.text,\n        };\n\n        render() {\n            return (\n                <FormGroup\n                    label={this.props.text}\n                    labelFor=\"text-input\"\n                    labelInfo=\"(required)\"\n                >\n                    <Select\n                        filterable={true}\n                        items={State.graph.rawGraph.export().nodes}\n                        itemPredicate={(\n                            query: string,\n                            item: SerializedNode<Attributes>\n                        ) => {\n                            return item.key.includes(query);\n                        }}\n                        itemRenderer={(item: SerializedNode<Attributes>) => {\n                            return (\n                                <Tooltip\n                                    content={stringifyNodeDetail(\n                                        item.attributes ?? {}\n                                    )}\n                                >\n                                    <MenuItem\n                                        key={item.key}\n                                        text={item.key}\n                                        onClick={() => {\n                                            let key = item.key;\n                                            this.setState({ select: key });\n                                            this.props.onChange(key);\n                                        }}\n                                    />\n                                </Tooltip>\n                            );\n                        }}\n                        noResults={\n                            <MenuItem disabled={true} text=\"No results.\" />\n                        }\n                        onItemSelect={() => {}}\n                    >\n                        <Button\n                            text={this.state.select}\n                            rightIcon=\"double-caret-vertical\"\n                        />\n                    </Select>\n                </FormGroup>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport {\n    Alert,\n    Button,\n    ButtonGroup,\n    Callout,\n    Classes,\n    Code,\n    Dialog,\n    Divider,\n    InputGroup,\n    Intent,\n} from \"@blueprintjs/core\";\nimport {\n    Cell,\n    Column,\n    ICellRenderer,\n    RenderMode,\n    Table,\n} from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport DataSheetDialogWrapper from \"../utils/DataSheetDialogWrapper\";\nimport { Attributes, SerializedEdge } from \"graphology-types\";\nimport { handleStringChange } from \"../utils/InputFormUtils\";\nimport NodeChooser from \"../utils/NodeChooser\";\n\nlet GraphEdgeTable = observer(\n    class GraphEdgeTable extends React.Component {\n        state = {\n            addEdgeDialogOpen: false,\n            deleteAlertOpen: false,\n            edgeToDelete: null as null | SerializedEdge<Attributes>,\n            filterQuery: null as null | string,\n            chosenSource: null as null | string,\n            chosenTarget: null as null | string,\n        };\n\n        get filteredTable() {\n            let newTable: SerializedEdge<Attributes>[] = [];\n            State.graph.rawGraph.export().edges.forEach((edge) => {\n                if (\n                    !this.state.filterQuery ||\n                    edge.source\n                        .toLocaleLowerCase()\n                        .includes(this.state.filterQuery.toLocaleLowerCase()) ||\n                    edge.target\n                        .toLocaleLowerCase()\n                        .includes(this.state.filterQuery.toLocaleLowerCase()) ||\n                    this.state.filterQuery === \"\"\n                ) {\n                    newTable.push(edge);\n                }\n            });\n            return newTable;\n        }\n\n        deleteEdgeRenderer: ICellRenderer = (rowIndex) => {\n            return (\n                <Cell>\n                    <Button\n                        onClick={() => {\n                            this.setState({\n                                edgeToDelete: this.filteredTable[rowIndex],\n                                deleteAlertOpen: true,\n                            });\n                        }}\n                        icon=\"trash\"\n                        intent=\"danger\"\n                        text=\"Delete\"\n                        minimal={true}\n                    />\n                </Cell>\n            );\n        };\n\n        deleteEdgeAlert = () => {\n            return (\n                <Alert\n                    cancelButtonText=\"Cancel\"\n                    confirmButtonText=\"Confirm Delete\"\n                    icon=\"trash\"\n                    intent={Intent.DANGER}\n                    isOpen={this.state.deleteAlertOpen}\n                    onCancel={() => this.setState({ deleteAlertOpen: false })}\n                    onConfirm={() => {\n                        State.graph.mutating.dropEdge(\n                            this.state.edgeToDelete?.key as string\n                        );\n                        this.setState({ deleteAlertOpen: false });\n                    }}\n                >\n                    <p>\n                        Are you sure you want to delete the edge with ID{\" \"}\n                        <Code>{this.state.edgeToDelete?.key}</Code> from Node ID{\" \"}\n                        <Code>{this.state.edgeToDelete?.source}</Code> to Node\n                        ID <Code>{this.state.edgeToDelete?.target}</Code>. This\n                        action cannot be reversed.\n                    </p>\n                </Alert>\n            );\n        };\n\n        addEdgeDialog = () => {\n            return (\n                <Dialog\n                    isOpen={this.state.addEdgeDialogOpen}\n                    icon=\"new-link\"\n                    onClose={() => this.setState({ addEdgeDialogOpen: false })}\n                    onClosed={() =>\n                        this.setState({\n                            chosenSource: null,\n                            chosenTarget: null,\n                        })\n                    }\n                    title=\"Add Edge\"\n                >\n                    <div className={Classes.DIALOG_BODY}>\n                        <p>\n                            <strong>\n                                You can only add unique undirected edges to the\n                                graph dataset.\n                            </strong>\n                        </p>\n                        <p>\n                            A <em>UNIQUE</em> edge means there should only exist\n                            one edge that connects between the source and the\n                            target.\n                        </p>\n                        <ButtonGroup fill={true}>\n                            <NodeChooser\n                                text=\"Source Node\"\n                                onChange={(value) => {\n                                    this.setState({ chosenSource: value });\n                                }}\n                            />\n                            <Divider />\n                            <NodeChooser\n                                text=\"Target Node\"\n                                onChange={(value) => {\n                                    this.setState({ chosenTarget: value });\n                                }}\n                            />\n                        </ButtonGroup>\n                        <p>New edges are added to the end of the table.</p>\n                        {!this.canImport && (\n                            <Callout\n                                title=\"Invalid Edge\"\n                                intent=\"danger\"\n                                icon=\"edit\"\n                            >\n                                The new edge is invalid because either this is a\n                                edge that already in the graph or cannot form a\n                                valid undirected edge\n                            </Callout>\n                        )}\n                    </div>\n                    <div className={Classes.DIALOG_FOOTER}>\n                        <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                            <Button\n                                onClick={() =>\n                                    this.setState({ addEdgeDialogOpen: false })\n                                }\n                            >\n                                Cancel\n                            </Button>\n                            <Button\n                                intent={Intent.PRIMARY}\n                                onClick={() => {\n                                    State.graph.mutating.addEdge(\n                                        this.state.chosenSource!,\n                                        this.state.chosenTarget!\n                                    );\n                                    this.setState({ addEdgeDialogOpen: false });\n                                }}\n                                disabled={!this.canImport}\n                            >\n                                Confirm\n                            </Button>\n                        </div>\n                    </div>\n                </Dialog>\n            );\n        };\n\n        get canImport(): boolean {\n            if (!this.state.chosenSource || !this.state.chosenTarget) {\n                return false;\n            } else if (this.state.chosenSource === this.state.chosenTarget) {\n                return false;\n            } else {\n                return (\n                    !State.graph.rawGraph.hasEdge(\n                        this.state.chosenSource,\n                        this.state.chosenTarget\n                    ) &&\n                    !State.graph.rawGraph.hasEdge(\n                        this.state.chosenTarget,\n                        this.state.chosenSource\n                    )\n                );\n            }\n        }\n\n        style = {\n            textAlign: \"center\",\n        };\n\n        render() {\n            return (\n                <div>\n                    <ButtonGroup>\n                        <Button\n                            onClick={() => this.forceUpdate()}\n                            icon=\"refresh\"\n                            intent=\"none\"\n                            text=\"Refresh\"\n                        />\n                        <Button\n                            onClick={() =>\n                                this.setState({ addEdgeDialogOpen: true })\n                            }\n                            icon=\"new-link\"\n                            intent=\"primary\"\n                            text=\"Add Edge\"\n                        />\n                        <Divider />\n                        <InputGroup\n                            style={{ width: \"40vw\" }}\n                            asyncControl={true}\n                            leftIcon=\"search\"\n                            onChange={handleStringChange((value) => {\n                                this.setState({ filterQuery: value });\n                            })}\n                            placeholder=\"Search any Source or Target of an Edge...\"\n                            value={this.state.filterQuery ?? \"\"}\n                        />\n                    </ButtonGroup>\n\n                    <hr />\n                    <Table\n                        className=\"argo-table\"\n                        numRows={this.filteredTable.length}\n                        defaultRowHeight={30}\n                        renderMode={RenderMode.NONE}\n                    >\n                        <Column\n                            name=\"\"\n                            cellRenderer={this.deleteEdgeRenderer}\n                            //@ts-ignore\n                            style={this.style}\n                        />\n                        <Column\n                            name=\"Source\"\n                            //@ts-ignore\n                            intent={Intent.PRIMARY}\n                            cellRenderer={(rowIndex) => {\n                                return (\n                                    <Cell>\n                                        {this.filteredTable[rowIndex].source}\n                                    </Cell>\n                                );\n                            }}\n                        />\n                        <Column\n                            name=\"Target\"\n                            //@ts-ignore\n                            intent={Intent.PRIMARY}\n                            cellRenderer={(rowIndex) => {\n                                return (\n                                    <Cell>\n                                        {this.filteredTable[rowIndex].target}\n                                    </Cell>\n                                );\n                            }}\n                        />\n                    </Table>\n                    {this.deleteEdgeAlert()}\n                    {this.addEdgeDialog()}\n                </div>\n            );\n        }\n    }\n);\n\nexport default observer(\n    class EdgeDataSheetDialog extends React.Component {\n        render() {\n            return (\n                <DataSheetDialogWrapper for=\"edge\">\n                    <GraphEdgeTable />\n                </DataSheetDialogWrapper>\n            );\n        }\n    }\n);\n","import {\n    Button,\n    Card,\n    Elevation,\n    FormGroup,\n    H5,\n    InputGroup,\n    Tooltip,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport React from \"react\";\nimport State from \"../../state\";\nimport { Attributes } from \"graphology-types\";\nimport { handleStringChange, parseNumberOrString } from \"./InputFormUtils\";\n\n/**\n *\n * @interface Props\n */\ninterface Props {\n    /**\n     * function to call when a new node is successfully added\n     * the {nodeId} is the id of the newly added node, {attributes} is the attributes of the newly added node\n     *\n     * @memberof Props\n     */\n    onAdded: (nodeId: string, attributes: Attributes) => void;\n}\n\nexport default observer(\n    /**\n     * @description This component will be used to be part of addNodeDialog\n     * @author Zichen XU,Zhiyuan LYU\n     * @extends {React.Component}\n     */\n    class NodeAdder extends React.Component<Props, {}> {\n        state = {\n            newNodeId: \"\",\n            attributes: {} as Attributes,\n        };\n\n        get canImport() {\n            return (\n                !State.graph.rawGraph.hasNode(this.state.newNodeId) &&\n                this.state.newNodeId !== \"\"\n            );\n        }\n\n        canImportTag = () => {\n            return this.canImport ? (\n                <Tooltip\n                    content={\n                        \"This Node Id is not used by any existing node yet\"\n                    }\n                    intent=\"success\"\n                >\n                    <Button icon=\"tick\" intent=\"success\" minimal={true} />\n                </Tooltip>\n            ) : (\n                <Tooltip\n                    content={\n                        \"This Node Id is currently in use by other nodes, try with another one instead\"\n                    }\n                    intent=\"warning\"\n                >\n                    <Button icon=\"cross\" intent=\"warning\" minimal={true} />\n                </Tooltip>\n            );\n        };\n\n        renderAttributesForm = (attributes: string[]) => {\n            return attributes.map((attribute) => {\n                if (attribute !== \"_options\" && attribute !== \"_visualize\") {\n                    return (\n                        <FormGroup label={attribute}>\n                            <InputGroup\n                                asyncControl={true}\n                                placeholder={\n                                    \"Enter the value for attribute: \" +\n                                    attribute\n                                }\n                                onChange={handleStringChange((value) => {\n                                    let newValue = this.state.attributes;\n                                    newValue[attribute] = parseNumberOrString(\n                                        value\n                                    );\n                                    this.setState({ attributes: newValue });\n                                })}\n                                value={this.state.attributes[attribute]}\n                            />\n                        </FormGroup>\n                    );\n                } else {\n                    return null;\n                }\n            });\n        };\n\n        render() {\n            return (\n                <Card elevation={Elevation.ONE}>\n                    <FormGroup label=\"New Node ID\" labelInfo=\"(required)\">\n                        <InputGroup\n                            autoFocus={true}\n                            asyncControl={true}\n                            placeholder=\"Enter the new Node Id...\"\n                            intent={this.canImport ? \"success\" : \"warning\"}\n                            rightElement={this.canImportTag()}\n                            onChange={handleStringChange((value) =>\n                                this.setState({ newNodeId: value })\n                            )}\n                            value={this.state.newNodeId}\n                        />\n                    </FormGroup>\n                    <Card elevation={Elevation.ONE}>\n                        <H5>Attributes</H5>\n                        {this.renderAttributesForm(\n                            State.graph.metadata.nodeProperties\n                        )}\n                    </Card>\n                    <hr />\n                    <Button\n                        intent=\"primary\"\n                        onClick={() => {\n                            State.graph.decorateRawNode(\n                                this.state.newNodeId,\n                                this.state.attributes\n                            );\n                            State.graph.mutating.addNode(\n                                this.state.newNodeId,\n                                this.state.attributes\n                            );\n                            this.props.onAdded(\n                                this.state.newNodeId,\n                                this.state.attributes\n                            );\n                            State.preferences.AddNodeDialogOpen = false;\n                            // State.preferences.rightClickBackgroundPanelOpen = false;\n                            // this.forceUpdate();\n                            // State.graphDelegate.cameraFocusOn(this.state.newNodeId);\n                        }}\n                        disabled={!this.canImport}\n                    >\n                        Confirm\n                    </Button>\n                </Card>\n            );\n        }\n        componentDidMount = () => {\n            State.graph.metadata.nodeProperties.forEach((prop) => {\n                let newValue = this.state.attributes;\n                newValue[prop] = \"\";\n                this.setState({ attributes: newValue });\n            });\n        };\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport { Classes, Dialog, Tag } from \"@blueprintjs/core\";\nimport NodeAdder from \"../utils/NodeAdder\";\nimport State from \"../../state\";\n\nexport default observer(\n    class AddNodeDialog extends React.Component {\n        render() {\n            return (\n                <Dialog\n                    isOpen={State.preferences.AddNodeDialogOpen}\n                    icon=\"new-object\"\n                    onClose={() => {\n                        State.preferences.AddNodeDialogOpen = false;\n                    }}\n                    title=\"Add Node\"\n                >\n                    <div className={Classes.DIALOG_BODY}>\n                        <p>\n                            <strong>\n                                You can only add node with unique node id to the\n                                graph dataset.\n                            </strong>\n                        </p>\n                        <p>\n                            A <em>UNIQUE</em> node means there should only exist\n                            one node that has the respective node id.\n                        </p>\n                        <Tag>New nodes are added to the end of the table</Tag>\n                        <hr />\n                        <NodeAdder\n                            onAdded={() => {\n                                this.setState({ addNodeDialogOpen: false });\n                                this.forceUpdate();\n                            }}\n                        />\n                    </div>\n                </Dialog>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport {\n    Button,\n    ButtonGroup,\n    Callout,\n    Classes,\n    Dialog,\n    Divider,\n    Intent,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport NodeChooser from \"../utils/NodeChooser\";\nexport default observer(\n    /**\n     * @description This component will be used when adding a edge\n     * @author Zhiyuan LYU\n     * @extends {React.Component}\n     */\n    class AddEdgeDialog extends React.Component {\n        state = {\n            chosenSource: null as null | string,\n            chosenTarget: null as null | string,\n        };\n\n        get canImport(): boolean {\n            if (!this.state.chosenSource || !this.state.chosenTarget) {\n                return false;\n            } else if (this.state.chosenSource === this.state.chosenTarget) {\n                return false;\n            } else {\n                return (\n                    !State.graph.rawGraph.hasEdge(\n                        this.state.chosenSource,\n                        this.state.chosenTarget\n                    ) &&\n                    !State.graph.rawGraph.hasEdge(\n                        this.state.chosenTarget,\n                        this.state.chosenSource\n                    )\n                );\n            }\n        }\n\n        render() {\n            return (\n                <Dialog\n                    isOpen={State.preferences.AddEdgeDialogOpen}\n                    icon=\"new-link\"\n                    onClose={() => {\n                        State.preferences.AddEdgeDialogOpen = false;\n                    }}\n                    onClosed={() =>\n                        this.setState({\n                            chosenSource: null,\n                            chosenTarget: null,\n                        })\n                    }\n                    title=\"Add Edge\"\n                >\n                    <div className={Classes.DIALOG_BODY}>\n                        <p>\n                            <strong>\n                                You can only add unique undirected edges to the\n                                graph dataset.\n                            </strong>\n                        </p>\n                        <p>\n                            A <em>UNIQUE</em> edge means there should only exist\n                            one edge that connects between the source and the\n                            target.\n                        </p>\n                        <ButtonGroup fill={true}>\n                            <NodeChooser\n                                text=\"Source Node\"\n                                onChange={(value) => {\n                                    this.setState({ chosenSource: value });\n                                }}\n                            />\n                            <Divider />\n                            <NodeChooser\n                                text=\"Target Node\"\n                                onChange={(value) => {\n                                    this.setState({ chosenTarget: value });\n                                }}\n                            />\n                        </ButtonGroup>\n                        <p>New edges are added to the end of the table.</p>\n                        {!this.canImport && (\n                            <Callout\n                                title=\"Invalid Edge\"\n                                intent=\"danger\"\n                                icon=\"edit\"\n                            >\n                                The new edge is invalid because either this is a\n                                edge that already in the graph or cannot form a\n                                valid undirected edge\n                            </Callout>\n                        )}\n                    </div>\n                    <div className={Classes.DIALOG_FOOTER}>\n                        <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                            <Button\n                                onClick={() => {\n                                    State.preferences.AddEdgeDialogOpen = false;\n                                }}\n                            >\n                                Cancel\n                            </Button>\n                            {/* //todo:\n                            <Button\n                                onClick={() => {\n                                    State.preferences.AddEdgeDialogOpen = false;\n                                }}\n                            >\n                                Preview\n                            </Button> */}\n                            <Button\n                                intent={Intent.PRIMARY}\n                                onClick={() => {\n                                    State.graph.mutating.addEdge(\n                                        this.state.chosenSource!,\n                                        this.state.chosenTarget!\n                                    );\n                                    this.forceUpdate();\n                                    State.preferences.AddEdgeDialogOpen = false;\n                                }}\n                                disabled={!this.canImport}\n                            >\n                                Confirm\n                            </Button>\n                        </div>\n                    </div>\n                </Dialog>\n            );\n        }\n    }\n);\n","/* eslint-disable jsx-a11y/label-has-for */\nimport React from \"react\";\nimport {\n    Button,\n    ButtonGroup,\n    Classes,\n    ControlGroup,\n    Dialog,\n    FileInput,\n    Intent,\n    Spinner,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../state\";\n\nexport default observer(\n    class ImportGEXFDialog extends React.Component {\n        state = {\n            fileIsSelect: false,\n        };\n\n        renderImportButton() {\n            return (\n                <div className={Classes.DIALOG_FOOTER}>\n                    <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                        <ButtonGroup>\n                            <Button\n                                disabled={!this.state.fileIsSelect}\n                                intent={Intent.PRIMARY}\n                                onClick={() => {\n                                    State.import.isLoading = true;\n                                    State.import\n                                        .importGraphFromGEXF()\n                                        .then((res) => {\n                                            State.graph.setGraph(\n                                                res.graph,\n                                                res.metadata\n                                            );\n\n                                            if (\n                                                State.graph.rawGraph.hasAttribute(\n                                                    \"default\"\n                                                )\n                                            ) {\n                                                State.cluster.setCluster(\n                                                    State.graph.rawGraph.getAttribute(\n                                                        \"default\"\n                                                    )\n                                                );\n                                            }\n\n                                            State.import.isLoading = false;\n                                            State.import.importGEXFDialogOpen = false;\n                                        });\n                                }}\n                                text=\"Import\"\n                            />\n                        </ButtonGroup>\n                    </div>\n                </div>\n            );\n        }\n\n        render() {\n            return (\n                <Dialog\n                    icon=\"document-open\"\n                    isOpen={State.import.importGEXFDialogOpen}\n                    onClose={() => {\n                        State.import.importGEXFDialogOpen = false;\n                    }}\n                    title=\"Open GEXF\"\n                >\n                    {/* if is loading, then show Spinner */}\n                    {State.import.isLoading ? (\n                        <Spinner />\n                    ) : (\n                        <div\n                            className={classnames(\n                                Classes.DIALOG_BODY,\n                                \"import-dialog\"\n                            )}\n                        >\n                            <div>\n                                <ControlGroup>\n                                    <FileInput\n                                        text={State.import.gexfFileName}\n                                        onInputChange={(event) => {\n                                            let target = event.target as HTMLInputElement;\n                                            if (\n                                                !target.files ||\n                                                target.files.length < 1\n                                            ) {\n                                                return;\n                                            }\n                                            State.import.gexfFileName =\n                                                target.files[0].name;\n                                            // after setting the selectedNodeFileFromInput, it will auto render the preview table\n                                            State.import.selectedGEXFFileFromInput =\n                                                target.files[0];\n\n                                            this.setState({\n                                                fileIsSelect: true,\n                                            });\n                                        }}\n                                    />\n                                </ControlGroup>\n                            </div>\n                            {this.renderImportButton()}\n                        </div>\n                    )}\n                </Dialog>\n            );\n        }\n    }\n);\n","import React from \"react\";\n// import PreferencesDialog from \"./PreferencesDialog\";\nimport ImportDialog from \"./dialogs/importDialog\";\nimport ExportDialog from \"./dialogs/ExportDialog\";\n// import ProjectDetailDialog from \"./ProjectDetailDialog\";\n// import RenameSnapshotDialog from \"./RenameSnapshotDialog\";\n// import StatisticsDialog from './StatisticsDialog';\n// import HelpDialog from './HelpDialog';\n// import NeighborDialog from './NeighborDialog';\nimport NodeDataSheetDialog from \"./dialogs/NodeDataSheetDialog\";\nimport EdgeDataSheetDialog from \"./dialogs/EdgeDataSheetDialog\";\nimport AddNodeDialog from \"./dialogs/AddNodeDialog\";\nimport AddEdgeDialog from \"./dialogs/AddEdgeDialog\";\nimport ImportGEXFDialog from \"./dialogs/ImportGEXFDialog\";\n\nexport default class Dialogs extends React.Component {\n    render() {\n        return (\n            <div style={{ display: \"none\" }}>\n                <ImportGEXFDialog />\n                <ImportDialog />\n                <AddNodeDialog />\n                <AddEdgeDialog />\n                <NodeDataSheetDialog />\n                <EdgeDataSheetDialog />\n                <ExportDialog />\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport { Attributes } from \"graphology-types\";\nimport classnames from \"classnames\";\nimport State from \"../../state/index\";\n\nexport default observer(\n    /**\n     * @description This component will be used when mutil-select in the mode 'node selection'.\n     * @author Zhiyuan LYU\n     * @extends {React.Component}\n     */\n    class SelectionBox extends React.Component {\n        state = {\n            boxStyle: {\n                left: 0,\n                top: 0,\n                width: 0,\n                height: 0,\n            },\n            startPoint: { x: 0, y: 0 },\n            endPoint: { x: 0, y: 0 },\n            mouseDown: false,\n        };\n\n        onMouseDownCallback = (\n            event: React.MouseEvent<HTMLDivElement, MouseEvent>\n        ) => {\n            let startpoint = { x: event.clientX, y: event.clientY };\n            this.setState({\n                startPoint: startpoint,\n                endPoint: startpoint,\n                mouseDown: true,\n            });\n        };\n\n        onMouseMoveCallback = (\n            event: React.MouseEvent<HTMLDivElement, MouseEvent>\n        ) => {\n            if (this.state.mouseDown) {\n                let endPoint = { x: event.clientX, y: event.clientY };\n                this.setState({\n                    endPoint: endPoint,\n                    boxStyle: this._calculateSelectionBox(\n                        this.state.startPoint,\n                        this.state.endPoint\n                    ),\n                });\n            }\n        };\n\n        onMouseUpCallback = (\n            event: React.MouseEvent<HTMLDivElement, MouseEvent>\n        ) => {\n            State.interaction.boxSelection_endPoint = {\n                x: this.state.endPoint.x,\n                y: this.state.endPoint.y,\n            };\n            State.interaction.boxSelection_startPoint = {\n                x: this.state.startPoint.x,\n                y: this.state.startPoint.y,\n            };\n\n            this.setState({\n                startPoint: { x: 0, y: 0 },\n                endPoint: { x: 0, y: 0 },\n                boxStyle: {\n                    left: 0,\n                    top: 0,\n                    width: 0,\n                    height: 0,\n                },\n                mouseDown: false,\n            });\n            State.interaction.boxSelectNode();\n        };\n\n        _calculateSelectionBox(\n            startPoint: Attributes,\n            endPoint: Attributes\n        ): Attributes {\n            let left = Math.min(startPoint.x, endPoint.x);\n            let top = Math.min(startPoint.y, endPoint.y);\n            let width = Math.abs(startPoint.x - endPoint.x);\n            let height = Math.abs(startPoint.y - endPoint.y);\n            return { left: left, top: top, width: width, height: height };\n        }\n\n        render() {\n            return (\n                <div\n                    className={classnames(\"boxCanvas\")}\n                    onMouseDown={this.onMouseDownCallback}\n                    onMouseMove={this.onMouseMoveCallback}\n                    onMouseUp={this.onMouseUpCallback}\n                >\n                    <div\n                        className={classnames(\"selectionBox\")}\n                        style={this.state.boxStyle}\n                    ></div>\n                </div>\n            );\n        }\n    }\n);\n","import ReactDOM from \"react-dom\";\nimport State from \"..\";\nimport * as THREE from \"three\";\nimport { Object3D } from \"three\";\nimport ComponentRef from \"../../components/ComponentRef\";\n\nexport function onDocumentLeftClick(event: MouseEvent) {\n    if (\n        State.cluster.clusterBy === null ||\n        !State.graphDelegate.graphDelegateMethods\n    ) {\n        return;\n    }\n    let element = ReactDOM.findDOMNode(ComponentRef.visualizer);\n    let box = (element as Element)?.getBoundingClientRect();\n\n    let vector = new THREE.Vector3(\n        ((event.clientX - box.left) / box.width) * 2 - 1,\n        -((event.clientY - box.top) / box.height) * 2 + 1,\n        0.5\n    );\n\n    let camera = State.graphDelegate.graphDelegateMethods?.camera();\n    if (!camera) {\n        return;\n    }\n    vector = vector.unproject(camera);\n\n    let raycaster = new THREE.Raycaster(\n        camera.position,\n        vector.sub(camera.position).normalize()\n    );\n    let intersects = raycaster.intersectObjects(\n        State.graphDelegate.clusterObject.fusionClusterObjects\n            ?.children as Object3D[],\n        true\n    );\n\n    if (intersects.length > 0) {\n        State.clusterInteraction.clusterLeftClickCallback(\n            intersects[0].object.uuid,\n            event\n        );\n        console.log(\"currently Clicked ClusterId\", intersects[0].object.uuid);\n    }\n}\n\nexport function onDocumentRightClick(event: MouseEvent) {\n    if (\n        State.cluster.clusterBy === null ||\n        !State.graphDelegate.graphDelegateMethods\n    ) {\n        return;\n    }\n    let element = ReactDOM.findDOMNode(ComponentRef.visualizer);\n    let box = (element as Element)?.getBoundingClientRect();\n\n    let vector = new THREE.Vector3(\n        ((event.clientX - box.left) / box.width) * 2 - 1,\n        -((event.clientY - box.top) / box.height) * 2 + 1,\n        0.5\n    );\n\n    let camera = State.graphDelegate.graphDelegateMethods?.camera();\n    if (!camera) {\n        return;\n    }\n    vector = vector.unproject(camera);\n\n    let raycaster = new THREE.Raycaster(\n        camera.position,\n        vector.sub(camera.position).normalize()\n    );\n    let intersects = raycaster.intersectObjects(\n        State.graphDelegate.clusterObject.fusionClusterObjects\n            ?.children as Object3D[],\n        true\n    );\n\n    if (intersects.length > 0) {\n        State.clusterInteraction.clusterRightClickCallback(\n            intersects[0].object.uuid,\n            event\n        );\n    } else {\n        State.clusterInteraction.clusterRightClickCallback(null, event);\n    }\n    console.log(\n        \"currently Right-Clicked ClusterId\",\n        intersects[0]?.object?.uuid ?? null\n    );\n}\n\nexport function onDocumentMouseMove(event: MouseEvent) {\n    if (\n        State.cluster.clusterBy === null ||\n        !State.graphDelegate.graphDelegateMethods\n    ) {\n        State.clusterInteraction.currentlyHoveredClusterId = null;\n        return;\n    }\n    let element = ReactDOM.findDOMNode(ComponentRef.visualizer);\n    let box = (element as Element)?.getBoundingClientRect();\n\n    let vector = new THREE.Vector3(\n        ((event.clientX - box.left) / box.width) * 2 - 1,\n        -((event.clientY - box.top) / box.height) * 2 + 1,\n        0.5\n    );\n\n    let camera = State.graphDelegate.graphDelegateMethods?.camera();\n    if (!camera) {\n        return;\n    }\n    vector = vector.unproject(camera);\n\n    let raycaster = new THREE.Raycaster(\n        camera.position,\n        vector.sub(camera.position).normalize()\n    );\n    let intersects = raycaster.intersectObjects(\n        State.graphDelegate.clusterObject.fusionClusterObjects\n            ?.children as Object3D[],\n        true\n    );\n\n    if (intersects.length > 0) {\n        State.clusterInteraction.clusterHoverCallback(\n            intersects[0].object.uuid,\n            event\n        );\n    } else {\n        State.clusterInteraction.clusterHoverCallback(null, event);\n    }\n    console.log(\n        \"currentlyHoveredClusterId\",\n        intersects[0]?.object?.uuid ?? null\n    );\n}\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport CanvasDraw from \"react-canvas-draw\";\nimport ReactDOM from \"react-dom\";\nimport ComponentRef from \"../ComponentRef\";\nimport State from \"../../state\";\nimport { NAVBAR_HEIGHT } from \"../../constants\";\n\nexport default observer(\n    class CanvasDrawPanel extends React.Component {\n        //@ts-ignore\n        canvasRef: React.MutableRefObject<CanvasDraw> = React.createRef();\n\n        get canvasMethods() {\n            return this.canvasRef.current;\n        }\n\n        get canvas() {\n            let element = ReactDOM.findDOMNode(ComponentRef.visualizer);\n            return (element as Element)?.getBoundingClientRect();\n        }\n\n        render() {\n            return (\n                <div\n                    onMouseUp={() => {\n                        const data = JSON.parse(\n                            this.canvasMethods.getSaveData()\n                        );\n                        if (data.lines[0].points.length > 4) {\n                            this.exportDrawing();\n                        }\n                    }}\n                >\n                    <CanvasDraw\n                        ref={this.canvasRef}\n                        style={{\n                            position: \"absolute\",\n                            top: this.canvas.y,\n                        }}\n                        canvasHeight={this.canvas.height}\n                        canvasWidth={this.canvas.width}\n                        lazyRadius={0}\n                        brushRadius={3}\n                        brushColor={\"#F6B26B\"}\n                        catenaryColor={\"#F6B26B\"}\n                    />\n                </div>\n            );\n        }\n\n        exportDrawing() {\n            State.helper.clusterSplittingCurrentStep = 3;\n            const data = JSON.parse(this.canvasMethods.getSaveData());\n            let drawPoints = data?.lines[0]?.points as {\n                x: number;\n                y: number;\n            }[];\n            if (!drawPoints) {\n                return;\n            }\n            drawPoints.forEach((value) => {\n                value.y += NAVBAR_HEIGHT;\n            });\n\n            // line was drawn left to right\n            if (drawPoints[0].x < drawPoints[drawPoints.length - 1].x) {\n                drawPoints.unshift({ x: 0, y: 0 });\n                drawPoints.push({ x: this.canvas.width, y: 0 });\n                drawPoints.push({ x: 0, y: 0 });\n            } else {\n                drawPoints.reverse();\n                drawPoints.unshift({ x: 0, y: 0 });\n                drawPoints.push({ x: this.canvas.width, y: 0 });\n                drawPoints.push({ x: 0, y: 0 });\n            }\n\n            State.clusterInteraction.lineSegment = drawPoints;\n            State.clusterInteraction.computeSplitCluster();\n        }\n\n        clearDrawing() {\n            this.canvasMethods.clear();\n        }\n\n        componentDidMount = () => {\n            ComponentRef.canvasDrawPanel = this;\n            this.clearDrawing();\n        };\n    }\n);\n","import { Intent, Position, Toaster, ToasterPosition } from \"@blueprintjs/core\";\nimport React from \"react\";\n\nexport function createToaster(\n    message: React.ReactNode,\n    position: ToasterPosition = Position.TOP,\n    timeout: number = 5000\n) {\n    Toaster.create({\n        position: position,\n    }).show({\n        message: message,\n        intent: Intent.NONE,\n        timeout: timeout,\n    });\n}\n","import { observer } from \"mobx-react\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport State from \"../../state\";\nimport ComponentRef from \"../ComponentRef\";\n\nexport default observer(\n    class CanvasDrawStraightLinePanel extends React.Component {\n        startPoint = { x: 0, y: 0 };\n        endPoint = { x: 100, y: 100 };\n        mouseDown = false;\n\n        componentRef: React.LegacyRef<HTMLCanvasElement> = React.createRef();\n\n        get canvas() {\n            let element = ReactDOM.findDOMNode(ComponentRef.visualizer);\n            return (element as Element)?.getBoundingClientRect();\n        }\n\n        onMouseDownCallback = (\n            event: React.MouseEvent<HTMLCanvasElement, MouseEvent>\n        ) => {\n            this.startPoint = { x: event.clientX, y: event.clientY - 50 };\n            this.endPoint = { x: event.clientX, y: event.clientY - 50 };\n            this.mouseDown = true;\n        };\n\n        onMouseMoveCallback = (\n            event: React.MouseEvent<HTMLCanvasElement, MouseEvent>\n        ) => {\n            if (this.mouseDown) {\n                this.endPoint = { x: event.clientX, y: event.clientY - 50 };\n                this.drawPoints();\n            }\n        };\n\n        onMouseUpCallback = (\n            event: React.MouseEvent<HTMLCanvasElement, MouseEvent>\n        ) => {\n            if (this.mouseDown) {\n                this.mouseDown = false;\n                this.exportDrawing();\n            }\n        };\n\n        exportDrawing() {\n            State.helper.clusterSplittingCurrentStep = 3;\n            let drawPoints = [\n                { x: this.startPoint.x, y: this.startPoint.y },\n                { x: this.endPoint.x, y: this.endPoint.y },\n            ] as {\n                x: number;\n                y: number;\n            }[];\n\n            // line was drawn left to right\n            if (drawPoints[0].x < drawPoints[1].x) {\n                drawPoints.unshift({ x: 0, y: 0 });\n                drawPoints.push({ x: this.canvas.width, y: 0 });\n                drawPoints.push({ x: 0, y: 0 });\n            } else {\n                drawPoints.reverse();\n                drawPoints.unshift({ x: 0, y: 0 });\n                drawPoints.push({ x: this.canvas.width, y: 0 });\n                drawPoints.push({ x: 0, y: 0 });\n            }\n\n            State.clusterInteraction.lineSegment = drawPoints;\n            State.clusterInteraction.computeSplitCluster();\n        }\n\n        ctx!: CanvasRenderingContext2D;\n\n        drawPoints() {\n            this.ctx.lineJoin = \"round\";\n            this.ctx.lineCap = \"round\";\n            this.ctx.clearRect(\n                0,\n                0,\n                this.ctx.canvas.width,\n                this.ctx.canvas.height\n            );\n            this.ctx.lineWidth = 5;\n\n            //开始启动画笔\n            this.ctx.beginPath();\n\n            //开始点\n            this.ctx.moveTo(this.startPoint.x, this.startPoint.y);\n            //结束点\n            this.ctx.lineTo(this.endPoint.x, this.endPoint.y);\n\n            this.ctx.strokeStyle = \"#F6B26B\";\n            //绘制\n            this.ctx.stroke();\n        }\n\n        clearDrawing() {\n            this.ctx.clearRect(\n                0,\n                0,\n                this.ctx.canvas.width,\n                this.ctx.canvas.height\n            );\n        }\n\n        render() {\n            return (\n                <canvas\n                    style={{\n                        position: \"absolute\",\n                        zIndex: 20,\n                    }}\n                    width={this.canvas.width}\n                    height={this.canvas.height}\n                    ref={(canvas) => {\n                        if (canvas) {\n                            this.ctx = canvas.getContext(\n                                \"2d\"\n                            ) as CanvasRenderingContext2D;\n                        }\n                    }}\n                    onMouseDown={this.onMouseDownCallback}\n                    onMouseMove={this.onMouseMoveCallback}\n                    onMouseUp={this.onMouseUpCallback}\n                />\n            );\n        }\n        componentDidMount = () => {\n            ComponentRef.canvasDrawStraightLinePanel = this;\n        };\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport ForceGraph3D, {\n    ForceGraphMethods,\n    LinkObject,\n    NodeObject,\n} from \"react-force-graph-3d\";\nimport ComponentRef from \"../ComponentRef\";\nimport State from \"../../state\";\nimport SpriteText from \"three-spritetext\";\nimport {\n    ICustomLinkObject,\n    ICustomNodeObject,\n} from \"../../state/GraphDelegate\";\nimport { reaction } from \"mobx\";\nimport { VisualizationMode } from \"../../state/PreferencesStore\";\nimport SelectionBox from \"../panels/SelectionBox\";\nimport * as CustomMouseEvent from \"../../state/utils/MouseEventUtils\";\nimport CanvasDrawPanel from \"../panels/CanvasDrawPanel\";\nimport { createToaster } from \"../../state/utils/ToasterUtils\";\nimport { Position } from \"@blueprintjs/core\";\nimport CanvasDrawStraightLinePanel from \"../panels/CanvasDrawStraightLinePanel\";\n\nexport default observer(\n    class ThreeJSVis extends React.Component {\n        state = {\n            visualizationGraph: State.graphDelegate.visualizationGraph(),\n            nodePointerInteraction: true,\n        };\n\n        // @ts-ignore\n        graphRef: React.MutableRefObject<ForceGraphMethods> = React.createRef();\n\n        get graphMethods(): ForceGraphMethods {\n            return this.graphRef.current;\n        }\n\n        graphDelegate = State.graphDelegate;\n\n        hoverNodeCallback = (\n            node: NodeObject | null,\n            previousNode: NodeObject | null\n        ) => {\n            if (State.search.isPreviewing) return;\n            // to avoid frequent refresh\n\n            if (node === null) {\n                State.interaction.currentlyHoveredNodeId = null;\n            } else if (node !== previousNode) {\n                let current: string = node.id as string;\n                State.interaction.currentlyHoveredNodeId = current;\n            }\n            // console.log(State.graph.rawGraph);\n        };\n\n        nodeLeftClickCallback = (node: NodeObject, event: MouseEvent) => {\n            if (!this.state.nodePointerInteraction) {\n                return;\n            }\n            let nodeId = node.id as string;\n            if (\n                State.preferences.visualizationMode ===\n                VisualizationMode.NodeSelection\n            ) {\n                // multi-selection\n                let index;\n                // if already in the list of selected, remove\n                if (\n                    (index = State.interaction.selectedNodes.indexOf(\n                        nodeId\n                    )) !== -1\n                ) {\n                    State.interaction.selectedNodes.splice(index, 1);\n                } else {\n                    // if not in the list, add\n                    State.interaction.selectedNodes.push(nodeId);\n                }\n            } else {\n                // single select\n                State.interaction.selectedNodes = [node.id as string];\n            }\n        };\n\n        nodeRightClickCallback = (node: NodeObject, event: MouseEvent) => {\n            if (!this.state.nodePointerInteraction) {\n                return;\n            }\n            State.interaction.selectedNode = node.id as string;\n            State.preferences.rightClickPositionX = event.x;\n            State.preferences.rightClickPositionY = event.y;\n            State.preferences.rightClickOn = \"Node\";\n            State.preferences.rightClickPanelOpen = true;\n            State.preferences.closeAllPanel(\"rightClickPanel\");\n        };\n\n        backgroundClickCallback = () => {\n            // cancel all selection\n            State.interaction.flush();\n            State.interaction.selectedNodes = [];\n            State.preferences.rightClickPanelOpen = false;\n            State.preferences.closeAllPanel(\"rightClickPanel\");\n        };\n\n        backgroundRightClickCallback = (event: MouseEvent) => {\n            if (!this.state.nodePointerInteraction) {\n                return;\n            }\n            State.preferences.rightClickPositionX = event.x;\n            State.preferences.rightClickPositionY = event.y;\n            State.preferences.rightClickOn = \"Background\";\n            State.preferences.rightClickPanelOpen = true;\n            State.preferences.closeAllPanel(\"rightClickPanel\");\n        };\n\n        computeNodeColor(_node: NodeObject) {\n            let node = _node as ICustomNodeObject;\n            if (node.hovered) {\n                return State.css.node.highlightColor;\n            } else if (node.selected) {\n                return State.css.node.selectedColor;\n            } else if (node.multiSelected) {\n                return State.css.node.multiSelectedColor;\n            } else {\n                return State.css.node.defaultColor;\n            }\n        }\n\n        computeEdgeColor(_edge: LinkObject) {\n            let edge = _edge as ICustomLinkObject;\n            if (edge.hovered) {\n                return State.css.edge.highlightColor;\n            } else if (edge.selected) {\n                return State.css.edge.selectedColor;\n            } else {\n                return State.css.edge.defaultColor;\n            }\n        }\n\n        computeEdgeWidth(_edge: LinkObject) {\n            let edge = _edge as ICustomLinkObject;\n            if (edge.hovered) {\n                return State.css.edge.highlightWidth;\n            } else if (edge.selected) {\n                return State.css.edge.highlightWidth;\n            } else {\n                return State.css.edge.defaultWidth;\n            }\n        }\n\n        renderDrawCanvas = () => {\n            if (State.clusterInteraction.drawStraightLine) {\n                return <CanvasDrawStraightLinePanel />;\n            } else {\n                return <CanvasDrawPanel />;\n            }\n        };\n\n        renderGraph = () => {\n            return (\n                <div>\n                    {State.preferences.visualizationMode ===\n                        VisualizationMode.NodeSelection &&\n                        State.interaction.boxSelectionOpen && <SelectionBox />}\n                    {State.preferences.visualizationMode ===\n                        VisualizationMode.ClusterSplitting &&\n                        State.clusterInteraction.drawPanelActivate &&\n                        this.renderDrawCanvas()}\n                    <ForceGraph3D\n                        // Data Segment\n                        ref={this.graphRef}\n                        graphData={this.state.visualizationGraph}\n                        // Node Visualization Segment\n                        nodeLabel=\"id\"\n                        nodeRelSize={State.css.node.size}\n                        nodeColor={this.computeNodeColor}\n                        nodeVisibility={this.graphDelegate.nodeVisibility}\n                        nodeResolution={State.css.node.resolution}\n                        nodeThreeObjectExtend={true}\n                        nodeThreeObject={(node) => {\n                            const sprite = new SpriteText(`${node.id}`);\n                            sprite.color = State.css.label.color;\n                            sprite.textHeight = State.css.label.size;\n                            sprite.backgroundColor = \"\";\n                            sprite.visible = State.css.label.show;\n                            sprite.translateX(State.css.node.size + 2);\n                            return sprite;\n                        }}\n                        // Node Manipulation Segment\n                        onNodeHover={this.hoverNodeCallback}\n                        onNodeClick={this.nodeLeftClickCallback}\n                        onNodeRightClick={this.nodeRightClickCallback}\n                        onNodeDragEnd={(node) => {\n                            node.fx = node.x;\n                            node.fy = node.y;\n                            node.fz = node.z;\n                        }}\n                        // Link Visualization Segment\n                        linkVisibility={this.graphDelegate.linkVisibility}\n                        linkWidth={this.computeEdgeWidth}\n                        linkColor={this.computeEdgeColor}\n                        // Graph Manipulation Segment\n                        onBackgroundRightClick={\n                            this.backgroundRightClickCallback\n                        }\n                        onBackgroundClick={this.backgroundClickCallback}\n                        enablePointerInteraction={\n                            this.state.nodePointerInteraction\n                        }\n                        // Engine\n                        onEngineTick={() => {\n                            State.graphDelegate.clusterObject.canAlterNodePosition = true;\n                            this.graphDelegate.clusterObject.clusterDelegation();\n                        }}\n                        cooldownTicks={100}\n                        onEngineStop={() => {\n                            if (\n                                State.css.cluster.shape === \"sphere\" &&\n                                State.graphDelegate.clusterObject\n                                    .canAlterNodePosition\n                            ) {\n                                console.log(\n                                    \"starts to plot points on the surface of the sphere\"\n                                );\n                                this.graphDelegate.clusterObject.alterNodePosition();\n                                State.graphDelegate.clusterObject.canAlterNodePosition = false;\n                            }\n                        }}\n                    />\n                </div>\n            );\n            // } else {\n            //     return (\n            //         <ForceGraph2D\n            //             graphData={State.graph.adapterGraph}\n            //             dagMode={\"td\"}\n            //             // dagLevelDistance={300}\n            //             // backgroundColor=\"#101020\"\n            //             nodeRelSize={1}\n            //             // nodeId=\"path\"\n            //             // nodeVal={(node) => 100 / (node.level + 1)}\n            //             // nodeLabel=\"path\"\n            //             // nodeAutoColorBy=\"module\"\n            //             // linkDirectionalParticles={2}\n            //             // linkDirectionalParticleWidth={2}\n            //             d3VelocityDecay={0.3}\n            //         />\n            //     );\n        };\n\n        render() {\n            return <div>{this.renderGraph()}</div>;\n        }\n\n        updateVisualizationGraph() {\n            this.setState({\n                visualizationGraph: State.graphDelegate.visualizationGraph(),\n            });\n        }\n\n        clusterInteractionListener(set: boolean) {\n            if (set) {\n                document.addEventListener(\n                    \"mousemove\",\n                    CustomMouseEvent.onDocumentMouseMove\n                );\n                document.addEventListener(\n                    \"click\",\n                    CustomMouseEvent.onDocumentLeftClick\n                );\n                document.addEventListener(\n                    \"contextmenu\",\n                    CustomMouseEvent.onDocumentRightClick\n                );\n                console.log(\"MouseEvent listening\");\n            } else {\n                document.removeEventListener(\n                    \"mousemove\",\n                    CustomMouseEvent.onDocumentMouseMove\n                );\n                document.removeEventListener(\n                    \"click\",\n                    CustomMouseEvent.onDocumentLeftClick\n                );\n                document.removeEventListener(\n                    \"contextmenu\",\n                    CustomMouseEvent.onDocumentRightClick\n                );\n                console.log(\"MouseEvent stop listening\");\n            }\n        }\n\n        componentDidMount() {\n            this.graphDelegate.mountDelegateMethods(this.graphMethods);\n            this.clusterInteractionListener(true);\n            ComponentRef.visualizer = this;\n        }\n    }\n);\n\nreaction(\n    () => State.preferences.visualizationMode,\n    (visualizationMode) => {\n        switch (visualizationMode) {\n            case VisualizationMode.Normal:\n                ComponentRef.visualizer?.setState({\n                    nodePointerInteraction: true,\n                });\n                State.interaction.flush();\n                State.clusterInteraction.flush();\n                ComponentRef.visualizer?.clusterInteractionListener(true);\n                break;\n\n            case VisualizationMode.NodeSelection:\n                ComponentRef.visualizer?.setState({\n                    nodePointerInteraction: true,\n                });\n                State.interaction.flush();\n                State.clusterInteraction.flush();\n                ComponentRef.visualizer?.clusterInteractionListener(false);\n                createToaster(\n                    <p>\n                        Select one or more <b>Nodes</b> and <b>Right-click</b>{\" \"}\n                        on one of them to open <b>Context Menu</b>\n                    </p>,\n                    Position.BOTTOM,\n                    10000\n                );\n                break;\n\n            case VisualizationMode.ClusterSelection:\n                ComponentRef.visualizer?.setState({\n                    nodePointerInteraction: false,\n                });\n                State.interaction.flush();\n                State.clusterInteraction.flush();\n                ComponentRef.visualizer?.clusterInteractionListener(true);\n                createToaster(\n                    <p>\n                        Select one or more <b>Clusters</b> and{\" \"}\n                        <b>Right-click</b> on one of them to open{\" \"}\n                        <b>Context Menu</b>\n                    </p>,\n                    Position.BOTTOM,\n                    10000\n                );\n                break;\n\n            case VisualizationMode.ClusterSplitting:\n                ComponentRef.visualizer?.setState({\n                    nodePointerInteraction: false,\n                });\n                State.interaction.flush();\n                State.clusterInteraction.flush();\n                ComponentRef.visualizer?.clusterInteractionListener(true);\n                State.helper.clusterSplittingPanelStackOpen = true;\n                break;\n        }\n    }\n);\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { Card } from \"@blueprintjs/core\";\nimport { Cell, Column, EditableCell, Table } from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state/index\";\nimport ComponentRef from \"../ComponentRef\";\n\ninterface Props {\n    /**\n     * the node id of the select node\n     *\n     * @type {string}\n     * @memberof Props\n     */\n    onNode: string;\n}\n\nexport default observer(\n    /**\n     * @description Impletementing a table showing the detail in formation of hovered Node， in which the information could be changed by users\n     * @author Zhiyuan LYU Chenghao SHI\n     * @extends {React.Component<Props, {}>}\n     */\n    class NodeDetail extends React.Component<Props, {}> {\n        cellRenderer_property = (rowIndex: number) => {\n            return <Cell>{State.graph.metadata.nodeProperties[rowIndex]}</Cell>;\n        };\n\n        cellRenderer_value = (rowIndex: number) => {\n            let data = State.graph.rawGraph.getNodeAttribute(\n                this.props.onNode,\n                State.graph.metadata.nodeProperties[rowIndex]\n            );\n            // return a Editable Cell where user can edit the value of certain property;\n            return (\n                <EditableCell\n                    value={data}\n                    onChange={(newVal) =>\n                        State.graph.rawGraph.setNodeAttribute(\n                            this.props.onNode,\n                            State.graph.metadata.nodeProperties[rowIndex],\n                            newVal\n                        )\n                    }\n                    onConfirm={(newVal) =>\n                        State.graph.rawGraph.setNodeAttribute(\n                            this.props.onNode,\n                            State.graph.metadata.nodeProperties[rowIndex],\n                            newVal\n                        )\n                    }\n                    tooltip={data}\n                />\n            );\n        };\n\n        formatLongFloat = (nodeAttributeValue: any) => {\n            const num = Number(nodeAttributeValue);\n            if (Number.isNaN(num) || num > 1 || num < 0) {\n                // Do not format just return original\n                return nodeAttributeValue;\n            }\n            // Format to no more than 3 significant digit.\n            return Number.parseFloat(num.toString()).toPrecision(3);\n        };\n\n        render() {\n            return (\n                <div\n                    className={classnames(\n                        \"right-overlay-card\",\n                        \"transparent-frame\"\n                    )}\n                >\n                    <Card className={\"node-details-table\"}>\n                        <Table\n                            numRows={State.graph.metadata.nodeProperties.length}\n                            enableRowHeader={false}\n                        >\n                            <Column\n                                name=\"Properties\"\n                                cellRenderer={this.cellRenderer_property}\n                            />\n                            <Column\n                                name=\"Value\"\n                                cellRenderer={this.cellRenderer_value}\n                            />\n                        </Table>\n                    </Card>\n                </div>\n            );\n        }\n        componentDidMount = () => {\n            ComponentRef.nodeDetail = React.createRef();\n        };\n    }\n);\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { Card } from \"@blueprintjs/core\";\nimport { Cell, Column, Table } from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport ComponentRef from \"../ComponentRef\";\nimport State from \"../../state/index\";\n\nexport default observer(\n    /**\n     * @description This component will be used when multiple-choose nodes.\n     * @author Zhiyuan LYU\n     * @extends {React.Component}\n     */\n    class MultipleNodeDetail extends React.Component {\n        render() {\n            return (\n                <div\n                    className={classnames(\n                        \"left-bottom-overlay-card\",\n                        \"transparent-frame\"\n                    )}\n                >\n                    <Card>\n                        <Table numRows={State.interaction.selectedNodes.length}>\n                            {State.graph.metadata.nodeProperties.map((it) => (\n                                <Column\n                                    key={it}\n                                    name={it}\n                                    cellRenderer={(i) => (\n                                        <Cell>\n                                            {State.graph.rawGraph.getNodeAttribute(\n                                                State.interaction.selectedNodes[\n                                                    i\n                                                ] as string,\n                                                it as string\n                                            )}\n                                        </Cell>\n                                    )}\n                                />\n                            ))}\n                        </Table>\n                    </Card>\n                </div>\n            );\n        }\n        componentDidMount = () => {\n            ComponentRef.multiNodeDetail = this;\n        };\n    }\n);\n","import React from \"react\";\nimport { Alert, Button, Card, Code, H6, Intent } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../state\";\nimport {\n    Cell,\n    Column,\n    ICellRenderer,\n    RenderMode,\n    Table,\n} from \"@blueprintjs/table\";\n\ninterface Props {\n    /**\n     * the node id of the select node to delete Edge\n     *\n     * @type {string}\n     * @memberof Props\n     */\n    onNode: string;\n}\n\nexport default observer(\n    class DeleteEdgeInteractionPanel extends React.Component<Props, {}> {\n        state = {\n            targetNode: null as string | null,\n            deleteAlertOpen: false,\n        };\n\n        get neighbors(): string[] {\n            return State.graph.rawGraph.neighbors(this.props.onNode);\n        }\n\n        deleteEdgeRenderer: ICellRenderer = (rowIndex) => {\n            let targetNode = this.neighbors[rowIndex];\n            return (\n                <Cell>\n                    <Button\n                        onClick={() => {\n                            this.setState({\n                                targetNode: targetNode,\n                                deleteAlertOpen: true,\n                            });\n                        }}\n                        icon=\"trash\"\n                        intent=\"danger\"\n                        text=\"Delete\"\n                        minimal={true}\n                    />\n                </Cell>\n            );\n        };\n\n        deleteEdgeAlert = () => {\n            if (this.state.targetNode === null) {\n                return null;\n            }\n\n            let edgeToDelete: string | undefined;\n\n            if (\n                (edgeToDelete = State.graph.rawGraph.edge(\n                    this.state.targetNode,\n                    this.props.onNode\n                )) === undefined\n            ) {\n                edgeToDelete = State.graph.rawGraph.edge(\n                    this.props.onNode,\n                    this.state.targetNode\n                );\n            }\n\n            return (\n                <Alert\n                    cancelButtonText=\"Cancel\"\n                    confirmButtonText=\"Confirm Delete\"\n                    icon=\"trash\"\n                    intent={Intent.DANGER}\n                    isOpen={this.state.deleteAlertOpen}\n                    onCancel={() => this.setState({ deleteAlertOpen: false })}\n                    onConfirm={() => {\n                        State.graph.mutating.dropEdge(edgeToDelete as string);\n                        this.setState({ deleteAlertOpen: false });\n                        State.preferences.deleteEdgePanelOpen = false;\n                    }}\n                >\n                    <p>\n                        Are you sure you want to delete the edge with Key{\" \"}\n                        <Code>{edgeToDelete as string}</Code> between Node ID{\" \"}\n                        <Code>{this.state.targetNode}</Code> and Node ID{\" \"}\n                        <Code>{this.props.onNode}</Code>. This action cannot be\n                        reversed.\n                    </p>\n                </Alert>\n            );\n        };\n\n        neighborsRenderer: ICellRenderer = (rowIndex: number) => {\n            return (\n                <Cell interactive={true}>\n                    <div\n                        onMouseEnter={() => {\n                            State.graphDelegate.cameraFocusOn(\n                                this.props.onNode,\n                                400\n                            );\n                            State.interaction.selectedEdge = State.interaction.getEdgeKey(\n                                this.props.onNode,\n                                this.neighbors[rowIndex]\n                            ) as string;\n                        }}\n                    >\n                        {this.neighbors[rowIndex]}\n                    </div>\n                </Cell>\n            );\n        };\n\n        render() {\n            return (\n                <div\n                    className={classnames(\n                        \"right-bottom-overlay-card\",\n                        \"transparent-frame\"\n                    )}\n                >\n                    <Card className={classnames(\"node-details-table\")}>\n                        <Button\n                            icon=\"cross\"\n                            onClick={() => {\n                                State.preferences.deleteEdgePanelOpen = false;\n                                State.interaction.selectedEdge = null;\n                                State.graphDelegate.graphDelegateMethods.refresh(); // update color of selected edges\n                            }}\n                        >\n                            Close\n                        </Button>\n                        <H6> Node ID: {this.props.onNode}</H6>\n                        <Table\n                            numRows={this.neighbors.length}\n                            defaultRowHeight={30}\n                            renderMode={RenderMode.NONE}\n                        >\n                            <Column\n                                name=\"\"\n                                cellRenderer={this.deleteEdgeRenderer}\n                                //@ts-ignore\n                                style={this.style}\n                            />\n                            <Column\n                                name=\"Node ID\"\n                                //@ts-ignore\n                                intent={Intent.PRIMARY}\n                                cellRenderer={this.neighborsRenderer}\n                            />\n                        </Table>\n                        {this.deleteEdgeAlert()}\n                    </Card>\n                </div>\n            );\n        }\n    }\n);\n","import React, { ReactNode } from \"react\";\nimport { Button, Card, Classes, Collapse, Elevation } from \"@blueprintjs/core\";\nimport classnames from \"classnames\";\nimport { observer } from \"mobx-react\";\n\ninterface Props {\n    name: string;\n    isOpen: boolean;\n    onToggle: (event: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n    children: ReactNode;\n}\n\nexport default observer(\n    class SimpleSelect extends React.Component<Props, {}> {\n        render() {\n            return (\n                <Card elevation={Elevation.THREE}>\n                    <Button\n                        className={classnames(\n                            Classes.LARGE,\n                            Classes.FILL,\n                            \"text-align-left\"\n                        )}\n                        rightIcon={\n                            this.props.isOpen ? \"chevron-up\" : \"chevron-down\"\n                        }\n                        onClick={this.props.onToggle}\n                    >\n                        {this.props.name}\n                    </Button>\n                    <Collapse isOpen={this.props.isOpen}>\n                        {this.props.children}\n                    </Collapse>\n                </Card>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport { Card, Slider } from \"@blueprintjs/core\";\nimport Collapsable from \"../utils/Collapsable\";\nimport SimpleSelect from \"../utils/SimpleSelect\";\n\nexport default observer(\n    class ClusterPanel extends React.Component {\n        state = {\n            shapeOptionOpen: false,\n            forceOptionOpen: false,\n        };\n\n        forceCollapse = () => {\n            return (\n                <Collapsable\n                    name=\"Force\"\n                    isOpen={this.state.forceOptionOpen}\n                    onToggle={() =>\n                        this.setState({\n                            forceOptionOpen: !this.state.forceOptionOpen,\n                        })\n                    }\n                >\n                    <Card className={\"sub-option\"}>\n                        Cluster Force Distance:\n                        <br />\n                        <Slider\n                            min={0}\n                            max={100}\n                            stepSize={10}\n                            labelStepSize={20}\n                            onChange={(value) => {\n                                State.css.cluster.clusterForce = value;\n                                State.graphDelegate.updateClusterForce();\n                            }}\n                            value={State.css.cluster.clusterForce}\n                        />\n                    </Card>\n                    <Card className={\"sub-option\"}>\n                        Normal Force Distance:\n                        <br />\n                        <Slider\n                            min={0}\n                            max={100}\n                            stepSize={10}\n                            labelStepSize={20}\n                            onChange={(value) => {\n                                State.css.cluster.normalForce = value;\n                                State.graphDelegate.updateClusterForce();\n                            }}\n                            value={State.css.cluster.normalForce}\n                        />\n                    </Card>\n                </Collapsable>\n            );\n        };\n\n        shapeCollapse = () => {\n            return (\n                <Collapsable\n                    name=\"Shape\"\n                    isOpen={this.state.shapeOptionOpen}\n                    onToggle={() =>\n                        this.setState({\n                            shapeOptionOpen: !this.state.shapeOptionOpen,\n                        })\n                    }\n                >\n                    <Card className={\"sub-option\"}>\n                        <p style={{ textAlign: \"left\" }}>\n                            Cluster Shape:\n                            <span style={{ float: \"right\" }}>\n                                <SimpleSelect\n                                    items={[\"convexHull\", \"sphere\"]}\n                                    text={State.css.cluster.shape}\n                                    onSelect={(it) => {\n                                        State.css.cluster.shape = it;\n                                        State.graphDelegate.clusterObject.alterNodePosition();\n                                    }}\n                                    small={true}\n                                />\n                            </span>\n                        </p>\n                    </Card>\n                    {State.css.cluster.shape === \"sphere\" && (\n                        <Card className={\"sub-option\"}>\n                            Cluster Resolution:\n                            <br />\n                            <Slider\n                                min={2}\n                                max={20}\n                                stepSize={1}\n                                labelStepSize={5}\n                                onChange={(value) => {\n                                    State.css.cluster.resolution = value;\n                                    State.graphDelegate.graphDelegateMethods.refresh();\n                                }}\n                                value={State.css.cluster.resolution}\n                            />\n                        </Card>\n                    )}\n                </Collapsable>\n            );\n        };\n\n        render() {\n            return (\n                <div>\n                    <div>\n                        <p>Modifying All Clusters</p>\n                    </div>\n                    {this.forceCollapse()}\n                    {this.shapeCollapse()}\n                </div>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport {\n    Button,\n    Popover,\n    PopoverInteractionKind,\n    Position,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport { ColorResult, SketchPicker } from \"react-color\";\n\n/**\n *\n * @interface Props\n */\ninterface Props {\n    /**\n     * the color to be previewed on the button\n     *\n     * @type {string}\n     * @memberof Props\n     */\n    color: string;\n\n    /**\n     * function to call when a candidate is selected, will be called on every selection of candidate\n     *\n     * @memberof Props\n     */\n    onChange: (color: ColorResult) => void;\n}\n\n/**\n * this component can be used to choose the node among all the nodes, with basic search filters available\n * to use it, you have to specify the text shown above the selectButton as well as the onChange function to call when a candidate is selected\n */\nexport default observer(\n    class ColorPicker extends React.Component<Props, {}> {\n        render() {\n            return (\n                <Popover\n                    interactionKind={PopoverInteractionKind.CLICK}\n                    popoverClassName=\"bp3-popover-content-sizing\"\n                    position={Position.RIGHT}\n                >\n                    <Button\n                        text=\"  \"\n                        style={{\n                            backgroundColor: this.props.color,\n                        }}\n                        small={true}\n                    />\n                    <div>\n                        <SketchPicker\n                            color={this.props.color}\n                            onChange={(it) => {\n                                this.props.onChange(it);\n                            }}\n                        />\n                    </div>\n                </Popover>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport { Card } from \"@blueprintjs/core\";\nimport Collapsable from \"../utils/Collapsable\";\nimport ColorPicker from \"../utils/ColorPicker\";\n\nexport default observer(\n    /**\n     * @description This component will be used to change styles of edge\n     * @author Zhiyuan LYU Zichen XU\n     * @extends {React.Component}\n     */\n    class EdgesPanel extends React.Component {\n        state = {\n            sizeOptionOpen: false,\n            thicknessOptionOpen: false,\n            colorOptionOpen: false,\n            forceOptionOpen: false,\n        };\n\n        render() {\n            return (\n                <div>\n                    <p>Modifying All Edges</p>\n\n                    {/* Collapsable Option: Color */}\n                    <Collapsable\n                        name=\"Color\"\n                        isOpen={this.state.colorOptionOpen}\n                        onToggle={() =>\n                            this.setState({\n                                colorOptionOpen: !this.state.colorOptionOpen,\n                            })\n                        }\n                    >\n                        <Card className={\"sub-option\"}>\n                            <section>\n                                <p style={{ textAlign: \"left\" }}>\n                                    Default Color:\n                                    <span style={{ float: \"right\" }}>\n                                        <ColorPicker\n                                            color={State.css.edge.defaultColor}\n                                            onChange={(it) => {\n                                                State.css.edge.defaultColor =\n                                                    it.hex;\n\n                                                State.graphDelegate.graphDelegateMethods.refresh();\n                                            }}\n                                        />\n                                    </span>\n                                </p>\n                            </section>\n\n                            <section>\n                                <p style={{ textAlign: \"left\" }}>\n                                    Selected Color:\n                                    <span style={{ float: \"right\" }}>\n                                        <ColorPicker\n                                            color={State.css.edge.selectedColor}\n                                            onChange={(it) => {\n                                                State.css.edge.selectedColor =\n                                                    it.hex;\n\n                                                State.graphDelegate.graphDelegateMethods.refresh();\n                                            }}\n                                        />\n                                    </span>\n                                </p>\n                            </section>\n\n                            <section>\n                                <p style={{ textAlign: \"left\" }}>\n                                    Highlight Color:\n                                    <span style={{ float: \"right\" }}>\n                                        <ColorPicker\n                                            color={\n                                                State.css.edge.highlightColor\n                                            }\n                                            onChange={(it) => {\n                                                State.css.edge.highlightColor =\n                                                    it.hex;\n\n                                                State.graphDelegate.graphDelegateMethods.refresh();\n                                            }}\n                                        />\n                                    </span>\n                                </p>\n                            </section>\n                        </Card>\n                    </Collapsable>\n                </div>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Card, Slider, Switch } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport ColorPicker from \"../utils/ColorPicker\";\n\nexport default observer(\n    /**\n     * @description This component will be used to change style of label\n     * @author Zhiyuan LYU, Zichen XU\n     * @extends {React.Component}\n     */\n    class LabelsPanel extends React.Component {\n        render() {\n            return (\n                <div>\n                    <Switch\n                        label=\"Show Node Label\"\n                        checked={State.css.label.show}\n                        onChange={() => {\n                            State.css.label.show = !State.css.label.show;\n                            State.graphDelegate.graphDelegateMethods.refresh();\n                        }}\n                    />\n                    <br />\n                    <Card className={\"sub-option\"}>\n                        Label Size:\n                        <br />\n                        <Slider\n                            min={1}\n                            max={10}\n                            stepSize={1}\n                            labelStepSize={2}\n                            onChange={(value) => {\n                                State.css.label.size = value;\n                                State.graphDelegate.graphDelegateMethods.refresh();\n                            }}\n                            value={State.css.label.size}\n                        />\n                        <br />\n                        <p style={{ textAlign: \"left\" }}>\n                            Label Color:\n                            <span style={{ float: \"right\" }}>\n                                <ColorPicker\n                                    color={State.css.label.color}\n                                    onChange={(it) => {\n                                        State.css.label.color = it.hex;\n                                        State.graphDelegate.graphDelegateMethods.refresh();\n                                    }}\n                                />\n                            </span>\n                        </p>\n                    </Card>\n                </div>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport { Card, Slider } from \"@blueprintjs/core\";\nimport Collapsable from \"../utils/Collapsable\";\nimport ColorPicker from \"../utils/ColorPicker\";\n\nexport default observer(\n    /**\n     * @description This component will be used to change style of nodes. Including color, size,etc\n     * @author Zhiyuan LYU, Zichen XU\n     * @extends {React.Component}\n     */\n    class NodesPanel extends React.Component {\n        state = {\n            timeOutRef: null,\n            colorOptionOpen: false,\n            sizeOptionOpen: false,\n            shapeOptionOpen: false,\n        };\n\n        colorCollapse = () => {\n            return (\n                <Collapsable\n                    name=\"Color\"\n                    isOpen={this.state.colorOptionOpen}\n                    onToggle={() =>\n                        this.setState({\n                            colorOptionOpen: !this.state.colorOptionOpen,\n                        })\n                    }\n                >\n                    <Card className={\"sub-option\"}>\n                        <section>\n                            <p style={{ textAlign: \"left\" }}>\n                                Default Color:\n                                <span style={{ float: \"right\" }}>\n                                    <ColorPicker\n                                        color={State.css.node.defaultColor}\n                                        onChange={(it) => {\n                                            State.css.node.defaultColor =\n                                                it.hex;\n\n                                            State.graphDelegate.graphDelegateMethods.refresh();\n                                        }}\n                                    />\n                                </span>\n                            </p>\n                        </section>\n\n                        <section>\n                            <p style={{ textAlign: \"left\" }}>\n                                Selected Color:\n                                <span style={{ float: \"right\" }}>\n                                    <ColorPicker\n                                        color={\n                                            State.css.node.multiSelectedColor\n                                        }\n                                        onChange={(it) => {\n                                            State.css.node.multiSelectedColor =\n                                                it.hex;\n\n                                            State.graphDelegate.graphDelegateMethods.refresh();\n                                        }}\n                                    />\n                                </span>\n                            </p>\n                        </section>\n\n                        <section>\n                            <p style={{ textAlign: \"left\" }}>\n                                Highlight Color:\n                                <span style={{ float: \"right\" }}>\n                                    <ColorPicker\n                                        color={State.css.node.highlightColor}\n                                        onChange={(it) => {\n                                            State.css.node.highlightColor =\n                                                it.hex;\n\n                                            State.graphDelegate.graphDelegateMethods.refresh();\n                                        }}\n                                    />\n                                </span>\n                            </p>\n                        </section>\n                    </Card>\n                </Collapsable>\n            );\n        };\n\n        sizeCollapse = () => {\n            return (\n                <Collapsable\n                    name=\"Size\"\n                    isOpen={this.state.sizeOptionOpen}\n                    onToggle={() =>\n                        this.setState({\n                            sizeOptionOpen: !this.state.sizeOptionOpen,\n                        })\n                    }\n                >\n                    <Card className={\"sub-option\"}>\n                        Node Size:\n                        <br />\n                        <Slider\n                            min={1}\n                            max={20}\n                            stepSize={1}\n                            labelStepSize={5}\n                            onChange={(value) => {\n                                State.css.node.size = value;\n                                State.graphDelegate.graphDelegateMethods.refresh();\n                            }}\n                            value={State.css.node.size}\n                        />\n                    </Card>\n                </Collapsable>\n            );\n        };\n\n        shapeCollapse = () => {\n            return (\n                <Collapsable\n                    name=\"Shape\"\n                    isOpen={this.state.shapeOptionOpen}\n                    onToggle={() =>\n                        this.setState({\n                            shapeOptionOpen: !this.state.shapeOptionOpen,\n                        })\n                    }\n                >\n                    <Card className={\"sub-option\"}>\n                        Node Resolution:\n                        <br />\n                        <Slider\n                            min={2}\n                            max={20}\n                            stepSize={1}\n                            labelStepSize={5}\n                            onChange={(value) => {\n                                State.css.node.resolution = value;\n                            }}\n                            value={State.css.node.resolution}\n                        />\n                    </Card>\n                </Collapsable>\n            );\n        };\n\n        render() {\n            return (\n                <div>\n                    <div>\n                        <p>Modifying All Nodes</p>\n                    </div>\n                    {this.colorCollapse()}\n                    {this.sizeCollapse()}\n                    {this.shapeCollapse()}\n                </div>\n            );\n        }\n    }\n);\n","import { H3, Tab, Tabs } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport React from \"react\";\nimport ClusterPanel from \"./ClusterPanel\";\nimport EdgesPanel from \"./EdgesPanel\";\nimport LabelsPanel from \"./LabelsPanel\";\nimport NodesPanel from \"./NodesPanel\";\n\nexport default observer(\n    class RenderOptionsCard extends React.Component {\n        render() {\n            return (\n                <div>\n                    <H3>Graph Options</H3>\n                    <Tabs animate={true}>\n                        <Tab id=\"nodes\" title=\"Nodes\" panel={<NodesPanel />} />\n                        <Tab id=\"edges\" title=\"Edges\" panel={<EdgesPanel />} />\n                        <Tab\n                            id=\"labels\"\n                            title=\"Labels\"\n                            panel={<LabelsPanel />}\n                        />\n                        <Tab\n                            id=\"clusters\"\n                            title=\"Clusters\"\n                            panel={<ClusterPanel />}\n                        />\n\n                        <Tabs.Expander />\n                    </Tabs>\n                </div>\n            );\n        }\n    }\n);\n","import React from \"react\";\n\nimport {\n    Button,\n    Intent,\n    Classes,\n    H4,\n    RadioGroup,\n    Radio,\n    Text,\n    Card,\n} from \"@blueprintjs/core\";\nimport { Popover2, Tooltip2 } from \"@blueprintjs/popover2\";\nimport classnames from \"classnames\";\nimport State from \"../../../state\";\nimport { VisualizationMode } from \"../../../state/PreferencesStore\";\nimport { observer } from \"mobx-react\";\nimport ComponentRef from \"../../ComponentRef\";\nimport { getMessage } from \"./InteractionModePanel\";\nimport { handleStringChange } from \"../../utils/InputFormUtils\";\n\ninterface Props {\n    currentStep: 1 | 2 | 3;\n}\n\nexport default observer(\n    class ClusterSplittingPanelStack extends React.Component<Props, {}> {\n        titles = [\"Select Cluster\", \"Draw Line\", \"Confirm?\"];\n\n        renderFirstPanel = () => {\n            return (\n                <p>\n                    Select a <b>Cluster</b> to split by clicking it\n                </p>\n            );\n        };\n\n        renderSecondPanel = () => {\n            return (\n                <p>\n                    <RadioGroup\n                        label=\"Use the mouse to\"\n                        onChange={handleStringChange((value) => {\n                            if (value === \"straight\") {\n                                State.clusterInteraction.drawStraightLine = true;\n                            } else {\n                                State.clusterInteraction.drawStraightLine = false;\n                            }\n                        })}\n                        selectedValue={\n                            State.clusterInteraction.drawStraightLine\n                                ? \"straight\"\n                                : \"curve\"\n                        }\n                    >\n                        <Radio\n                            label=\"Draw a Freehand(Curved) Line\"\n                            value=\"curve\"\n                        />\n                        <Radio label=\"Draw a Straight Line\" value=\"straight\" />\n                    </RadioGroup>\n                    hold and draw a line to split this Cluster\n                </p>\n            );\n        };\n\n        renderThirdPanel = () => {\n            return (\n                <div>\n                    <H4>Confirm Splitting of Cluster? </H4>\n                    <div\n                        style={{\n                            display: \"flex\",\n                            justifyContent: \"space-between\",\n                        }}\n                    >\n                        <Button\n                            intent=\"primary\"\n                            small={true}\n                            onClick={() => {\n                                State.helper.clusterSplittingPanelStackOpen = false;\n                                State.clusterInteraction.splitCluster();\n                                State.preferences.visualizationMode =\n                                    VisualizationMode.Normal;\n                                State.helper.clusterSplittingCurrentStep = 1;\n                            }}\n                        >\n                            Confirm\n                        </Button>\n                    </div>\n                </div>\n            );\n        };\n\n        renderWhichPanel = () => {\n            switch (this.props.currentStep) {\n                case 1:\n                    return this.renderFirstPanel();\n                case 2:\n                    return this.renderSecondPanel();\n                case 3:\n                    return this.renderThirdPanel();\n            }\n        };\n\n        renderWhichBack = () => {\n            switch (this.props.currentStep) {\n                case 1:\n                    return <span />;\n                case 2:\n                    return (\n                        <Button\n                            className={Classes.PANEL_STACK_HEADER_BACK}\n                            icon=\"chevron-left\"\n                            minimal={true}\n                            onClick={() => {\n                                State.helper.clusterSplittingCurrentStep = 1;\n                            }}\n                            small={true}\n                            text={this.titles[0]}\n                            title={this.titles[0]}\n                        />\n                    );\n                case 3:\n                    return (\n                        <Button\n                            className={Classes.PANEL_STACK_HEADER_BACK}\n                            icon=\"chevron-left\"\n                            minimal={true}\n                            onClick={() => {\n                                State.helper.clusterSplittingCurrentStep = 2;\n                            }}\n                            small={true}\n                            text={this.titles[1]}\n                            title={this.titles[1]}\n                        />\n                    );\n            }\n        };\n\n        renderPanelStack = () => {\n            return (\n                <div\n                    className={Classes.PANEL_STACK_VIEW}\n                    style={{ position: \"unset\" }}\n                >\n                    <div style={{ minWidth: \"300px\", minHeight: \"100px\" }}>\n                        <div className={Classes.PANEL_STACK_HEADER}>\n                            {this.renderWhichBack()}\n                            <Text className={Classes.HEADING} ellipsize={true}>\n                                {this.titles[this.props.currentStep - 1]}\n                            </Text>\n                            <span />\n                        </div>\n                        <Card> {this.renderWhichPanel()}</Card>\n                    </div>\n                    <Button\n                        icon=\"cross\"\n                        style={{\n                            position: \"absolute\",\n                            top: -1,\n                            right: -1,\n                            zIndex: 99,\n                        }}\n                        minimal={true}\n                        onClick={() => {\n                            State.helper.clusterSplittingPanelStackOpen = false;\n                        }}\n                    />\n                </div>\n            );\n        };\n\n        render() {\n            return (\n                <Popover2\n                    placement=\"right\"\n                    usePortal={false}\n                    content={this.renderPanelStack()}\n                    isOpen={\n                        State.preferences.visualizationMode ===\n                            VisualizationMode.ClusterSplitting &&\n                        State.helper.clusterSplittingPanelStackOpen\n                    }\n                    onOpened={() => {\n                        State.helper.clusterSplittingCurrentStep = 1;\n                    }}\n                >\n                    <Tooltip2\n                        usePortal={false}\n                        content={getMessage(VisualizationMode.ClusterSplitting)}\n                        placement={\"bottom\"}\n                    >\n                        <Button\n                            className={classnames([\n                                Classes.BUTTON,\n                                Classes.MINIMAL,\n                            ])}\n                            intent={Intent.DANGER}\n                            text={VisualizationMode.ClusterSplitting}\n                            active={\n                                State.preferences.visualizationMode ===\n                                VisualizationMode.ClusterSplitting\n                            }\n                            onClick={() => {\n                                State.preferences.visualizationMode =\n                                    VisualizationMode.ClusterSplitting;\n\n                                State.helper.clusterSplittingPanelStackOpen = true;\n                            }}\n                        />\n                    </Tooltip2>\n                </Popover2>\n            );\n        }\n        componentDidMount = () => {\n            ComponentRef.clusterSplittingPanelStack = this;\n        };\n    }\n);\n","import React from \"react\";\n\nimport { Button, Intent, Classes, Card, Text } from \"@blueprintjs/core\";\nimport { Popover2, Tooltip2 } from \"@blueprintjs/popover2\";\nimport classnames from \"classnames\";\nimport State from \"../../../state\";\nimport { VisualizationMode } from \"../../../state/PreferencesStore\";\nimport { observer } from \"mobx-react\";\nimport { getMessage } from \"./InteractionModePanel\";\n\nexport default observer(\n    class NodeSelectionPanel extends React.Component {\n        private renderPanelStack = () => {\n            return (\n                <div\n                    className={Classes.PANEL_STACK_VIEW}\n                    style={{ position: \"unset\" }}\n                >\n                    <div style={{ minWidth: \"300px\", minHeight: \"100px\" }}>\n                        <div className={Classes.PANEL_STACK_HEADER}>\n                            <span />\n                            <Text className={Classes.HEADING} ellipsize={true}>\n                                Node Multi-Selection Mode\n                            </Text>\n                            <span />\n                        </div>\n                        <Card>\n                            <Button\n                                icon=\"select\"\n                                intent={\n                                    State.interaction.boxSelectionOpen\n                                        ? Intent.PRIMARY\n                                        : Intent.NONE\n                                }\n                                active={State.interaction.boxSelectionOpen}\n                                onClick={() =>\n                                    (State.interaction.boxSelectionOpen = !State\n                                        .interaction.boxSelectionOpen)\n                                }\n                            >\n                                Use Box-Selection\n                            </Button>\n                        </Card>\n                    </div>\n                    <Button\n                        icon=\"cross\"\n                        style={{\n                            position: \"absolute\",\n                            top: -1,\n                            right: -1,\n                            zIndex: 99,\n                        }}\n                        minimal={true}\n                        onClick={() => {\n                            State.helper.NodeSelectionPanelOpen = false;\n                        }}\n                    />\n                </div>\n            );\n        };\n\n        render() {\n            return (\n                <Popover2\n                    placement=\"right\"\n                    usePortal={false}\n                    content={this.renderPanelStack()}\n                    isOpen={\n                        State.preferences.visualizationMode ===\n                            VisualizationMode.NodeSelection &&\n                        State.helper.NodeSelectionPanelOpen\n                    }\n                >\n                    <Tooltip2\n                        usePortal={false}\n                        content={getMessage(VisualizationMode.NodeSelection)}\n                    >\n                        <Button\n                            className={classnames([\n                                Classes.BUTTON,\n                                Classes.MINIMAL,\n                            ])}\n                            intent={Intent.WARNING}\n                            text={VisualizationMode.NodeSelection}\n                            active={\n                                State.preferences.visualizationMode ===\n                                VisualizationMode.NodeSelection\n                            }\n                            onClick={() => {\n                                State.preferences.visualizationMode =\n                                    VisualizationMode.NodeSelection;\n\n                                State.helper.NodeSelectionPanelOpen = true;\n                            }}\n                        />\n                    </Tooltip2>\n                </Popover2>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Button, Classes, Intent } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../../state\";\nimport { VisualizationMode } from \"../../../state/PreferencesStore\";\nimport ClusterSplittingPanelStack from \"./ClusterSplittingPanelStack\";\nimport { Tooltip2 } from \"@blueprintjs/popover2\";\nimport NodeSelectionPanel from \"./NodeSelectionPanel\";\n\nexport function getMessage(mode: VisualizationMode): string {\n    switch (mode) {\n        case VisualizationMode.Normal:\n            return \"Normal Interaction Mode where mouse interactions on nodes and clusters are both activated\";\n\n        case VisualizationMode.NodeSelection:\n            return \"Select one or more nodes and interact with them, such as adding/deleting, merge them to a cluster, free them from a cluster\";\n\n        case VisualizationMode.ClusterSelection:\n            return \"Select one or more clusters and interact with them, such as merging and releasing them\";\n\n        case VisualizationMode.ClusterSplitting:\n            return \"Select one cluster and draw a line to split into two halfs\";\n    }\n}\n\nexport default observer(\n    class InteractionModePanel extends React.Component {\n        getIntent(mode: VisualizationMode): Intent {\n            switch (mode) {\n                case VisualizationMode.Normal:\n                    return Intent.PRIMARY;\n\n                case VisualizationMode.NodeSelection:\n                    return Intent.WARNING;\n\n                case VisualizationMode.ClusterSelection:\n                    return Intent.SUCCESS;\n\n                case VisualizationMode.ClusterSplitting:\n                    return Intent.DANGER;\n            }\n        }\n\n        renderMode(mode: VisualizationMode) {\n            return (\n                <Tooltip2 content={getMessage(mode)}>\n                    <Button\n                        className={classnames([\n                            Classes.BUTTON,\n                            Classes.MINIMAL,\n                        ])}\n                        text={mode}\n                        intent={this.getIntent(mode)}\n                        active={State.preferences.visualizationMode === mode}\n                        onClick={() => {\n                            State.preferences.visualizationMode = mode;\n                        }}\n                    />\n                </Tooltip2>\n            );\n        }\n\n        render() {\n            return (\n                <div className=\"selection-action-panel\">\n                    {this.renderMode(VisualizationMode.Normal)}\n                    <NodeSelectionPanel />\n                    {this.renderMode(VisualizationMode.ClusterSelection)}\n                    <ClusterSplittingPanelStack\n                        currentStep={State.helper.clusterSplittingCurrentStep}\n                    />\n                </div>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Classes, Menu, MenuDivider, MenuItem } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../state\";\nimport { computed, makeObservable } from \"mobx\";\n\ninterface Props {\n    /**\n     * what place this RightClick interaction is activated\n     *\n     * @type {(\"Node\" | \"Cluster\" | \"Background\")}\n     */\n    on: \"Node\" | \"Cluster\" | \"Background\";\n}\n\nexport default observer(\n    /**\n     * @description This component will be used when mouse right-clicked. There will be some operation choices on this panel.\n     * @author Zichen XU, Zhiyuan LYU\n     * @extends {React.Component}\n     */\n    class RightClickPanel extends React.Component<Props, {}> {\n        constructor(props: any) {\n            super(props);\n            makeObservable(this, {\n                stylePosition: computed,\n            });\n        }\n\n        get stylePosition() {\n            return {\n                top: State.preferences.rightClickPositionY + 10 + \"px\",\n                left: State.preferences.rightClickPositionX + 10 + \"px\",\n            };\n        }\n\n        formNewCluster() {\n            let date = new Date().toLocaleString(\"en\");\n            let newClusterAttributeValue: string = `Cluster Generated @ ${date}`;\n            if (!State.graph.metadata.nodeProperties.includes(\"new-cluster\")) {\n                State.graph.metadata.nodeProperties.push(\"new-cluster\");\n            }\n            if (!State.graph.metadata.nodeProperties.includes(\"new-cluster\")) {\n                State.graph.rawGraph.forEachNode((_, attributes) => {\n                    attributes[\"new-cluster\"] = \"\";\n                });\n            }\n            State.interaction.selectedNodes.forEach((nodeId) => {\n                State.graph.rawGraph.setNodeAttribute(\n                    nodeId,\n                    \"new-cluster\",\n                    newClusterAttributeValue\n                );\n            });\n            State.preferences.rightClickPanelOpen = false;\n            State.cluster.setCluster(\"new-cluster\");\n            State.interaction.flush();\n        }\n\n        releaseFromCluster() {\n            const clusterName = State.cluster.clusterBy as string;\n            State.interaction.selectedNodes.forEach((nodeId) => {\n                State.graph.rawGraph.setNodeAttribute(nodeId, clusterName, \"\");\n            });\n            State.preferences.rightClickPanelOpen = false;\n            State.cluster.setCluster(State.cluster.clusterBy, true);\n            State.interaction.flush();\n        }\n\n        renderNodeMenu() {\n            return (\n                <Menu\n                    className={classnames(\n                        Classes.ELEVATION_1,\n                        \"right-click-panel\"\n                    )}\n                    style={this.stylePosition}\n                >\n                    <MenuDivider\n                        title={\n                            (\"Node ID: \" +\n                                State.interaction.selectedNode) as string\n                        }\n                    />\n                    <MenuItem\n                        icon=\"graph-remove\"\n                        text=\"Delete Node\"\n                        onClick={() => {\n                            State.graph.mutating.dropNode(\n                                State.interaction.selectedNode as string\n                            );\n                            State.interaction.flush();\n                            State.preferences.rightClickPanelOpen = false;\n                        }}\n                    />\n                    <MenuDivider />\n                    <MenuItem\n                        icon=\"inner-join\"\n                        text=\"Form a New Cluster\"\n                        onClick={this.formNewCluster}\n                        disabled={State.interaction.selectedNodes.length === 0}\n                    />\n                    <MenuItem\n                        icon=\"ungroup-objects\"\n                        text=\"Release from Cluster\"\n                        onClick={this.releaseFromCluster}\n                        disabled={State.interaction.selectedNodes.length === 0}\n                    />\n                    <MenuItem\n                        icon=\"eraser\"\n                        text=\"Cancel Selection\"\n                        onClick={() => {\n                            State.interaction.flush();\n                            State.preferences.rightClickPanelOpen = false;\n                        }}\n                        disabled={State.interaction.selectedNodes.length === 0}\n                    />\n                    <MenuItem\n                        icon=\"graph-remove\"\n                        text=\"Delete Selected Nodes\"\n                        onClick={() => {\n                            State.interaction.selectedNodes.forEach((node) => {\n                                State.graph.mutating.dropNode(node);\n                            });\n                            State.interaction.flush();\n                            State.preferences.rightClickPanelOpen = false;\n                        }}\n                    />\n                    <MenuDivider />\n                    <MenuItem\n                        icon=\"new-link\"\n                        text=\"Add Edge\"\n                        onClick={() => {\n                            State.preferences.AddEdgeDialogOpen = true;\n                            State.interaction.flush();\n                            State.preferences.rightClickPanelOpen = false;\n                        }}\n                    />\n                    <MenuItem\n                        icon=\"cross\"\n                        text=\"Delete Edge\"\n                        onClick={() => {\n                            State.preferences.deleteEdgePanelOpen = true;\n                            State.preferences.rightClickPanelOpen = false;\n                        }}\n                    />\n                </Menu>\n            );\n        }\n\n        renderClusterMenu() {\n            return (\n                <Menu\n                    className={classnames(\n                        Classes.ELEVATION_1,\n                        \"right-click-panel\"\n                    )}\n                    style={this.stylePosition}\n                >\n                    <MenuItem\n                        icon=\"group-objects\"\n                        text=\"Merge Cluster\"\n                        onClick={() => {\n                            State.clusterInteraction.mergeSelectedClusters();\n                            State.preferences.rightClickPanelOpen = false;\n                        }}\n                    />\n                    <MenuItem\n                        icon=\"group-objects\"\n                        text=\"Release Cluster\"\n                        onClick={() => {\n                            State.clusterInteraction.releaseSelectedClusters();\n                            State.preferences.rightClickPanelOpen = false;\n                        }}\n                    />\n                </Menu>\n            );\n        }\n\n        renderBackgroundMenu() {\n            return (\n                <Menu\n                    className={classnames(\n                        Classes.ELEVATION_1,\n                        \"right-click-panel\"\n                    )}\n                    style={this.stylePosition}\n                >\n                    <MenuItem\n                        icon=\"new-object\"\n                        text=\"Add Node\"\n                        onClick={() => {\n                            State.preferences.AddNodeDialogOpen = true;\n                            State.preferences.rightClickPanelOpen = false;\n                        }}\n                    />\n                    <MenuDivider />\n                </Menu>\n            );\n        }\n\n        render() {\n            if (this.props.on === \"Node\") {\n                return this.renderNodeMenu();\n            } else if (this.props.on === \"Cluster\") {\n                return this.renderClusterMenu();\n            } else if (this.props.on === \"Background\") {\n                return this.renderBackgroundMenu();\n            }\n        }\n    }\n);\n","import React from \"react\";\nimport { Button, Card, Elevation } from \"@blueprintjs/core\";\nimport classnames from \"classnames\";\nimport { observer } from \"mobx-react\";\nimport State from \"../state\";\nimport NodeDetailPanel from \"./panels/NodeDetailPanel\";\nimport MultiDetailPanel from \"./panels/MultiDetailPanel\";\nimport DeleteEdgeInteractionPanel from \"./panels/DeleteEdgeInteractionPanel\";\nimport GraphOptionsCard from \"./panels/GraphOptionsCard\";\nimport InteractionModePanel from \"./panels/InteractionModePanel/InteractionModePanel\";\nimport RightClickPanel from \"./panels/RightClickPanel\";\n\nexport default observer(\n    class FloatingCards extends React.Component {\n        optionsVisible = {\n            left: \"0em\",\n        };\n        optionsInvisible = {\n            left: \"-2200em\",\n        };\n        sideButtonVis = {\n            marginLeft: \"50px\",\n        };\n        sideButtonInv = {\n            marginLeft: \"-15px\",\n        };\n        toggleOptions = () => {\n            State.preferences.graphOptionsCardOpen = !State.preferences\n                .graphOptionsCardOpen;\n        };\n        render() {\n            return (\n                <div className=\"floating-overlay\">\n                    <div className=\"left-cards\">\n                        <Card\n                            elevation={Elevation.TWO}\n                            className={classnames(\n                                \"overlay-card\",\n                                \"transparent-frame\",\n                                \"left-cards\"\n                            )}\n                            style={\n                                State.preferences.graphOptionsCardOpen\n                                    ? this.optionsVisible\n                                    : this.optionsInvisible\n                            }\n                        >\n                            <br />\n                            <Button\n                                className=\"openbtn2\"\n                                icon=\"chevron-left\"\n                                onClick={this.toggleOptions}\n                            />\n                            <br />\n                            <GraphOptionsCard />\n                        </Card>\n                        <Card\n                            elevation={Elevation.TWO}\n                            className={classnames(\n                                \"overlay-card\",\n                                \"transparent-frame\"\n                            )}\n                            style={{\n                                width: \"1em\",\n                                paddingTop: \"1em\",\n                                paddingRight: \"0.7em\",\n                                paddingBottom: \"0.5em\",\n                                marginLeft: \"-5.4em\",\n                            }}\n                        >\n                            <Button\n                                icon=\"more\"\n                                className=\"openbtn\"\n                                onClick={this.toggleOptions}\n                                style={\n                                    State.preferences.graphOptionsCardOpen\n                                        ? this.sideButtonInv\n                                        : this.sideButtonVis\n                                }\n                            />\n                        </Card>\n                    </div>\n\n                    {/* single selected */}\n                    {/* {State.graph.selectedNodes.length === 1 && (\n                        <NodeDetail node={State.graph.currentlyHoveredId} />\n                    )} */}\n                    {State.interaction.currentlyHoveredNodeId &&\n                        State.interaction.selectedNodes.length === 0 && (\n                            <NodeDetailPanel\n                                onNode={\n                                    State.interaction.currentlyHoveredNodeId\n                                }\n                            />\n                        )}\n\n                    {/* multiple selected */}\n                    {/* {State.graph.selectedNodes.length !== 1 && State.graph.currentlyHovered && (\n                        <NodeDetail node={State.graph.currentlyHovered.data.ref} />\n                    )} */}\n                    {State.interaction.selectedNodes.length !== 0 && (\n                        <MultiDetailPanel />\n                    )}\n\n                    {State.preferences.rightClickPanelOpen &&\n                        State.preferences.rightClickOn && (\n                            <RightClickPanel\n                                on={State.preferences.rightClickOn}\n                            />\n                        )}\n                    {State.preferences.deleteEdgePanelOpen &&\n                        State.interaction.selectedNode && (\n                            <DeleteEdgeInteractionPanel\n                                onNode={State.interaction.selectedNode}\n                            />\n                        )}\n                    <InteractionModePanel />\n                </div>\n            );\n        }\n    }\n);\n","import classnames from \"classnames\";\nimport { Classes } from \"@blueprintjs/core\";\nimport Navbar from \"./components/Navbar\";\nimport Dialogs from \"./components/Dialogs\";\nimport ThreeJSVis from \"./components/visualize/Visualizer\";\n// import NodeDetail from \"./components/panels/NodeDetailPanel\";\n// import State from \"./state\";\n// import EdgesPanel from \"./components/panels/EdgesPanel\";\n// import LabelsPanel from \"./components/panels/LabelsPanel\";\n// import SelectionPanel from \"./components/panels/SelectionPanel\";\n// import GlobalPanel from \"./components/panels/GlobalPanel\";\n// import NodesPanel from \"./components/panels/NodesPanel\";\nimport FloatingCards from \"./components/FloatingCards\";\n\nfunction App() {\n    return (\n        <div\n            className={classnames({\n                \"app-wrapper\": true,\n                [Classes.DARK]: true,\n            })}\n        >\n            <Navbar />\n            <main className=\"main\">\n                <ThreeJSVis />\n            </main>\n            <FloatingCards />\n            <Dialogs />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/table/lib/css/table.css\";\nimport \"@blueprintjs/select/lib/css/blueprint-select.css\";\nimport \"@blueprintjs/popover2/lib/css/blueprint-popover2.css\";\nimport \"normalize.css\";\nimport \"./App.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}