{"version":3,"sources":["state/PreferencesStore.ts","state/Cluster3dObjectStore.ts","state/GraphDelegate.ts","components/ComponentRef.tsx","state/GraphMutation.ts","state/GraphStore.ts","state/ImportStore.ts","state/SearchStore.ts","state/ClusterStore.ts","state/CssStore.ts","state/NodeInteractionStore.ts","state/ClusterInteractionStore.ts","state/HelperStackPanelStore.ts","state/index.ts","components/utils/ClusterChooser.tsx","images/logo.png","components/utils/SimpleSelect.tsx","components/Navbar.tsx","components/dialogs/importDialog.tsx","components/dialogs/ExportDialog.tsx","components/utils/DataSheetDialogWrapper.tsx","components/utils/InputFormUtils.ts","components/dialogs/NodeDataSheetDialog.tsx","components/utils/NodeChooser.tsx","components/dialogs/EdgeDataSheetDialog.tsx","components/utils/NodeAdder.tsx","components/dialogs/AddNodeDialog.tsx","components/dialogs/AddEdgeDialog.tsx","components/dialogs/ImportGEXFDialog.tsx","components/Dialogs.tsx","components/SelectionBox.tsx","state/utils/MouseEventUtils.ts","components/panels/CanvasDrawPanel.tsx","components/visualize/Visualizer.tsx","components/panels/NodeDetailPanel.tsx","components/panels/MultiDetailPanel.tsx","components/panels/SearchPanel.tsx","components/panels/DeleteEdgeInteractionPanel.tsx","components/utils/Collapsable.tsx","components/panels/ClusterPanel.tsx","components/utils/ColorPicker.tsx","components/panels/EdgesPanel.tsx","components/panels/LabelsPanel.tsx","components/panels/NodesPanel.tsx","components/panels/GraphOptionsCard.tsx","components/panels/InteractionModePanel/ClusterSplittingPanelStack.tsx","components/panels/InteractionModePanel/NodeSelectionPanel.tsx","components/panels/InteractionModePanel/InteractionModePanel.tsx","components/panels/RightClickPanel.tsx","components/FloatingCards.tsx","App.js","reportWebVitals.js","index.js"],"names":["VisualizationMode","PreferencesStore","rightClickPositionX","rightClickPositionY","exportDialogOpen","preferenceDialogOpen","statisticsDialogOpen","AddNodeDialogOpen","AddEdgeDialogOpen","nodeDataSheetDialogOpen","edgeDataSheetDialogOpen","rightClickOn","rightClickPanelOpen","deleteEdgePanelOpen","graphOptionsCardOpen","view","controlType","visualizationMode","Normal","makeAutoObservable","this","except","Cluster3dObjectStore","threeScene","fusionClusterObjects","clusterObjectsMap","UUID2ClusterValueMap","remove","dispose","State","cluster","clusterBy","Map","initialMap","attributePoints","forEach","value","key","set","createMesh","THREE","add","convexHullObjects","initEmptyMapAndFusion","mesh","geometry","copy","convexHullObject","uuid","res","children","every","item","material","newMap","points","get","css","shape","length","ConvexGeometry","Array","from","convexGeometry","computeBoundingSphere","sphereGeo","boundingSphere","sphere","SphereGeometry","radius","resolution","translate","center","x","y","z","geom","name","meshMaterial","color","attributeColor","transparent","opacity","side","depthWrite","oldOpacity","setTimeout","_object","meshId","clusterInteraction","currentlyHoveredClusterId","selectedClusters","includes","meshSelectedMaterial","meshNormalMaterial","meshHighlightMaterial","createCustomNodeObject","_id","_cluster","id","hovered","selected","multiSelected","isClusterNode","createCustomLinkObject","_source","_target","source","target","isClusterLink","GraphDelegate","graphDelegateMethods","clusterObject","_graphDelegateMethods","scene","newGraph","graph","rawGraph","addInvisibleClusterNode","decorateRawGraph","tempGraph","nodes","links","forEachNode","node","attributes","push","forEachEdge","edge","oldGraph","graphCopy","names","index","getAttributeValues","attribute","clusterID","addNode","_visualize","attributeKeys","addEdgeWithKey","nodeObject","linkObject","nodeId","distance","getNodeAttribute","distRatio","Math","hypot","cameraPosition","d3Force","link","clusterForce","normalForce","d3ReheatSimulation","ComponentRef","nodeDetail","multiNodeDetail","visualizer","canvasDrawPanel","clusterSplittingPanelStack","_instance","instance","reaction","interaction","currentlyHoveredNodeId","forceUpdate","GraphMutation","_this","that","newAttributes","hasOwnProperty","decorateRawNode","refreshGraph","dropNode","decorateRawEdge","addEdge","dropEdge","GraphStore","Graph","allowSelfLoops","multi","type","numberOfClusters","mutating","metadata","snapshotName","nodeProperties","_rawGraph","_metadata","flush","updateVisualizationGraph","ImportStore","isLoading","edgeFileName","nodeFileName","gexfFileName","importDialogOpen","importGEXFDialogOpen","selectedEdgeFileFromInput","selectedNodeFileFromInput","selectedGEXFFileFromInput","importConfig","hasNodeFile","nodeFile","isReady","parseError","path","hasHeader","topN","columns","mapping","delimiter","edgeFile","fromId","toId","fileObject","file","reader","FileReader","readAsText","Promise","resolve","reject","onload","content","result","replace","parse","comment","trim","auto_parse","skip_empty_lines","undefined","err","Toaster","create","position","Position","TOP","show","message","intent","Intent","DANGER","timeout","gexf","readCSV","config","fromColumn","parseInt","toColumn","tempNodes","readNodeCSV","toString","Object","assign","readEdgeCSV","idx","hasNode","keys","readGEXF","entries","getNodeAttributes","edgeFileConfig","fileAsString","lines","split","topLinesAsString","map","l","slice","join","console","log","it","onerror","error","action","onClick","window","location","reload","text","nodeFileConfig","SearchStore","isPreviewing","searchStr","observable","ref","list","searchStrIgnoreCase","toLocaleLowerCase","match","searchId","searchQuery","searchAttr","searchValue","ClusterStore","to","setCluster","graphDelegate","setAttribute","keyValueMap","Set","keyAttribute","values","attributeKeysMap","colors","randomcolor","seed","count","NodeGlobalConfig","defaultColor","selectedColor","multiSelectedColor","highlightColor","size","EdgeGlobalConfig","defaultWidth","highlightWidth","LabelConfig","ClusterConfig","CssStore","label","isAnimating","InteractionStore","selectedNode","selectedNodes","selectedEdge","selectedEdges","boxSelectionOpen","boxSelection_startPoint","boxSelection_endPoint","left","min","top","right","max","down","Attributes","coords","graph2ScreenCoords","neighbors","getNodeNeighborEdges","neighbor","getEdgeKey","node1","node2","go","back","oldAttributeVisualize","updateVisualizeAttributeParser","getEdgeAttribute","newAttribute","oldAttributes","ClusterInteractionStore","selectedCluster","drawPanelActivate","lineSegment","confirmClusterSplittingTempData","event","meshSpotlightMaterial","getObjectById","indexOf","splice","preferences","closeAllPanel","date","Date","toLocaleString","clusterId","_","clusterValue","setNodeAttribute","screenCoords","coord","tempLineSegment","polygonContains","updateNodeVisualizeAttribute","refresh","anotherClusterId","thisCluster","nodesToAlter","HelperStackPanelStore","clusterSplittingPanelStackOpen","clusterSplittingCurrentStep","NodeSelectionPanelOpen","AppState","import","search","helper","NodeInteractionStore","privateConstructor","_state","autorun","renderImportEdgePreview","renderImportNodePreview","resumeAnimation","pauseAnimation","ClusterSplitting","step","clearDrawing","order","number","fireImmediately","updateAllMaterials","currentlyHoveredNodeNeighborEdges","updateEdgeVisualizeAttribute","observer","itemRenderer","props","handleClick","propertiesWithNone","unshift","items","showNone","fullProperties","filterable","onItemSelect","onSelect","syncWith","React","Component","defaultProps","CommonItemRenderer","itemPredicate","query","object","toLowerCase","noResults","disabled","small","className","classnames","Classes","NAVBAR","NAVBAR_GROUP","ALIGN_LEFT","title","src","logo","width","height","alt","NAVBAR_HEADING","icon","BOTTOM","BUTTON","MINIMAL","style","marginTop","marginLeft","checked","onChange","ALIGN_RIGHT","marginRight","NAVBAR_DIVIDER","open","PreviewTable","renderWrapper","numRows","selectedRegions","rows","cols","cellRenderer","i","multiDialogRef","createRef","state","canImport","renderNodesSelection","onInputChange","files","renderEdgesSelection","importedNodes","importedEdges","closeDialog","finalButtonProps","importGraphFromCSV","then","setGraph","hasAttribute","getAttribute","newDelimiter","setState","isOpen","onClose","panel","DIALOG_BODY","justifyContent","alignItems","display","maxWidth","renderDelimiterSelection","large","ready","_node","_edge","write","headers","exportData","export","data","edges","interactive","elevation","Elevation","ONE","minimal","computeGEXFFile","filename","computeNodeFile","separator","computeEdgeFile","loading","loadingOptions","TableLoadingOption","CELLS","COLUMN_HEADERS","ROW_HEADERS","for","onOpened","minWidth","renderTable","handleStringChange","handler","stringifyNodeDetail","parseNumberOrString","numberVal","Number","isNaN","GraphNodeTable","filterQuery","addNodeDialogOpen","deleteAlertOpen","nodeToDelete","renderColumns","rowIndex","columnIndex","renderCell","filter","element","cell","filteredTable","newVal","setValue","onConfirm","tooltip","deleteNodeRenderer","deleteNodeAlert","cancelButtonText","confirmButtonText","onCancel","textAlign","newTable","asyncControl","leftIcon","placeholder","fill","defaultRowHeight","SUCCESS","select","labelFor","labelInfo","rightIcon","GraphEdgeTable","addEdgeDialogOpen","edgeToDelete","chosenSource","chosenTarget","deleteEdgeRenderer","deleteEdgeAlert","addEdgeDialog","onClosed","DIALOG_FOOTER","DIALOG_FOOTER_ACTIONS","PRIMARY","hasEdge","renderMode","RenderMode","NONE","newNodeId","canImportTag","renderAttributesForm","newValue","componentDidMount","prop","autoFocus","rightElement","onAdded","fileIsSelect","DISABLED","importGraphFromGEXF","CONTROL_GROUP","INPUT_GROUP","FILL","renderImportButton","Dialogs","boxStyle","startPoint","endPoint","mouseDown","onMouseDownCallback","startpoint","clientX","clientY","onMouseMoveCallback","_calculateSelectionBox","onMouseUpCallback","boxSelectNode","abs","onMouseDown","onMouseMove","onMouseUp","onDocumentLeftClick","ReactDOM","findDOMNode","box","getBoundingClientRect","vector","camera","unproject","intersects","sub","normalize","intersectObjects","clusterLeftClickCallback","onDocumentRightClick","clusterRightClickCallback","onDocumentMouseMove","clusterHoverCallback","canvasRef","current","exportDrawing","canvas","canvasHeight","canvasWidth","lazyRadius","brushRadius","brushColor","catenaryColor","JSON","canvasMethods","getSaveData","drawPoints","reverse","computeSplitCluster","clear","visualizationGraph","nodePointerInteraction","graphRef","hoverNodeCallback","previousNode","nodeLeftClickCallback","NodeSelection","nodeRightClickCallback","backgroundClickCallback","backgroundRightClickCallback","renderGraph","graphData","nodeLabel","nodeRelSize","nodeColor","computeNodeColor","nodeVisibility","nodeResolution","nodeThreeObjectExtend","nodeThreeObject","sprite","SpriteText","textHeight","visible","backgroundColor","translateX","onNodeHover","onNodeClick","onNodeRightClick","onNodeDragEnd","fx","fy","fz","linkVisibility","linkWidth","computeEdgeWidth","linkColor","computeEdgeColor","onBackgroundRightClick","onBackgroundClick","enablePointerInteraction","onEngineTick","clusterDelegation","document","addEventListener","CustomMouseEvent","removeEventListener","mountDelegateMethods","graphMethods","clusterInteractionListener","ClusterSelection","cellRenderer_property","cellRenderer_value","onNode","formatLongFloat","nodeAttributeValue","num","parseFloat","toPrecision","CARD","enableRowHeader","renderSearchResults","candidates","onMouseOver","cameraFocusOn","onMouseLeave","targetNode","neighborsRenderer","onMouseEnter","LARGE","onToggle","shapeOptionOpen","forceOptionOpen","forceCollapse","Collapsable","stepSize","labelStepSize","updateClusterForce","shapeCollapse","float","interactionKind","PopoverInteractionKind","CLICK","popoverClassName","RIGHT","sizeOptionOpen","thicknessOptionOpen","colorOptionOpen","hex","timeOutRef","colorCollapse","sizeCollapse","animate","Expander","allPanelStacks","component","splitCluster","CustomPanel","panelNumber","firstPanel","renderPanel","secondPanel","thirdPanel","renderPanelStack","initialPanel","stack","currentPanelStack","placement","usePortal","active","handleChange","selectedValue","WARNING","mode","getIntent","currentStep","makeObservable","stylePosition","computed","ELEVATION_1","formNewCluster","mergeSelectedCluster","on","renderNodeMenu","renderClusterMenu","renderBackgroundMenu","optionsVisible","optionsInvisible","sideButtonVis","sideButtonInv","toggleOptions","ELEVATION_2","GraphOptionsCard","paddingTop","paddingRight","paddingBottom","NodeDetailPanel","MultiDetailPanel","App","DARK","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c9c3a826.chunk.js","sourcesContent":["import { makeAutoObservable } from \"mobx\";\n\nexport enum VisualizationMode {\n    Normal = \"Normal\", // normal state\n    ClusterSelection = \"Cluster Selection\", // selecting the cluster to be Merged\n    NodeSelection = \"Node Selection\", // multi-selecting the node\n    ClusterSplitting = \"Cluster Splitting\", // drawing the line to split the cluster\n}\n\nexport default class PreferencesStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    // Right Click Position\n\n    rightClickPositionX = 30;\n    rightClickPositionY = 30;\n\n    // Dialog\n    exportDialogOpen = false;\n    preferenceDialogOpen = false;\n    statisticsDialogOpen = false;\n\n    AddNodeDialogOpen = false;\n    AddEdgeDialogOpen = false;\n\n    nodeDataSheetDialogOpen = false;\n    edgeDataSheetDialogOpen = false;\n\n    // Panel\n\n    rightClickOn = null as null | \"Node\" | \"Cluster\" | \"Background\";\n    rightClickPanelOpen = false;\n    deleteEdgePanelOpen = false;\n\n    graphOptionsCardOpen = false;\n\n    closeAllPanel(except?: string) {\n        this.deleteEdgePanelOpen = false;\n        this.graphOptionsCardOpen = false;\n        if (except !== \"rightClickPanel\") {\n            this.rightClickPanelOpen = false;\n        }\n    }\n\n    // 3D Graph\n\n    view = \"3D\";\n    controlType: \"trackball\" | \"orbit\" | \"fly\" = \"trackball\";\n\n    visualizationMode: VisualizationMode = VisualizationMode.Normal;\n}\n","import { makeAutoObservable } from \"mobx\";\nimport * as THREE from \"three\";\nimport { SphereGeometry } from \"three\";\nimport { ConvexGeometry } from \"three/examples/jsm/geometries/ConvexGeometry\";\nimport State from \".\";\n\nexport default class Cluster3dObjectStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    /**\n     * the THREE.js WebGL Scene of the visualization\n     *\n     */\n    threeScene!: THREE.Scene;\n\n    /**\n     * all the clusters should form a 3D Group to be imported into Scene\n     * if no cluster attribute is set, this will be set to null\n     *\n     * each children is a THREE.Mesh\n     *\n     * @type {THREE.Group}\n     */\n    fusionClusterObjects: THREE.Group | null = null;\n\n    /**\n     * the map between attribute value and its corresponding Mesh Group\n     * if you want to update the geometry, plz update all the children inside which Mesh Group\n     * if no cluster attribute is set, this will be set to null\n     *\n     * @type {(Map<string | number, THREE.Group> | null)}\n     */\n    clusterObjectsMap: Map<string | number, THREE.Mesh> | null = null;\n\n    /**\n     * create empty BufferGeometry and mesh with colour\n     * then initialize $fusionClusterObjects and $clusterObjectsMap with it\n     * and then add the THREE.Group to the Scene\n     *\n     */\n    initEmptyMapAndFusion() {\n        if (this.fusionClusterObjects) {\n            this.threeScene.remove(this.fusionClusterObjects);\n            this.dispose();\n        }\n        if (State.cluster.clusterBy === null) {\n            return;\n        }\n        this.UUID2ClusterValueMap = new Map<string, string | number>();\n        let initialMap = new Map<string | number, THREE.Mesh>();\n        State.cluster.attributePoints.forEach((value, key) => {\n            initialMap.set(\n                key,\n                this.createMesh(new THREE.BufferGeometry(), key)\n            );\n        });\n\n        this.clusterObjectsMap = initialMap;\n        this.fusionClusterObjects = new THREE.Group();\n        initialMap.forEach((value) => {\n            this.fusionClusterObjects?.add(value);\n        });\n        this.threeScene.add(this.fusionClusterObjects);\n    }\n\n    /**\n     * should be called on each render frame\n     * will update the geometry inside each cluster object\n     *\n     * if is the first time (both are null), will run initEmptyMapAndFusion() first\n     *\n     * if meet with clusterBy == null, will dispose all Object3d\n     *\n     */\n    clusterDelegation() {\n        if (State.cluster.clusterBy === null) {\n            return;\n        } else {\n            if (\n                this.fusionClusterObjects == null ||\n                this.convexHullObjects == null\n            ) {\n                this.initEmptyMapAndFusion();\n            }\n            this.clusterObjectsMap?.forEach(\n                (mesh: THREE.Mesh, key: string | number) => {\n                    mesh.geometry.copy(this.convexHullObject(key));\n                }\n            );\n        }\n    }\n\n    getObjectById(uuid: string): THREE.Mesh | null {\n        let res: THREE.Object3D | null = null;\n        this.fusionClusterObjects?.children.every((item: THREE.Object3D) => {\n            if (item.uuid === uuid) {\n                res = item;\n                return false;\n            } else {\n                return true;\n            }\n        });\n        return res;\n    }\n\n    /**\n     * dispose the geometries and materials in every clusterObject\n     * and set these props to be null, which indicates that no additional 3d object is added into Scene\n     *\n     */\n    dispose() {\n        this.clusterObjectsMap?.forEach((mesh: THREE.Mesh) => {\n            let material = mesh.material as THREE.Material;\n            material.dispose();\n            mesh.geometry.dispose();\n        });\n        this.clusterObjectsMap = null;\n        this.fusionClusterObjects = null;\n        this.UUID2ClusterValueMap = new Map<string, string | number>();\n    }\n\n    /**\n     * the map between the value of the cluster and the BufferGeometry that this cluster created\n     *\n     * @readonly\n     * @type {(Map<string | number, THREE.Group>)}\n     */\n    get convexHullObjects(): Map<string | number, THREE.BufferGeometry> {\n        let newMap = new Map<string | number, THREE.BufferGeometry>();\n        State.cluster.attributePoints.forEach((value, key) => {\n            newMap.set(key, this.convexHullObject(key));\n        });\n        return newMap;\n    }\n\n    /**\n     * get the computed convexHull BufferGeometry of the specified attribute value\n     *\n     * @param {(string | number)} key\n     * @returns {*}  {THREE.BufferGeometry}\n     */\n    convexHullObject(key: string | number): THREE.BufferGeometry {\n        let points = State.cluster.attributePoints.get(key) as THREE.Vector3[];\n        if (State.css.cluster.shape === \"convexHull\") {\n            if (!points || points.length < 4) {\n                return new THREE.BufferGeometry();\n            } else {\n                return new ConvexGeometry(Array.from(points));\n            }\n        } else {\n            // State.css.clusterShape === \"Sphere\"\n            let convexGeometry = new ConvexGeometry(Array.from(points));\n            convexGeometry.computeBoundingSphere();\n            let sphereGeo = convexGeometry.boundingSphere as THREE.Sphere;\n            let sphere = new SphereGeometry(\n                sphereGeo.radius,\n                State.css.cluster.resolution,\n                State.css.cluster.resolution\n            );\n            sphere.translate(\n                sphereGeo.center.x,\n                sphereGeo.center.y,\n                sphereGeo.center.z\n            );\n            return sphere;\n        }\n    }\n\n    /**\n     * create a Three.Group, which contains 2 Three.Mesh, of the input geometry\n     *\n     * @private\n     * @param {THREE.BufferGeometry} geom\n     * @param {(string | number)} name\n     * @returns {*}  {THREE.Group}\n     *\n     * @see THREE.Mesh\n     */\n    private createMesh(\n        geom: THREE.BufferGeometry,\n        name: string | number\n    ): THREE.Mesh {\n        const meshMaterial = new THREE.MeshBasicMaterial({\n            color: State.cluster.attributeColor.get(name),\n            transparent: true,\n            opacity: 0.15,\n        });\n        meshMaterial.side = THREE.DoubleSide; //将材质设置成正面反面都可见\n        meshMaterial.depthWrite = false;\n\n        let mesh = new THREE.Mesh(geom, meshMaterial);\n        this.UUID2ClusterValueMap.set(mesh.uuid, name);\n        mesh.name = \"THREE_CLUSTER_\" + name;\n        return mesh;\n    }\n\n    UUID2ClusterValueMap!: Map<string, string | number>;\n\n    meshSpotlightMaterial(mesh: THREE.Mesh) {\n        let material = mesh.material as THREE.Material;\n        const oldOpacity = material.opacity;\n        material.opacity = 0.7;\n        setTimeout(() => {\n            material.opacity = oldOpacity;\n        }, 100);\n    }\n\n    private static meshHighlightMaterial(mesh: THREE.Mesh) {\n        let material = mesh.material as THREE.Material;\n        material.opacity = 0.5;\n    }\n\n    private static meshSelectedMaterial(mesh: THREE.Mesh) {\n        let material = mesh.material as THREE.Material;\n        material.opacity = 0.3;\n    }\n\n    private static meshNormalMaterial(mesh: THREE.Mesh) {\n        let material = mesh.material as THREE.Material;\n        material.opacity = 0.15;\n    }\n\n    updateAllMaterials() {\n        this.fusionClusterObjects?.children.forEach((_object) => {\n            let mesh = _object as THREE.Mesh;\n            const meshId = mesh.uuid;\n            if (State.clusterInteraction.currentlyHoveredClusterId === meshId) {\n                Cluster3dObjectStore.meshHighlightMaterial(mesh);\n                return;\n            } else if (\n                State.clusterInteraction.selectedClusters.includes(meshId)\n            ) {\n                Cluster3dObjectStore.meshSelectedMaterial(mesh);\n                return;\n            } else {\n                Cluster3dObjectStore.meshNormalMaterial(mesh);\n            }\n        });\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\nimport Graph from \"graphology\";\nimport State from \".\";\nimport { ForceGraphMethods, LinkObject, NodeObject } from \"react-force-graph-3d\";\nimport Cluster3dObjectStore from \"./Cluster3dObjectStore\";\n\n/**\n * hovered: false, selected: false: DefaultColor;\n * hovered: false, selected: true: SelectedColor;\n * hovered: true, selected: false: HighlightColor;\n * hovered: true, selected: true: HighlightColor;\n *\n *\n * @interface ICustomNodeObject\n * @extends {NodeObject}\n */\nexport interface ICustomNodeObject extends NodeObject {\n    hovered: boolean;\n    selected: boolean;\n    multiSelected: boolean;\n    isClusterNode?: boolean;\n}\n/**\n * hovered: false, selected: false: DefaultColor;\n * hovered: false, selected: true: SelectedColor;\n * hovered: true, selected: false: HighlightColor;\n * hovered: true, selected: true: HighlightColor;\n *\n *\n * @interface ICustomLinkObject\n * @extends {LinkObject}\n */\nexport interface ICustomLinkObject extends LinkObject {\n    hovered: boolean;\n    selected: boolean;\n    isClusterLink?: boolean;\n}\n\nexport function createCustomNodeObject(\n    _id: string,\n    _cluster: boolean = false\n): ICustomNodeObject {\n    return {\n        id: _id,\n        hovered: false,\n        selected: false,\n        multiSelected: false,\n        isClusterNode: _cluster,\n    };\n}\n\nexport function createCustomLinkObject(\n    _source: string,\n    _target: string,\n    _cluster: boolean = false\n): ICustomLinkObject {\n    return {\n        source: _source,\n        target: _target,\n        hovered: false,\n        selected: false,\n        isClusterLink: _cluster,\n    };\n}\n\nexport default class GraphDelegate {\n    constructor() {\n        makeAutoObservable(this);\n        this.clusterObject = new Cluster3dObjectStore();\n    }\n\n    /**\n     * assign the force-graph methods to this class\n     * should be called as long as the visualizer react component is mounted\n     *\n     * @param {ForceGraphMethods} _graphDelegateMethods\n     */\n    mountDelegateMethods(_graphDelegateMethods: ForceGraphMethods) {\n        this.graphDelegateMethods = _graphDelegateMethods;\n        this.clusterObject.threeScene = this.graphDelegateMethods.scene();\n    }\n\n    /**\n     * the ForceGraphMethods exposed by the visualization force-graph\n     *\n     * @see ForceGraphMethods\n     *\n     * @type {ForceGraphMethods}\n     */\n    graphDelegateMethods!: ForceGraphMethods;\n\n    /**\n     * compute the delegate graph that will be used by the ForceGraph3D\n     * will add invisible cluster nodes and edges to balance the clustered graph and adjust force\n     * the NodeObject and LinkObject inside attributes (named _visualize) will be used.\n     *\n     * nodes and edges with the show=false will be ignored in this case\n     *\n     */\n\n    visualizationGraph() {\n        let newGraph: Graph;\n        if (State.cluster.clusterBy === null) {\n            newGraph = State.graph.rawGraph;\n        } else {\n            newGraph = this.addInvisibleClusterNode(\n                State.graph.decorateRawGraph(State.graph.rawGraph)\n            );\n        }\n        let tempGraph = {\n            nodes: [] as ICustomLinkObject[],\n            links: [] as ICustomLinkObject[],\n        };\n        newGraph.forEachNode((node, attributes) => {\n            tempGraph.nodes.push(attributes[\"_visualize\"]);\n        });\n\n        newGraph.forEachEdge((edge, attributes) => {\n            tempGraph.links.push(attributes[\"_visualize\"]);\n        });\n        return tempGraph;\n    }\n\n    /**\n     * return a new graph that contains the invisible clusters, formed as nodes\n     * as well as the edges that connected to the cluster node to simulate the force within the same cluster\n     * the new graph is a deep copy of the old node, so no worries of the original graph DS\n     *\n     * @private\n     * @param {Graph} oldGraph\n     * @returns {*}  {Graph}\n     */\n    private addInvisibleClusterNode(oldGraph: Graph): Graph {\n        let graphCopy = oldGraph.copy();\n        let names = [\n            \"_CLUSTER_1_\",\n            \"_CLUSTER_2_\",\n            \"_CLUSTER_3_\",\n            \"_CLUSTER_4_\",\n            \"_CLUSTER_5_\",\n            \"_CLUSTER_6_\",\n            \"_CLUSTER_7_\",\n            \"_CLUSTER_8_\",\n            \"_CLUSTER_9_\",\n            \"_CLUSTER_10_\",\n        ];\n        for (let index = 0; index < names.length; index++) {\n            State.cluster.getAttributeValues.forEach(\n                (attribute: string | number) => {\n                    // if a node does not belong to any cluster, a undefined will be formed with no cluster to generate\n                    if (attribute === \"undefined\") return;\n\n                    let clusterID = names[index] + attribute;\n                    graphCopy.addNode(clusterID, {\n                        _visualize: createCustomNodeObject(clusterID, true),\n                    });\n\n                    // add edges to simulate the force of the same cluster\n                    State.cluster.attributeKeys\n                        .get(attribute)\n                        ?.forEach((target) => {\n                            graphCopy.addEdgeWithKey(\n                                `${clusterID}-${target}`,\n                                clusterID,\n                                target,\n                                {\n                                    _visualize: createCustomLinkObject(\n                                        clusterID,\n                                        target,\n                                        true\n                                    ),\n                                }\n                            );\n                        });\n                }\n            );\n        }\n\n        return graphCopy;\n    }\n\n    /**\n     * determine whether this Node is the cluster delegate node\n     *\n     * @param {NodeObject} nodeObject\n     */\n    nodeVisibility(nodeObject: NodeObject) {\n        let node = nodeObject as ICustomNodeObject;\n        return !node.isClusterNode;\n    };\n\n    /**\n     * determine whether this edge is the cluster delegate edge\n     *\n     * @param {LinkObject} linkObject\n     */\n    linkVisibility (linkObject: LinkObject) {\n        let link = linkObject as ICustomLinkObject;\n        return !link.isClusterLink;\n    };\n\n    ////\n\n    clusterObject: Cluster3dObjectStore;\n\n    ////\n\n    /**\n     * this will re-position the camera to focus on the specified node\n     * if distance not specified, a default of 40 will be used\n     *\n     * @param {string} nodeId the node to be focused\n     * @param {number} [distance=40] the ending distance between the camera and the node\n     * @returns {*}\n     */\n    cameraFocusOn(nodeId: string, distance: number = 40) {\n        let node = State.graph.rawGraph.getNodeAttribute(nodeId, \"_visualize\");\n        if (!(node.x && node.y && node.z)) return;\n        // Aim at node from outside it\n        const distRatio = 1 + distance / Math.hypot(node.x, node.y, node.z);\n\n        this.graphDelegateMethods.cameraPosition(\n            {\n                x: node.x * distRatio,\n                y: node.y * distRatio,\n                z: node.z * distRatio,\n            }, // new position\n            { x: node.x, y: node.y, z: node.z }, // lookAt ({ x, y, z })\n            3000 // ms transition duration\n        );\n    }\n\n    ////\n\n    /**\n     * set the force inside each cluster in the ForceGraph\n     *\n     */\n    updateClusterForce() {\n        this.graphDelegateMethods\n            ?.d3Force(\"link\")\n            //@ts-ignore\n            ?.distance((link: CustomLinkObject) => {\n                return link.isClusterLink\n                    ? State.css.cluster.clusterForce\n                    : State.css.cluster.normalForce;\n            });\n        this.graphDelegateMethods.d3ReheatSimulation();\n    }\n}\n","import { makeAutoObservable, reaction } from \"mobx\";\nimport State from \"../state\";\n\nclass ComponentRef {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    static _instance: ComponentRef | null = null;\n\n    nodeDetail!: React.Component | any;\n\n    multiNodeDetail!: React.Component | any;\n\n    visualizer!: React.Component | any;\n\n    canvasDrawPanel!: React.Component | any;\n\n    clusterSplittingPanelStack!: React.Component | any;\n\n    // add singleton to prevent creating multiple instances of the State class\n    static get instance() {\n        if (ComponentRef._instance === null) {\n            let instance = new ComponentRef();\n            ComponentRef._instance = instance;\n            return instance;\n        } else {\n            return ComponentRef._instance;\n        }\n    }\n}\n\nreaction(\n    () => State.interaction.currentlyHoveredNodeId,\n    () => ComponentRef.instance.nodeDetail?.forceUpdate()\n);\n\nexport default ComponentRef.instance;\n","import { Attributes, EdgeKey, NodeKey } from \"graphology-types\";\nimport { makeAutoObservable } from \"mobx\";\nimport State from \".\";\nimport GraphStore from \"./GraphStore\";\n\n/**\n * the wrapper mutating function that relates to the mutation of the rawGraph DS\n * all the mutation of the Graph should all go through this API rather than calling on rawGraph directly.\n *\n * @export\n * @class GraphMutation\n */\nexport default class GraphMutation {\n    constructor(_this: GraphStore) {\n        makeAutoObservable(this);\n        this.that = _this;\n    }\n\n    private that!: GraphStore;\n\n    /**\n     * add the node with this attribute to the Graph and refresh the 3d Graph\n     * if not specify attributes._visualize , then will add it into the attributes before adding to Graph\n     *\n     * @param {NodeKey} node\n     * @param {Attributes} [attributes]\n     */\n    public addNode(node: NodeKey, attributes?: Attributes): void {\n        let newAttributes: Attributes;\n        if (!attributes) {\n            newAttributes = {};\n            State.graph.decorateRawNode(node as string, newAttributes);\n        } else if (!attributes.hasOwnProperty(\"_visualize\")) {\n            newAttributes = attributes;\n            State.graph.decorateRawNode(node as string, newAttributes);\n        } else {\n            newAttributes = attributes;\n        }\n        this.that.rawGraph.addNode(node, newAttributes);\n        this.that.refreshGraph();\n    }\n\n    /**\n     * delete the node with this nodeId in the Graph and refresh the 3d Graph\n     *\n     * @param {string} nodeId\n     */\n    public dropNode(nodeId: string): void {\n        this.that.rawGraph.dropNode(nodeId);\n        this.that.refreshGraph();\n    }\n\n    /**\n     * add the edge with this attribute to the Graph and refresh the 3d Graph\n     * if not specify attributes._visualize , then will add it into the attributes before adding to Graph\n     *\n     * @param {NodeKey} source\n     * @param {NodeKey} target\n     * @param {Attributes} [attributes]\n     */\n    public addEdge(\n        source: NodeKey,\n        target: NodeKey,\n        attributes?: Attributes\n    ): void {\n        let newAttributes: Attributes;\n        if (!attributes) {\n            newAttributes = {};\n            State.graph.decorateRawEdge(\n                source as string,\n                target as string,\n                newAttributes\n            );\n        } else if (!attributes.hasOwnProperty(\"_visualize\")) {\n            newAttributes = attributes;\n            State.graph.decorateRawEdge(\n                source as string,\n                target as string,\n                newAttributes\n            );\n        } else {\n            newAttributes = attributes;\n        }\n        this.that.rawGraph.addEdge(source, target, newAttributes);\n        this.that.refreshGraph();\n    }\n\n    /**\n     * delete the edge with this key in the Graph and refresh the 3d Graph\n     *\n     * @param {EdgeKey} edge\n     */\n    public dropEdge(edge: EdgeKey): void {\n        this.that.rawGraph.dropEdge(edge);\n        this.that.refreshGraph();\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\nimport Graph from \"graphology\";\nimport { Attributes } from \"graphology-types\";\nimport {\n    createCustomNodeObject,\n    createCustomLinkObject,\n} from \"./GraphDelegate\";\nimport ComponentRef from \"../components/ComponentRef\";\nimport State from \".\";\nimport GraphMutation from \"./GraphMutation\";\n\nexport interface IMetaData {\n    snapshotName: string;\n\n    // attributes of nodes in imported graph\n    nodeProperties: string[];\n}\n\n/**\n * the class to store a raw graph as well as the related information\n \n * @export\n * @class GraphStore\n */\nexport default class GraphStore {\n    constructor() {\n        makeAutoObservable(this);\n        this.mutating = new GraphMutation(this);\n    }\n\n    /**\n     * the graphology data structure to store a graph.\n     * has a lot of APIs to manipulate as well as iterate through the graph\n     *\n     * @see graphology\n     *\n     * @type {Graph}\n     */\n    rawGraph: Graph = new Graph({\n        allowSelfLoops: true,\n        multi: false,\n        type: \"undirected\",\n    });\n\n    /**\n     * should be called when individual nodes are added to the graph.\n\n     * add the CustomNodeObject to node attributes stored in the data structure\n     * @see CustomNodeObject\n     * name as @code _visualize in attributes\n     *\n     * @param {string} node\n     * @param {Attributes} attributes\n     */\n    decorateRawNode(node: string, attributes: Attributes) {\n        attributes._visualize = createCustomNodeObject(node, false);\n    }\n\n    /**\n     * used in \"cluster node\" in rightclick panel\n     */\n    numberOfClusters: number = 0;\n\n    /**\n     * should be called when individual edges are added to the graph.\n     *\n     * add the CustomLinkObject to node attributes stored in the data structure\n     * @see CustomLinkObject\n     * name as @code _visualize in attributes\n     *\n     * @param {string} source\n     * @param {string} target\n     * @param {Attributes} attributes\n     */\n    decorateRawEdge(source: string, target: string, attributes: Attributes) {\n        attributes._visualize = createCustomLinkObject(source, target, false);\n    }\n\n    /**\n     * should be called on every graph import\n     * add the the _visualize to every links inside the specified graph\n     *\n     * the _visualize is for storing the object to be send to front-end to render the graph\n     *\n     * @param {Graph} _rawGraph\n     * @return {*}  {Graph}\n     */\n    decorateRawGraph(_rawGraph: Graph): Graph {\n        _rawGraph.forEachNode((node, attributes) =>\n            this.decorateRawNode(node, attributes)\n        );\n\n        _rawGraph.forEachEdge((edge, attributes, source, target) =>\n            this.decorateRawEdge(source, target, attributes)\n        );\n        return _rawGraph;\n    }\n\n    /**\n     * proxy method to set the new graph\n     * if intend to set a new graph, please use this method instead of directly modify GraphStore\n     *\n     * @param {Graph} _rawGraph\n     * @param {IMetaData} _metadata\n     */\n    public setGraph(_rawGraph: Graph, _metadata: IMetaData | null = null) {\n        this.rawGraph = this.decorateRawGraph(_rawGraph);\n        if (_metadata) {\n            this.metadata = _metadata;\n        }\n        State.interaction.flush();\n        State.cluster.clusterBy = null;\n        ComponentRef.visualizer.updateVisualizationGraph();\n    }\n\n    /**\n     * should be called when the graph gets updated (the data inside the graph gets updated, or the attribute to be clustered has changed)\n     *\n     * @memberof GraphStore\n     */\n    public refreshGraph() {\n        State.interaction.flush();\n        ComponentRef.visualizer.updateVisualizationGraph();\n    }\n\n    /**\n     * the wrapper methods to mutate the graph\n     * all the mutations of the graph should go through this API rather than calling this.rawGraph.[mutate]\n     *\n     * has basic functions like addNode, dropNode, addEdge, dropEdge...\n     *\n     * @see {GraphMutation}\n     */\n    mutating: GraphMutation;\n\n    /**\n     * the metadata related to the raw graph\n     * should be updated if a new graph is imported\n     *\n     */\n    metadata: IMetaData = {\n        snapshotName: \"SNAPSHOT\",\n        nodeProperties: [],\n    };\n}\n","import { Intent, Position, Toaster } from \"@blueprintjs/core\";\nimport { makeAutoObservable } from \"mobx\";\nimport Graph from \"graphology\";\nimport gexf from \"graphology-gexf\";\nimport parse from \"csv-parse/lib/sync\";\nimport { IMetaData } from \"./GraphStore\";\n\nexport interface INodeFileConfig {\n    // the file is successfully parsed and ready for display\n    isReady: boolean;\n    parseError: boolean;\n    path: string;\n\n    // has header at the top\n    hasHeader: boolean;\n\n    // Get top 20 lines. Or if there's less than 10 line, get all the lines.\n    topN: any[];\n    //names for the columns of this csv\n    columns: string[];\n    mapping: {\n        id: string;\n    };\n    delimiter: string;\n}\n\nexport interface IEdgeFileConfig {\n    isReady: boolean;\n    parseError: boolean;\n\n    // should save the csv to temp for further change the cluster attribute\n    path: string;\n    hasHeader: boolean;\n\n    // array of objects storing the\n    topN: any[];\n    columns: string[];\n    mapping: {\n        fromId: string;\n        toId: string;\n    };\n    delimiter: string;\n}\n\nexport default class ImportStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    // whether the graph is in importing\n    isLoading = false;\n    //name of the edge file\n    edgeFileName = \"Choose Edge File ...\";\n\n    //name of the node file\n    nodeFileName = \"Choose Node File ...\";\n\n    //name of the GEXF file\n    gexfFileName = \"Choose GEXF File ...\";\n\n    importDialogOpen = false;\n\n    importGEXFDialogOpen = false;\n\n    // specific: File object selected via the file input.\n    selectedEdgeFileFromInput!: File;\n    selectedNodeFileFromInput!: File;\n\n    selectedGEXFFileFromInput!: File;\n\n    importConfig = {\n        hasNodeFile: false,\n        nodeFile: {\n            // the file is successfully parsed and ready for display\n            isReady: false,\n            parseError: false,\n            path: \"\",\n\n            // has header at the top\n            hasHeader: true,\n\n            // Get top 20 lines. Or if there's less than 10 line, get all the lines.\n            topN: [],\n            //names for the columns of this csv\n            columns: [],\n            mapping: {\n                id: \"Unknown\",\n            },\n            delimiter: \",\",\n        } as INodeFileConfig,\n        edgeFile: {\n            isReady: false,\n            parseError: false,\n\n            // should save the csv to temp for further change the cluster attribute\n            path: \"\",\n            hasHeader: true,\n\n            // array of objects storing the\n            topN: [],\n            columns: [],\n            mapping: {\n                fromId: \"Unknown\",\n                toId: \"Unknown\",\n            },\n            delimiter: \",\",\n        } as IEdgeFileConfig,\n    };\n\n    /**\n     * read the CSV file specified by fileObject, with options defined by other paras\n     * and return a list of objects containing the key-value pair of attribute-value\n     *\n     * @param {File} fileObject\n     * @param {boolean} hasHeader\n     * @param {string} delimiter\n     * @return {*}  {Promise<Object[]>}\n     * where Object is of { attribute: number | string, anotherAttribute: number | string, ... } type\n     */\n    private async readCSV(\n        fileObject: File,\n        hasHeader: boolean,\n        delimiter: string\n    ): Promise<any[]> {\n        const file = fileObject;\n        const reader = new FileReader();\n        reader.readAsText(file);\n        return new Promise((resolve, reject) => {\n            reader.onload = () => {\n                let content: any = reader.result;\n                content = content.replace(/\\r\\n/g, \"\\n\");\n                content = content.replace(/\\r/g, \"\\n\");\n                try {\n                    if (hasHeader) {\n                        resolve(\n                            parse(content, {\n                                comment: \"#\",\n                                trim: true,\n                                auto_parse: true,\n                                skip_empty_lines: true,\n                                columns: hasHeader,\n                                delimiter,\n                            })\n                        );\n                    }\n                    resolve(\n                        parse(content, {\n                            comment: \"#\",\n                            trim: true,\n                            auto_parse: true,\n                            skip_empty_lines: true,\n                            columns: undefined,\n                            delimiter,\n                        })\n                    );\n                } catch (err) {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: \" + err.message,\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                }\n            };\n        });\n    }\n\n    /**\n     * parse the graph from import GEXF file specified in selectedGEXFFileFromInput\n     * and return a Graph object\n     *\n     * @private\n     * @return {*}  {Promise<Graph>}\n     */\n    private async readGEXF(): Promise<Graph> {\n        const file = this.selectedGEXFFileFromInput;\n        const reader = new FileReader();\n        reader.readAsText(file);\n        return new Promise((resolve, reject) => {\n            reader.onload = () => {\n                try {\n                    resolve(gexf.parse(Graph, reader.result as string));\n                } catch (err) {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: \" + err.message,\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                    this.isLoading = false;\n                }\n            };\n        });\n    }\n\n    public readEdgeCSV(): Promise<any[]> {\n        return this.readCSV(\n            this.selectedEdgeFileFromInput,\n            this.importConfig.edgeFile.hasHeader,\n            this.importConfig.edgeFile.delimiter\n        );\n    }\n\n    public readNodeCSV(): Promise<any[]> {\n        return this.readCSV(\n            this.selectedNodeFileFromInput,\n            this.importConfig.nodeFile.hasHeader,\n            this.importConfig.nodeFile.delimiter\n        );\n    }\n\n    /**\n     * will create a Graph structure to store the nodes and edges in the imported File\n     * should handle whether or not have the NodeFile, whether or not have the header of each file\n     * if successfully imported, change the .isReady to be true\n     *\n     * @return {*}\n     */\n    public async importGraphFromCSV() {\n        const config = this.importConfig;\n\n        // the CSV lib we use uses int index when there's not header/column names specified\n        const fromColumn = config.edgeFile.hasHeader\n            ? config.edgeFile.mapping.fromId\n            : parseInt(config.edgeFile.mapping.fromId);\n        const toColumn = config.edgeFile.hasHeader\n            ? config.edgeFile.mapping.toId\n            : parseInt(config.edgeFile.mapping.toId);\n\n        let tempNodes: any[] = [];\n        let tempEdges: any[] = [];\n\n        const graph = new Graph({\n            allowSelfLoops: true,\n            multi: true,\n            type: \"undirected\",\n        });\n\n        // parse Node file and store into the Graph DS\n        if (config.hasNodeFile) {\n            if (this.importConfig.nodeFile.hasHeader) {\n                // if has header, then tempNodes returns an array of objects\n                tempNodes = (await this.readNodeCSV()) as Object[];\n                tempNodes.forEach((node) => {\n                    let nodeId = node[config.nodeFile.mapping.id].toString();\n                    delete node[config.nodeFile.mapping.id];\n                    graph.addNode(nodeId, node);\n                });\n            } else {\n                // if no header, then tempNodes returns an array of array\n                tempNodes = (await this.readNodeCSV()) as any[][];\n                tempNodes.forEach((node) => {\n                    let nodeId = node[config.nodeFile.mapping.id].toString();\n                    let attributes = Object.assign({}, node);\n                    delete attributes[config.nodeFile.mapping.id];\n                    graph.addNode(nodeId, attributes);\n                });\n            }\n        }\n\n        // parse Edge file and store into the Graph DS\n        tempEdges = await this.readEdgeCSV();\n        tempEdges.forEach((edge, idx) => {\n            let fromId = edge[fromColumn].toString();\n            let toId = edge[toColumn].toString();\n\n            if (!graph.hasNode(fromId)) {\n                graph.addNode(fromId, {});\n            }\n            if (!graph.hasNode(toId)) {\n                graph.addNode(toId, {});\n            }\n            graph.addEdgeWithKey(idx, fromId, toId);\n        });\n\n        config.edgeFile.isReady = true;\n\n        let nodeProperties = config.hasNodeFile\n            ? Object.keys(tempNodes[0])\n            : [\"id\"];\n\n        return {\n            graph: graph,\n            metadata: {\n                snapshotName: \"Untitled\",\n                nodeProperties: nodeProperties,\n            } as IMetaData,\n        };\n    }\n\n    public async importGraphFromGEXF() {\n        let graph = await this.readGEXF();\n        let nodeProperties: string[] = [];\n        for (const [key] of Object.entries(\n            graph.getNodeAttributes(graph.nodes()[0])\n        )) {\n            nodeProperties.push(key);\n        }\n\n        return {\n            graph: graph,\n            metadata: {\n                snapshotName: \"Untitled\",\n                nodeProperties: nodeProperties,\n            } as IMetaData,\n        };\n    }\n\n    /**\n     * change the importConfig.edgeFile.topN to be the top 10 parsed elements in the input edge file\n     * change the importConfig.edgeFile.columns to be the attributes of the imported edge file\n     * set the .mapping.fromId and .mapping.toId to be the first and second (if have) attribute of the input edge file.\n     *\n     * if successfully parsed, set the .isReady to be true, else set the.parseError\n     *\n     * This function will autorun if user specify the selectedEdgeFileFromInput and the changes that this function will make is to get ready for the rendering of preview Table in the ImportDialog\n     *\n     * @return {*}\n     */\n    public async renderImportEdgePreview() {\n        let file = this.selectedEdgeFileFromInput;\n        let edgeFileConfig = this.importConfig.edgeFile;\n        let hasHeader = edgeFileConfig.hasHeader;\n        let delimiter = edgeFileConfig.delimiter;\n\n        edgeFileConfig.parseError = false;\n\n        return new Promise<void>((resolve, reject): void => {\n            if (!file) {\n                return;\n            }\n            const reader = new FileReader();\n            reader.readAsText(file);\n\n            reader.onload = () => {\n                // Read entire CSV into memory as string\n                let fileAsString = reader.result as string;\n\n                // if the file is not regularly formatted, replace the EOL character\n                fileAsString = fileAsString.replace(/\\r\\n/g, \"\\n\");\n                fileAsString = fileAsString.replace(/\\r/g, \"\\n\");\n\n                // Get top 10ß lines. Or if there's less than 10 line, get all the lines.\n                const lines = fileAsString.split(\"\\n\");\n                const topLinesAsString = lines\n                    .map((l) => l.trim())\n                    .slice(0, lines.length < 10 ? lines.length : 10)\n                    .join(\"\\n\");\n                console.log(topLinesAsString);\n\n                // Parse the top lines\n                try {\n                    const it = hasHeader\n                        ? parse(topLinesAsString, {\n                              comment: \"#\",\n                              trim: true,\n                              auto_parse: true,\n                              skip_empty_lines: true,\n                              columns: hasHeader,\n                              delimiter: delimiter,\n                          })\n                        : parse(topLinesAsString, {\n                              comment: \"#\",\n                              trim: true,\n                              auto_parse: true,\n                              skip_empty_lines: true,\n                              columns: undefined,\n                              delimiter: delimiter,\n                          });\n                    edgeFileConfig.topN = it;\n                    edgeFileConfig.columns = Object.keys(it[0]).map(\n                        (key) => `${key}`\n                    );\n\n                    // if there exists two or more columns in the parsed edge file\n                    if (edgeFileConfig.columns.length >= 2) {\n                        edgeFileConfig.mapping.fromId =\n                            edgeFileConfig.columns[0];\n                        edgeFileConfig.mapping.toId = edgeFileConfig.columns[1];\n                        edgeFileConfig.isReady = true;\n                    } else if (edgeFileConfig.columns.length === 1) {\n                        edgeFileConfig.mapping.fromId = edgeFileConfig.mapping.toId =\n                            edgeFileConfig.columns[0];\n                        edgeFileConfig.isReady = true;\n                    } else {\n                        Toaster.create({\n                            position: Position.TOP,\n                        }).show({\n                            message: \"Error: Fails to parse file\",\n                            intent: Intent.DANGER,\n                            timeout: -1,\n                        });\n                        edgeFileConfig.parseError = true;\n                    }\n                    resolve();\n                } catch {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: Fails to parse file\",\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                    edgeFileConfig.parseError = true;\n                    reject();\n                }\n            };\n\n            reader.onerror = () => {\n                console.error(reader.error);\n                Toaster.create({\n                    position: Position.TOP,\n                }).show({\n                    action: {\n                        onClick: () => window.location.reload(),\n                        text: \"Refresh Page\",\n                    },\n                    message: \"Error: Fails to open file\",\n                    intent: Intent.DANGER,\n                    timeout: -1,\n                });\n                reject();\n            };\n        });\n    }\n\n    /**\n     * change the importConfig.nodeFile.topN to be the top 10 parsed elements in the input node file\n     * change the importConfig.nodeFile.columns to be the attributes of the imported node file\n     * set the .mapping.id .mapping.cluster to be the first and second (if have) attribute of the input edge file.\n     *\n     * if successfully parsed, set the .isReady to be true, else set the.parseError\n     *\n     * This function will autorun if user specify the selectedNodeFileFromInput and the changes that this function will make is to get ready for the rendering of preview Table in the ImportDialog\n     *\n     * @return {*}\n     */\n    public async renderImportNodePreview() {\n        let file = this.selectedNodeFileFromInput;\n        let nodeFileConfig = this.importConfig.nodeFile;\n        let hasHeader = nodeFileConfig.hasHeader;\n        let delimiter = nodeFileConfig.delimiter;\n\n        nodeFileConfig.parseError = false;\n\n        return new Promise<void>((resolve, reject): void => {\n            if (!file) {\n                return;\n            }\n            const reader = new FileReader();\n            reader.readAsText(file);\n\n            reader.onload = () => {\n                // Read entire CSV into memory as string\n                let fileAsString = reader.result as string;\n\n                // if the file is not regularly formatted, replace the EOL character\n                fileAsString = fileAsString.replace(/\\r\\n/g, \"\\n\");\n                fileAsString = fileAsString.replace(/\\r/g, \"\\n\");\n\n                // Get top 10 lines. Or if there's less than 10 line, get all the lines.\n                const lines = fileAsString.split(\"\\n\");\n                const topLinesAsString = lines\n                    .map((l) => l.trim())\n                    .slice(0, lines.length < 10 ? lines.length : 10)\n                    .join(\"\\n\");\n                console.log(topLinesAsString);\n\n                // Parse the top lines\n                try {\n                    const it = hasHeader\n                        ? parse(topLinesAsString, {\n                              comment: \"#\",\n                              trim: true,\n                              auto_parse: true,\n                              skip_empty_lines: true,\n                              columns: hasHeader,\n                              delimiter,\n                          })\n                        : parse(topLinesAsString, {\n                              comment: \"#\",\n                              trim: true,\n                              auto_parse: true,\n                              skip_empty_lines: true,\n                              columns: undefined,\n                              delimiter,\n                          });\n                    nodeFileConfig.topN = it;\n                    nodeFileConfig.columns = Object.keys(it[0]).map(\n                        (key) => `${key}`\n                    );\n\n                    // if there exists two or more columns in the parsed edge file\n                    if (nodeFileConfig.columns.length >= 1) {\n                        nodeFileConfig.mapping.id = nodeFileConfig.columns[0];\n                        nodeFileConfig.isReady = true;\n                    } else {\n                        Toaster.create({\n                            position: Position.TOP,\n                        }).show({\n                            message: \"Error: Fails to parse file\",\n                            intent: Intent.DANGER,\n                            timeout: -1,\n                        });\n                        nodeFileConfig.parseError = true;\n                    }\n                    resolve();\n                } catch {\n                    Toaster.create({\n                        position: Position.TOP,\n                    }).show({\n                        message: \"Error: Fails to parse file\",\n                        intent: Intent.DANGER,\n                        timeout: -1,\n                    });\n                    nodeFileConfig.parseError = true;\n                    reject();\n                }\n            };\n\n            reader.onerror = () => {\n                console.error(reader.error);\n                Toaster.create({\n                    position: Position.TOP,\n                }).show({\n                    action: {\n                        onClick: () => window.location.reload(),\n                        text: \"Refresh Page\",\n                    },\n                    message: \"Error: Fails to open file\",\n                    intent: Intent.DANGER,\n                    timeout: -1,\n                });\n                reject();\n            };\n        });\n    }\n}\n","import Graph from \"graphology\";\nimport { makeAutoObservable, observable } from \"mobx\";\n\nexport default class SearchStore {\n    constructor() {\n        makeAutoObservable(this, {\n            rawGraph: observable.ref,\n        });\n    }\n\n    // if is previewing, ignore all mouse hovers detected by NodeDetailPanel because it is showing the detail of selected node\n    isPreviewing = false;\n\n    // can use defined regex\n    // id:123\n    // attr:color:red\n    searchStr = \"\";\n\n    /**\n     * @observable .ref\n     * the reference bounded to the GraphStore/rawGraph\n     *\n     * @type {Graph}\n     * @memberof ClusterStore\n     */\n    rawGraph!: Graph;\n\n    // contains node ids\n    get candidates(): string[] {\n        let list: string[] = [];\n        let searchStrIgnoreCase = this.searchStr.toLocaleLowerCase();\n        if (searchStrIgnoreCase.match(/^id:.+/g)) {\n            const searchId = searchStrIgnoreCase.split(/^id:/g)[1].trim();\n            this.rawGraph.forEachNode((node) => {\n                if (node.toLocaleLowerCase().includes(searchId)) {\n                    list.push(node);\n                }\n            });\n        } else if (searchStrIgnoreCase.match(/^attr:.+:.+/g)) {\n            let searchQuery = searchStrIgnoreCase\n                .split(/^attr:/g)[1]\n                .trim()\n                .split(/:/g);\n            const searchAttr = searchQuery[0].trim();\n            const searchValue = searchQuery[1].trim();\n            this.rawGraph.forEachNode((node, attributes) => {\n                if (\n                    attributes.hasOwnProperty(searchAttr) &&\n                    (attributes[searchAttr] as string)\n                        .toLocaleLowerCase()\n                        .includes(searchValue)\n                ) {\n                    list.push(node);\n                }\n            });\n        } else if (this.searchStr === \"\") {\n        } else {\n            this.rawGraph.forEachNode((node) => {\n                if (node.toLocaleLowerCase().includes(this.searchStr)) {\n                    list.push(node);\n                }\n            });\n        }\n\n        return list;\n    }\n}\n","import { makeAutoObservable, observable } from \"mobx\";\nimport Graph from \"graphology\";\nimport * as THREE from \"three\";\nimport randomcolor from \"randomcolor\";\nimport State from \".\";\n\n/**\n * all the computed values get from the rawGraph\n *\n * @export\n * @class ClusterStore\n */\nexport default class ClusterStore {\n    constructor() {\n        makeAutoObservable(this, {\n            rawGraph: observable.ref,\n        });\n    }\n    /**\n     * @observable\n     *\n     * attention: please use setCluster() to alter this data\n     * Specify which attribute to be clustered\n     * the default value should be null, and front-end graph will interpret this to Not-Cluster\n     *\n     *\n     */\n    clusterBy: string | null = null;\n\n    /**\n     * the setter of clusterBy\n     * will update the front-end 3d graph about the cluster changes\n     *\n     * @param {string | null} to\n     * @param {boolean = false} forceUpdate\n     */\n    setCluster(to: string | null, forceUpdate: boolean = false) {\n        if (forceUpdate) {\n            this.setCluster(null);\n            this.setCluster(to);\n        } else {\n            this.clusterBy = to;\n            State.graphDelegate.clusterObject.initEmptyMapAndFusion();\n            State.graph.refreshGraph();\n            State.graph.rawGraph.setAttribute(\"default\", to);\n        }\n    }\n\n    /**\n     * @observable .ref\n     * the reference bounded to the GraphStore/rawGraph\n     *\n     * @type {Graph}\n     */\n    rawGraph!: Graph;\n\n    /**\n     * @computed\n     * a auto computed map\n     * will auto-update if $rawGraph or $clusterBy is changed\n     * [the id of a Node -> the value of the attribute specified by $clusterBy]\n     *\n     * @readonly\n     * @type {(Map<string, string | number>)}\n     */\n    get keyAttribute(): Map<string, string | number> {\n        const keyValueMap = new Map<string, string | number>();\n        if (this.clusterBy === null) {\n            return keyValueMap;\n        }\n        const attribute = this.clusterBy as string;\n\n        this.rawGraph?.forEachNode((key, attributes) => {\n            // if this attribute is defined\n            if (attributes.hasOwnProperty(attribute)) {\n                keyValueMap.set(key, attributes[attribute]);\n            } else {\n                // this attribute is undefined in this node\n                keyValueMap.set(key, \"undefined\");\n            }\n        });\n        return keyValueMap;\n    }\n\n    /**\n     * the possible attribute values of the attribute defined by $clusterBy\n     *\n     * @readonly\n     * @type {((string | number)[])}\n     */\n    get getAttributeValues(): (string | number)[] {\n        return Array.from(new Set(this.keyAttribute.values()));\n    }\n\n    /**\n     * @computed\n     * a auto computed map\n     * will auto-update if $rawGraph or $clusterBy is changed\n     * [the possible values of the attribute specified by $clusterBy -> a list of Node ids]\n     *\n     * @readonly\n     * @type {(Map<string | number, string[]>)}\n     */\n    get attributeKeys(): Map<string | number, string[]> {\n        const attributeKeysMap = new Map<string | number, string[]>();\n        this.getAttributeValues.forEach((value) => {\n            attributeKeysMap.set(value, []);\n        });\n        this.keyAttribute.forEach((value, key) => {\n            attributeKeysMap.get(value)?.push(key);\n        });\n        return attributeKeysMap;\n    }\n\n    /**\n     * @computed\n     * a auto computed map\n     * will auto-update if $rawGraph or $clusterBy is changed\n     * [the possible values of the attribute specified by $clusterBy -> the random colour of this cluster]\n     * used to avoid re-compute the colours on every frame refresh\n     *\n     * @readonly\n     * @type {(Map<string | number, string>)}\n     */\n    get attributeColor(): Map<string | number, string> {\n        let colors = randomcolor({\n            seed: 1,\n            count: this.getAttributeValues.length,\n        });\n        let position = 0;\n        let map = new Map<string | number, string>();\n        this.getAttributeValues.forEach((attribute) => {\n            map.set(attribute, colors[position++]);\n        });\n        return map;\n    }\n\n    /**\n     * @computed\n     * a auto computed map\n     * will auto-update if $rawGraph or $clusterBy is changed\n     * [the possible values of the attribute specified by $clusterBy -> the Nodes points in that cluster]\n     * will change on every frame refresh as the Node's position keeps changing.\n     *\n     * @readonly\n     * @type {(Map<string | number, THREE.Vector3[]>)}\n     */\n    get attributePoints(): Map<string | number, THREE.Vector3[]> {\n        let map = new Map<string | number, THREE.Vector3[]>();\n        this.getAttributeValues.forEach((attribute) => {\n            let vectorList: THREE.Vector3[] = [];\n            map.set(attribute, vectorList);\n        });\n        this.rawGraph.forEachNode((key, attributes) => {\n            map.get(this.keyAttribute.get(key) as string | number)?.push(\n                new THREE.Vector3(\n                    attributes._visualize.x,\n                    attributes._visualize.y,\n                    attributes._visualize.z\n                )\n            );\n        });\n        return map;\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\n\n/**\n * changing the config inside .global will cause to change every config of every node iteratively\n *\n * but changing the else does not\n *\n * @class NodeGlobalConfig\n */\nclass NodeGlobalConfig {\n    constructor() {\n        makeAutoObservable(this);\n    }\n    defaultColor: string = \"#808080\";\n    selectedColor: string = \"#ffffAA\";\n    multiSelectedColor: string = \"white\";\n    highlightColor: string = \"#ff6060\";\n\n    resolution = 12;\n\n    size = 4;\n}\n\n/**\n * changing the config inside .global will cause to change every config of every edge iteratively\n *\n * but changing the else does not\n *\n * @class EdgeGlobalConfig\n */ class EdgeGlobalConfig {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    defaultColor = \"#ffffff\";\n\n    selectedColor = \"#ffff00\";\n    highlightColor = \"#ff8E8E\";\n\n    defaultWidth: number = 1;\n\n    highlightWidth: number = 2;\n\n    resolution = 6;\n}\nclass LabelConfig {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    show = true;\n    color = \"#d3d3d3\";\n    size = 4;\n}\n\nclass ClusterConfig {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    clusterForce = 20;\n    normalForce = 50;\n    resolution = 10;\n    shape: \"convexHull\" | \"sphere\" = \"convexHull\";\n}\n/**\n * the configurations to set to cascade the graph\n *\n * @export\n * @class CssStore\n */\nexport default class CssStore {\n    constructor() {\n        makeAutoObservable(this);\n        this.node = new NodeGlobalConfig();\n        this.edge = new EdgeGlobalConfig();\n        this.label = new LabelConfig();\n        this.cluster = new ClusterConfig();\n    }\n\n    node!: NodeGlobalConfig;\n\n    edge!: EdgeGlobalConfig;\n\n    label!: LabelConfig;\n\n    cluster!: ClusterConfig;\n\n    isAnimating: boolean = true;\n}\n","import { Attributes } from \"graphology-types\";\nimport { makeAutoObservable } from \"mobx\";\nimport State from \".\";\nexport default class InteractionStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    selectedNode: string | null = null;\n\n    /**\n     * the currently selected node ids\n     * the singleNodeDetailPanel will render and refresh if this changes\n     *\n     * @type {string[]}\n     */\n    selectedNodes: string[] = [];\n\n    selectedEdge: string | null = null;\n\n    selectedEdges: string[] = [];\n    /**\n     * when the menuItem 'box-select Node' of RightClickPanel is clicked, then this will be set to true,\n     *  and the component'SelectionBox' will be  visualized only the mode is 'Node Selection' and this variable is true\n     */\n    boxSelectionOpen: boolean = false;\n    /**\n     * this stores the x and y coordinates when mouse clicked down for box selection\n     */\n    boxSelection_startPoint: Attributes = {\n        x: 0,\n        y: 0,\n    };\n\n    /**\n     * this stores the x and y coordinates when mouse clicked up for box selection\n     */\n    boxSelection_endPoint: Attributes = {\n        x: 0,\n        y: 0,\n    };\n\n    boxSelectNode() {\n        //clear selectedNodes\n        State.interaction.selectedNodes = [];\n\n        //calculate the box\n        let left = Math.min(\n            this.boxSelection_startPoint.x,\n            this.boxSelection_endPoint.x\n        );\n        let top = Math.min(\n            this.boxSelection_startPoint.y,\n            this.boxSelection_endPoint.y\n        );\n        let right = Math.max(\n            this.boxSelection_startPoint.x,\n            this.boxSelection_endPoint.x\n        );\n        let down = Math.max(\n            this.boxSelection_startPoint.y,\n            this.boxSelection_endPoint.y\n        );\n\n        //check which node is inside the box,if true push them into selectedNodes\n        State.graph.rawGraph.forEachNode((node, Attributes) => {\n            let coords = State.graphDelegate.graphDelegateMethods.graph2ScreenCoords(\n                Attributes._visualize.x,\n                Attributes._visualize.y,\n                Attributes._visualize.z\n            );\n            if (\n                left <= coords.x &&\n                coords.x <= right &&\n                top <= coords.y &&\n                down >= coords.y\n            ) {\n                State.interaction.selectedNodes.push(node);\n            }\n        });\n    }\n\n    /**\n     * the currently hovered node id\n     * the multiNodeDetailPanel will render and refresh if this changes\n     *\n     * @type {string}\n     */\n    currentlyHoveredNodeId: string | null = null;\n\n    /**\n     * the currently hovered node id that used for display at RightClickPanel\n     */\n\n    get currentlyHoveredNodeNeighbors(): string[] | null {\n        if (this.currentlyHoveredNodeId === null) {\n            return null;\n        } else {\n            return State.graph.rawGraph.neighbors(this.currentlyHoveredNodeId);\n        }\n    }\n\n    get currentlyHoveredNodeNeighborEdges(): string[] | null {\n        if (this.currentlyHoveredNodeId === null) {\n            return null;\n        } else {\n            return this.getNodeNeighborEdges(this.currentlyHoveredNodeId);\n        }\n    }\n\n    getNodeNeighborEdges(node: string): string[] {\n        let neighbors = State.graph.rawGraph.neighbors(node);\n        return neighbors?.map((neighbor: string) => {\n            return this.getEdgeKey(\n                neighbor,\n                this.currentlyHoveredNodeId as string\n            ) as string;\n        });\n    }\n\n    getEdgeKey(node1: string, node2: string): string | null {\n        let go: string | undefined = State.graph.rawGraph.edge(node1, node2);\n        if (go === undefined) {\n            let back: string | undefined = State.graph.rawGraph.edge(\n                node2,\n                node1\n            );\n            if (back === undefined) {\n                return null;\n            } else {\n                return back;\n            }\n        } else {\n            return go;\n        }\n    }\n\n    /**\n     * update the _visualize object inside node attribute and calls graph refresh\n     *\n     * @param {string} id\n     * @param {Attributes} attribute\n     * @param {Attributes | null = null} oldAttributeVisualize\n     * @memberof GraphMutation\n     */\n    updateNodeVisualizeAttribute(\n        id: string,\n        attribute: Attributes,\n        oldAttributeVisualize: Attributes | null = null\n    ) {\n        if (oldAttributeVisualize === null) {\n            oldAttributeVisualize = State.graph.rawGraph.getNodeAttribute(\n                id,\n                \"_visualize\"\n            );\n        }\n\n        this.updateVisualizeAttributeParser(\n            attribute,\n            oldAttributeVisualize as Attributes\n        );\n    }\n    /**\n     * update the _visualize object inside edge attribute and calls graph refresh\n     *\n     * @param {string} key\n     * @param {Attributes} attribute\n     * @param {Attributes | null = null} oldAttributeVisualize\n     * @memberof GraphMutation\n     */\n    updateEdgeVisualizeAttribute(\n        key: string,\n        attribute: Attributes,\n        oldAttributeVisualize: Attributes | null = null\n    ) {\n        if (oldAttributeVisualize === null) {\n            oldAttributeVisualize = State.graph.rawGraph.getEdgeAttribute(\n                key,\n                \"_visualize\"\n            );\n        }\n        this.updateVisualizeAttributeParser(\n            attribute,\n            oldAttributeVisualize as Attributes\n        );\n    }\n\n    updateVisualizeAttributeParser(newAttribute: any, oldAttributes: any) {\n        if (newAttribute.hasOwnProperty(\"hovered\")) {\n            oldAttributes.hovered = newAttribute.hovered;\n        } else if (newAttribute.hasOwnProperty(\"selected\")) {\n            oldAttributes.selected = newAttribute.selected;\n        } else if (newAttribute.hasOwnProperty(\"multiSelected\")) {\n            oldAttributes.multiSelected = newAttribute.multiSelected;\n        }\n    }\n\n    /**\n     * should call this on every refresh of graph DS\n     *\n     */\n    flush() {\n        this.selectedNode = null;\n        this.selectedNodes = [];\n        this.selectedEdge = null;\n        this.selectedEdges = [];\n        this.currentlyHoveredNodeId = null;\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\nimport * as THREE from \"three\";\nimport { polygonContains } from \"d3-polygon\";\nimport State from \".\";\n\nexport default class ClusterInteractionStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n    /**\n     * the UUID of cluster Object3D\n     *\n     * @type {(string | null)}\n     */\n    currentlyHoveredClusterId: string | null = null;\n\n    selectedCluster: string | null = null;\n\n    selectedClusters: string[] = [];\n\n    flush() {\n        this.currentlyHoveredClusterId = null;\n        this.selectedCluster = null;\n        this.selectedClusters = [];\n    }\n\n    clusterLeftClickCallback(uuid: string, event: MouseEvent) {\n        State.graphDelegate.clusterObject.meshSpotlightMaterial(\n            State.graphDelegate.clusterObject.getObjectById(uuid) as THREE.Mesh\n        );\n        // multi-selection\n        let index;\n\n        State.clusterInteraction.selectedCluster = uuid;\n\n        // if already in the list of selected, remove\n        if (\n            (index = State.clusterInteraction.selectedClusters.indexOf(\n                uuid\n            )) !== -1\n        ) {\n            State.clusterInteraction.selectedClusters.splice(index, 1);\n        } else {\n            // if not in the list, add\n            State.clusterInteraction.selectedClusters.push(uuid);\n        }\n    }\n\n    clusterHoverCallback(uuid: string | null, event: MouseEvent) {\n        State.clusterInteraction.currentlyHoveredClusterId = uuid;\n    }\n\n    clusterRightClickCallback(uuid: string | null, event: MouseEvent) {\n        State.clusterInteraction.selectedCluster = uuid;\n        State.preferences.rightClickPositionX = event.x;\n        State.preferences.rightClickPositionY = event.y;\n        if (uuid) {\n            State.preferences.rightClickOn = \"Cluster\";\n        } else {\n            State.preferences.rightClickOn = \"Background\";\n        }\n        State.preferences.rightClickPanelOpen = true;\n        State.preferences.closeAllPanel(\"rightClickPanel\");\n    }\n\n    /**\n     * loop through the selected clusters and set the nodes within that cluster\n     * the newly-formed attribute is named _merge-cluster\n     * and the value to that attribute is the Time() of this time\n     * other nodes unrelated will be set to empty string in this attribute\n     *\n     */\n    mergeSelectedCluster() {\n        let date = new Date().toLocaleString(\"en\");\n        let clusterId: string = `Cluster Merged @ ${date}`;\n        if (!State.graph.metadata.nodeProperties.includes(\"_merge-cluster\")) {\n            State.graph.metadata.nodeProperties.push(\"_merge-cluster\");\n        }\n        State.graph.rawGraph.forEachNode((_, attributes) => {\n            attributes[\"_merge-cluster\"] = \"\";\n        });\n        this.selectedClusters.forEach((uuid) => {\n            const clusterValue = State.graphDelegate.clusterObject.UUID2ClusterValueMap.get(\n                uuid\n            ) as string | number;\n            const keys = State.cluster.attributeKeys.get(clusterValue);\n            keys?.forEach((nodeId) => {\n                State.graph.rawGraph.setNodeAttribute(\n                    nodeId,\n                    \"_merge-cluster\",\n                    clusterId\n                );\n            });\n        });\n        State.cluster.setCluster(\"_merge-cluster\");\n        this.flush();\n    }\n\n    drawPanelActivate: boolean = false;\n\n    lineSegment!: any[];\n\n    confirmClusterSplittingTempData:\n        | {\n              [key: string]: any;\n              id: string;\n              x: number;\n              y: number;\n          }[]\n        | null = null;\n\n    computeSplitCluster() {\n        let screenCoords = [] as {\n            id: string;\n            x: number;\n            y: number;\n            [key: string]: any;\n        }[];\n        State.graph.rawGraph.forEachNode((node, attribute) => {\n            let coord = State.graphDelegate.graphDelegateMethods.graph2ScreenCoords(\n                attribute._visualize.x,\n                attribute._visualize.y,\n                attribute._visualize.z\n            );\n            screenCoords.push({ id: node, x: coord.x, y: coord.y });\n        });\n\n        let tempLineSegment: [number, number][] = this.lineSegment.map(\n            (value) => {\n                return [value.x, value.y];\n            }\n        );\n\n        screenCoords.forEach((value) => {\n            let inside = polygonContains(tempLineSegment, [value.x, value.y]);\n\n            if (inside) {\n                State.interaction.updateNodeVisualizeAttribute(value.id, {\n                    selected: true,\n                });\n                value[\"value\"] = 1;\n            } else {\n                State.interaction.updateNodeVisualizeAttribute(value.id, {\n                    selected: false,\n                });\n                value[\"value\"] = 0;\n            }\n        });\n\n        State.graphDelegate.graphDelegateMethods.refresh();\n        this.confirmClusterSplittingTempData = screenCoords;\n    }\n\n    splitCluster() {\n        let date = new Date().toLocaleString(\"en\");\n        const clusterId: string = `Cluster Split @ ${date}`;\n        const anotherClusterId: string = `Another Cluster Split @ ${date}`;\n        const thisCluster = State.cluster.clusterBy;\n\n        const clusterValue = State.graphDelegate.clusterObject.UUID2ClusterValueMap.get(\n            this.selectedCluster as string\n        ) as string | number;\n        const nodesToAlter = State.cluster.attributeKeys.get(\n            clusterValue\n        ) as string[];\n        this.confirmClusterSplittingTempData?.forEach((node) => {\n            if (nodesToAlter.includes(node.id)) {\n                State.graph.rawGraph.setNodeAttribute(\n                    node.id,\n                    thisCluster as string,\n                    node[\"value\"] === 1 ? clusterId : anotherClusterId\n                );\n            }\n        });\n        this.confirmClusterSplittingTempData = null;\n        State.cluster.setCluster(thisCluster, true);\n    }\n}\n","import { makeAutoObservable } from \"mobx\";\n\nexport default class HelperStackPanelStore {\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    // Cluster Splitting\n\n    clusterSplittingPanelStackOpen: boolean = false;\n\n    /**\n     *\n     * can back to any step, and UI should refresh accordingly\n     *\n     * @type {(1 | 2 | 3)}\n     * @memberof HelperStackPanelStore\n     */\n    clusterSplittingCurrentStep: 1 | 2 | 3 = 1;\n\n    NodeSelectionPanelOpen: boolean = false;\n}\n","import { autorun, reaction } from \"mobx\";\n\nimport PreferencesStore, { VisualizationMode } from \"./PreferencesStore\";\nimport GraphStore from \"./GraphStore\";\nimport ImportStore from \"./ImportStore\";\nimport SearchStore from \"./SearchStore\";\nimport ClusterStore from \"./ClusterStore\";\nimport CssStore from \"./CssStore\";\nimport GraphDelegate from \"./GraphDelegate\";\nimport NodeInteractionStore from \"./NodeInteractionStore\";\nimport ClusterInteractionStore from \"./ClusterInteractionStore\";\nimport HelperStackPanelStore from \"./HelperStackPanelStore\";\nimport ComponentRef from \"../components/ComponentRef\";\n\nclass AppState {\n    static _instance: AppState | null = null;\n\n    preferences!: PreferencesStore;\n    graph!: GraphStore;\n    graphDelegate!: GraphDelegate;\n    interaction!: NodeInteractionStore;\n    clusterInteraction!: ClusterInteractionStore;\n    import!: ImportStore;\n    search!: SearchStore;\n    cluster!: ClusterStore;\n    helper!: HelperStackPanelStore;\n    css!: CssStore;\n\n    private privateConstructor() {\n        this.preferences = new PreferencesStore();\n        this.graph = new GraphStore();\n        this.graphDelegate = new GraphDelegate();\n        this.interaction = new NodeInteractionStore();\n        this.clusterInteraction = new ClusterInteractionStore();\n        this.import = new ImportStore();\n        this.search = new SearchStore();\n        this.cluster = new ClusterStore();\n        this.helper = new HelperStackPanelStore();\n        this.css = new CssStore();\n    }\n\n    // add singleton to prevent creating multiple instances of the State class\n    static get instance() {\n        if (AppState._instance === null) {\n            let instance = new AppState();\n            instance.privateConstructor();\n            AppState._instance = instance;\n            return instance;\n        } else {\n            return AppState._instance;\n        }\n    }\n}\n\nconst State = AppState.instance;\n\n// this is for easily debugging in runtime\n//@ts-ignore\nwindow._state = State;\n\n// extract CSV from selected edge File object and update related fields.\n// will auto run if selectedEdgeFileFromInput or delimiter or anything is changed.\nautorun(() => State.import.renderImportEdgePreview());\n\n// extract CSV from selected node File object and update related fields.\n// will auto run if selectedNodeFileFromInput or delimiter or anything is changed.\nautorun(() => State.import.renderImportNodePreview());\n\n// sync the rawGraph bi-directionally\nautorun(\n    () =>\n        (State.cluster.rawGraph = State.search.rawGraph = State.graph.rawGraph)\n);\n\n// set the graph to suspend animating according to State.css.isAnimating\nautorun(() => {\n    if (State.css.isAnimating) {\n        State.graphDelegate.graphDelegateMethods?.resumeAnimation();\n    } else {\n        State.graphDelegate.graphDelegateMethods?.pauseAnimation();\n    }\n});\n\n// if cluster selected, goto step 2\nautorun(() => {\n    if (\n        State.preferences.visualizationMode ===\n        VisualizationMode.ClusterSplitting\n    ) {\n        if (State.clusterInteraction.selectedCluster) {\n            State.helper.clusterSplittingCurrentStep = 2;\n            State.clusterInteraction.drawPanelActivate = true;\n            console.log(\"cluster selected\");\n        }\n    }\n});\n\n// the preparation and cleaning when changing of Step\nreaction(\n    () => State.helper.clusterSplittingCurrentStep,\n    (step) => {\n        console.log(`Graph Splitting change to step ${step}`);\n        switch (step) {\n            case 1:\n                State.clusterInteraction.confirmClusterSplittingTempData = null;\n                State.interaction.flush();\n                State.clusterInteraction.flush();\n                State.graphDelegate.graphDelegateMethods.refresh();\n                break;\n\n            case 2:\n                ComponentRef?.canvasDrawPanel.clearDrawing();\n                State.graph.rawGraph.forEachNode((node, oldAttributes) => {\n                    State.interaction.updateNodeVisualizeAttribute(\n                        node,\n                        { selected: false },\n                        oldAttributes._visualize\n                    );\n                });\n                State.clusterInteraction.confirmClusterSplittingTempData = null;\n                State.interaction.flush();\n                State.graphDelegate.graphDelegateMethods.refresh();\n\n                break;\n\n            case 3:\n                break;\n        }\n    }\n);\n\n// if graph is empty, suspend the animation to save computing power\nreaction(\n    () => State.graph.rawGraph?.order,\n    (number) => {\n        if (number === 0) {\n            State.css.isAnimating = false;\n            console.log(\"Pause Animating\");\n        } else {\n            State.css.isAnimating = true;\n            console.log(\"Resume Animating\");\n        }\n    },\n    { fireImmediately: true }\n);\n\n// auto highlight the hovered Cluster\nreaction(\n    () => State.clusterInteraction.currentlyHoveredClusterId,\n    (currentlyHoveredClusterId) => {\n        console.log(\"currentlyHoveredNodeId\", currentlyHoveredClusterId);\n        State.graphDelegate.clusterObject.updateAllMaterials();\n    }\n);\n\n// auto highlight the selected Cluster\nreaction(\n    () => State.clusterInteraction.selectedCluster,\n    () => {\n        State.graphDelegate.clusterObject.updateAllMaterials();\n    }\n);\n\n// auto highlight the selected Clusters\nreaction(\n    () => State.clusterInteraction.selectedClusters,\n    () => {\n        State.graphDelegate.clusterObject.updateAllMaterials();\n    }\n);\n\n// auto highlight the hovered Node\nreaction(\n    () => State.interaction.currentlyHoveredNodeId,\n    (currentlyHoveredNodeId) => {\n        console.log(\"currentlyHoveredNodeId\", currentlyHoveredNodeId);\n        State.graph.rawGraph.forEachNode((node, oldAttributes) => {\n            if (node === currentlyHoveredNodeId) {\n                State.interaction.updateNodeVisualizeAttribute(\n                    node,\n                    { hovered: true },\n                    oldAttributes._visualize\n                );\n            } else {\n                State.interaction.updateNodeVisualizeAttribute(\n                    node,\n                    { hovered: false },\n                    oldAttributes._visualize\n                );\n            }\n        });\n        State.graph.rawGraph.forEachEdge((edge, oldAttributes) => {\n            if (\n                State.interaction.currentlyHoveredNodeNeighborEdges?.includes(\n                    edge\n                )\n            ) {\n                State.interaction.updateEdgeVisualizeAttribute(\n                    edge,\n                    { hovered: true },\n                    oldAttributes._visualize\n                );\n            } else {\n                State.interaction.updateEdgeVisualizeAttribute(\n                    edge,\n                    { hovered: false },\n                    oldAttributes._visualize\n                );\n            }\n        });\n        State.graphDelegate.graphDelegateMethods.refresh();\n    }\n);\n\n// auto highlight the selected nodes\nreaction(\n    () => State.interaction.selectedNodes.map((node) => node),\n    (selectedNodes) => {\n        console.log(\"selectedNodes\", selectedNodes);\n        State.graph.rawGraph.forEachNode((node, oldAttributes) => {\n            if (selectedNodes.includes(node)) {\n                State.interaction.updateNodeVisualizeAttribute(\n                    node,\n                    { multiSelected: true },\n                    oldAttributes._visualize\n                );\n            } else {\n                State.interaction.updateNodeVisualizeAttribute(\n                    node,\n                    { multiSelected: false },\n                    oldAttributes._visualize\n                );\n            }\n        });\n        State.graphDelegate.graphDelegateMethods.refresh();\n    }\n);\n\n// auto highlight the selected node\nreaction(\n    () => State.interaction.selectedNode,\n    (selectedNode) => {\n        console.log(\"selectedNode\", selectedNode);\n        State.graph.rawGraph.forEachNode((node, oldAttributes) => {\n            if (selectedNode === node) {\n                State.interaction.updateNodeVisualizeAttribute(\n                    node,\n                    { selected: true },\n                    oldAttributes._visualize\n                );\n            } else {\n                State.interaction.updateNodeVisualizeAttribute(\n                    node,\n                    { selected: false },\n                    oldAttributes._visualize\n                );\n            }\n        });\n        State.graphDelegate.graphDelegateMethods.refresh();\n    }\n);\n\n// auto highlight the selected edges\nreaction(\n    () => State.interaction.selectedEdge,\n    (selectedEdge) => {\n        console.log(\"selectedEdge\", selectedEdge);\n        State.graph.rawGraph.forEachEdge((edge, oldAttributes) => {\n            if (selectedEdge === edge) {\n                State.interaction.updateEdgeVisualizeAttribute(\n                    edge,\n                    { selected: true },\n                    oldAttributes._visualize\n                );\n            } else {\n                State.interaction.updateEdgeVisualizeAttribute(\n                    edge,\n                    { selected: false },\n                    oldAttributes._visualize\n                );\n            }\n        });\n        State.graphDelegate.graphDelegateMethods.refresh();\n    }\n);\n\nexport default State;\n","import React, { MouseEventHandler } from \"react\";\nimport { Button, MenuItem } from \"@blueprintjs/core\";\nimport { Select } from \"@blueprintjs/select\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport { copy } from \"copy-anything\";\n\ninterface Props {\n    /**\n     * whether or not to show the None\n     *\n     * @type {string}\n     * @memberof Props\n     */\n    showNone: boolean;\n\n    /**\n     * function to call when a candidate is selected, will be called on every selection of candidate\n     * if None is selected, the item props will be set to null\n     *\n     * @memberof Props\n     */\n    onSelect: (item: string | null) => void;\n\n    /**\n     * the selected to display will sync with this props\n     *\n     * @type {(string | null)}\n     * @memberof Props\n     */\n    syncWith: string | null;\n}\n\ninterface CustomIItemRendererProps {\n    handleClick: MouseEventHandler<HTMLElement>;\n}\n\n/**\n * this component can be used to choose the attribute among all the attributes, with addition none to choose (can be toggled to off)\n * to use it, you have to specify whether to add additional None to the list and onChange function to call when a candidate is selected\n */\nexport default observer(\n    class ClusterChooser extends React.Component<Props, {}> {\n        static defaultProps = {\n            showNone: true,\n        };\n\n        get fullProperties(): string[] {\n            let propertiesWithNone = copy(State.graph.metadata.nodeProperties);\n            propertiesWithNone.unshift(\"None\");\n            return propertiesWithNone;\n        }\n\n        itemRenderer = (\n            item: any,\n            props: CustomIItemRendererProps\n        ): JSX.Element | null => {\n            if (item === \"None\") {\n                return (\n                    <MenuItem\n                        intent=\"primary\"\n                        key={item}\n                        onClick={props.handleClick}\n                        text={item}\n                    />\n                );\n            } else {\n                return (\n                    <MenuItem\n                        key={item}\n                        onClick={props.handleClick}\n                        text={item}\n                    />\n                );\n            }\n        };\n\n        render() {\n            return (\n                <Select\n                    items={\n                        this.props.showNone\n                            ? this.fullProperties\n                            : State.graph.metadata.nodeProperties\n                    }\n                    itemRenderer={this.itemRenderer}\n                    filterable={false}\n                    onItemSelect={(item: string) => {\n                        let selected = item === \"None\" ? null : item;\n                        this.props.onSelect(selected);\n                    }}\n                >\n                    <Button\n                        text={this.props.syncWith ?? this.fullProperties[0]}\n                    />\n                </Select>\n            );\n        }\n    }\n);\n","export default __webpack_public_path__ + \"static/media/logo.25a51149.png\";","import React, { MouseEventHandler } from \"react\";\nimport { Button, MenuItem } from \"@blueprintjs/core\";\nimport { ItemPredicate, Select } from \"@blueprintjs/labs\";\nimport { observer } from \"mobx-react\";\n\ninterface Props {\n    items: any[];\n    onSelect: (\n        item: any,\n        event?: React.SyntheticEvent<HTMLElement, Event> | undefined\n    ) => void;\n    text: string;\n    small: boolean;\n    search: boolean;\n}\n\ninterface CustomIItemRendererProps {\n    handleClick: MouseEventHandler<HTMLElement>;\n}\n\nexport function CommonItemRenderer(\n    item: any,\n    props: CustomIItemRendererProps\n): JSX.Element | null {\n    return <MenuItem key={item} onClick={props.handleClick} text={item} />;\n}\n\nexport default observer(\n    class SimpleSelect extends React.Component<Props, {}> {\n        static defaultProps = {\n            small: false,\n            search: false,\n        };\n\n        itemPredicate: ItemPredicate<string> = (\n            query: string,\n            object: string\n        ) => {\n            return object.toLowerCase().indexOf(query.toLowerCase()) >= 0;\n        };\n        render() {\n            if (this.props.search) {\n                return (\n                    <Select\n                        items={this.props.items}\n                        itemPredicate={this.itemPredicate}\n                        itemRenderer={CommonItemRenderer}\n                        filterable={true}\n                        onItemSelect={this.props.onSelect}\n                        noResults={\n                            <MenuItem disabled={true} text=\"No results.\" />\n                        }\n                    >\n                        <Button\n                            text={this.props.text}\n                            small={this.props.small}\n                        />\n                    </Select>\n                );\n            } else {\n                return (\n                    <Select\n                        items={this.props.items}\n                        itemRenderer={CommonItemRenderer}\n                        filterable={false}\n                        onItemSelect={this.props.onSelect}\n                    >\n                        <Button\n                            text={this.props.text}\n                            small={this.props.small}\n                        />\n                    </Select>\n                );\n            }\n        }\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport {\n    Button,\n    ButtonGroup,\n    Classes,\n    Menu,\n    MenuDivider,\n    MenuItem,\n    Popover,\n    Position,\n    Switch,\n} from \"@blueprintjs/core\";\nimport ClusterChooser from \"./utils/ClusterChooser\";\nimport logo from \"../images/logo.png\";\nimport State from \"../state\";\nimport SimpleSelect from \"./utils/SimpleSelect\";\nimport ComponentRef from \"./ComponentRef\";\n\nexport default observer(\n    class Navbar extends React.Component {\n        render() {\n            return (\n                <nav className={classnames([Classes.NAVBAR])}>\n                    <div\n                        className={classnames([\n                            Classes.NAVBAR_GROUP,\n                            Classes.ALIGN_LEFT,\n                        ])}\n                    >\n                        <img\n                            title=\"PiperNet\"\n                            id=\"PiperNet Logo\"\n                            src={logo}\n                            width=\"35\"\n                            height=\"35\"\n                            alt=\"PiperNet Logo\"\n                        />\n                        <div className={classnames([Classes.NAVBAR_HEADING])}>\n                            {\" \"}\n                            PiperNet{\" \"}\n                        </div>\n\n                        <Popover\n                            content={\n                                <Menu>\n                                    <MenuItem\n                                        text=\"Import from CSV\"\n                                        icon=\"import\"\n                                        onClick={() => {\n                                            State.import.importDialogOpen = true;\n                                        }}\n                                    >\n                                        {/* {SAMPLE_GRAPH_SNAPSHOTS.map(\n                                            (sample) => {\n                                                const sampleSnapshotTitle =\n                                                    sample[0];\n                                                const sampleSnapshotUrl =\n                                                    sample[1];\n\n                                                return (\n                                                    <MenuItem\n                                                        icon=\"graph\"\n                                                        text={\n                                                            sampleSnapshotTitle\n                                                        }\n                                                        disabled={true}\n                                                        onClick={() => {\n                                                            fetchSampleGraph(\n                                                                sampleSnapshotUrl\n                                                            ).then((file) => {\n                                                                State.import.selectedGEXFFileFromInput = file;\n                                                                State.import\n                                                                    .importGraphFromGEXF()\n                                                                    .then(\n                                                                        (\n                                                                            res\n                                                                        ) => {\n                                                                            State.graph.rawGraph =\n                                                                                res.graph;\n                                                                            State.graph.metadata =\n                                                                                res.metadata;\n                                                                        }\n                                                                    );\n                                                            });\n                                                        }}\n                                                    />\n                                                );\n                                            }\n                                        )} */}\n                                    </MenuItem>\n\n                                    <MenuItem\n                                        icon=\"import\"\n                                        text=\"Open GEXF\"\n                                        onClick={() => {\n                                            State.import.importGEXFDialogOpen = true;\n                                        }}\n                                    />\n                                    <MenuDivider />\n                                    <MenuItem\n                                        icon=\"download\"\n                                        text=\"Export Graph\"\n                                        onClick={() => {\n                                            State.preferences.exportDialogOpen = true;\n                                        }}\n                                    />\n                                </Menu>\n                            }\n                            position={Position.BOTTOM}\n                        >\n                            <Button\n                                className={classnames([\n                                    Classes.BUTTON,\n                                    Classes.MINIMAL,\n                                ])}\n                                icon=\"document\"\n                            >\n                                Graph\n                            </Button>\n                        </Popover>\n                        <Popover\n                            content={\n                                <Menu>\n                                    <MenuItem\n                                        text=\"Node DataSheet\"\n                                        icon=\"ungroup-objects\"\n                                        onClick={() => {\n                                            State.preferences.nodeDataSheetDialogOpen = true;\n                                        }}\n                                    />\n                                    <MenuItem\n                                        text=\"Edge DataSheet\"\n                                        icon=\"link\"\n                                        onClick={() => {\n                                            State.preferences.edgeDataSheetDialogOpen = true;\n                                        }}\n                                    />\n                                    {/* <MenuItem\n                                        text=\"Statistics\"\n                                        icon=\"timeline-bar-chart\"\n                                        onClick={() => {\n                                            State.preferences.statisticsDialogOpen = true;\n                                        }}\n                                    /> */}\n                                </Menu>\n                            }\n                            position={Position.BOTTOM}\n                        >\n                            <Button\n                                className={classnames([\n                                    Classes.BUTTON,\n                                    Classes.MINIMAL,\n                                ])}\n                                icon=\"wrench\"\n                            >\n                                Tools\n                            </Button>\n                        </Popover>\n                        <Switch\n                            style={{ marginTop: 10, marginLeft: 8 }}\n                            label=\"Graph Animation\"\n                            checked={State.css.isAnimating}\n                            onChange={() =>\n                                (State.css.isAnimating = !State.css.isAnimating)\n                            }\n                        />\n                    </div>\n                    {/* <div\n                    className={classnames([\n                        Classes.NAVBAR_GROUP,\n                        Classes.ALIGN_LEFT,\n                    ])}\n                >\n                    <span className={Classes.NAVBAR_DIVIDER} />\n                    {appState.graph.hasGraph && appState.graph.frame && (\n                        <div style={{ display: \"inline\" }}>\n                            <Tooltip\n                                content={\n                                    appState.graph.frame.paused\n                                        ? \"Resume Layout Algorithm\"\n                                        : \"Pause Layout Algorithm\"\n                                }\n                                position={Position.BOTTOM}\n                            >\n                                <Button\n                                    className={classnames([\n                                        Classes.BUTTON,\n                                        Classes.MINIMAL,\n                                    ])}\n                                    icon={\n                                        appState.graph.frame.paused\n                                            ? \"play\"\n                                            : \"pause\"\n                                    }\n                                    text={\n                                        appState.graph.frame.paused\n                                            ? \"Resume Layout\"\n                                            : \"Pause Layout\"\n                                    }\n                                    onClick={() => {\n                                        if (appState.graph.frame.paused) {\n                                            appState.graph.frame.resumeLayout();\n                                            this.forceUpdate();\n                                        } else {\n                                            appState.graph.frame.pauseLayout();\n                                            this.forceUpdate();\n                                        }\n                                    }}\n                                />\n                            </Tooltip>\n                        </div>\n                    )}\n                </div> */}\n                    <ButtonGroup>\n                        {/* <SimpleSelect\n                            className={classnames([Classes.ALERT_CONTENTS])}\n                            items={[\"3D\", \"2D\"]}\n                            value={State.preferences.view}\n                            onSelect={(it) => (State.preferences.view = it)}\n                        />\n                        <Divider /> */}\n                    </ButtonGroup>\n\n                    <div\n                        className={classnames([\n                            Classes.NAVBAR_GROUP,\n                            Classes.ALIGN_RIGHT,\n                        ])}\n                    >\n                        <div style={{ marginRight: 6 }}>Clustered by</div>\n                        <ClusterChooser\n                            onSelect={(cluster) => {\n                                State.cluster.setCluster(cluster);\n                            }}\n                            syncWith={State.cluster.clusterBy}\n                        />\n                        <span className={Classes.NAVBAR_DIVIDER} />\n                        <SimpleSelect\n                            items={[\"trackball\", \"orbit\", \"fly\"]}\n                            text={State.preferences.controlType}\n                            onSelect={(it) => {\n                                State.preferences.controlType = it;\n                                ComponentRef.visualizer.updateVisualizationGraph();\n                            }}\n                        />\n                        <span className={Classes.NAVBAR_DIVIDER} />\n                        <Button\n                            className={classnames([\n                                Classes.BUTTON,\n                                Classes.MINIMAL,\n                            ])}\n                            icon=\"cog\"\n                            disabled={true}\n                            onClick={() => {\n                                State.preferences.preferenceDialogOpen = true;\n                            }}\n                        />\n                        <Button\n                            className={classnames([\n                                Classes.BUTTON,\n                                Classes.MINIMAL,\n                            ])}\n                            icon=\"code\"\n                            onClick={() => {\n                                window.open(\n                                    \"https://github.com/grp202004/PiperNet\"\n                                );\n                            }}\n                        />\n                    </div>\n                </nav>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport {\n    Callout,\n    Card,\n    Classes,\n    Divider,\n    FileInput,\n    Spinner,\n    Switch,\n    Tag,\n    MultistepDialog,\n    DialogStep,\n    IButtonProps,\n    H4,\n    H2,\n} from \"@blueprintjs/core\";\nimport { Cell, Column, Table } from \"@blueprintjs/table\";\nimport classnames from \"classnames\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport SimpleSelect from \"../utils/SimpleSelect\";\nimport { IEdgeFileConfig, INodeFileConfig } from \"../../state/ImportStore\";\nimport ClusterChooser from \"../utils/ClusterChooser\";\n\ninterface PreviewTableProps {\n    file: INodeFileConfig | IEdgeFileConfig;\n}\n\nlet PreviewTable = observer(\n    class PreviewTable extends React.Component<PreviewTableProps, {}> {\n        file = this.props.file;\n\n        renderWrapper = () => {\n            return this.file.parseError ? (\n                <Callout title={\"Error Parsing File\"} intent=\"warning\">\n                    Try with other options of <code>Delimiter</code> or review\n                    the file for import to find possible problems.\n                </Callout>\n            ) : (\n                <div>\n                    <Table\n                        className=\"import-preview-table\"\n                        numRows={this.file.topN.length}\n                        selectedRegions={Object.values(this.file.mapping)\n                            .map((it) => this.file.columns.indexOf(it))\n                            .map((it) => ({ rows: null, cols: [it, it] }))}\n                    >\n                        {this.file.columns.map((it) => (\n                            <Column\n                                key={it}\n                                name={it}\n                                cellRenderer={(i) => (\n                                    <Cell>{this.file.topN[i][it]}</Cell>\n                                )}\n                            />\n                        ))}\n                    </Table>\n                    <Tag>\n                        Only the top {this.file.topN.length} rows of the\n                        selected file are displayed.\n                    </Tag>\n                </div>\n            );\n        };\n\n        render() {\n            return this.renderWrapper();\n        }\n    }\n);\n\nexport default observer(\n    class ImportDialog extends React.Component {\n        private multiDialogRef = React.createRef<MultistepDialog>();\n\n        state = {\n            delimiter: \",\",\n            step: 0,\n        };\n\n        // nextButtonProps = {\n        //     disabled:\n        //         (this.state.step === 0 &&\n        //             !State.import.importConfig.edgeFile.isReady) ||\n        //         !(\n        //             this.state.step === 2 &&\n        //             (!State.import.importConfig.hasNodeFile ||\n        //                 (State.import.importConfig.hasNodeFile &&\n        //                     State.import.importConfig.nodeFile.isReady))\n        //         ),\n        // };\n\n        canImport = () => {\n            if (State.import.importConfig.hasNodeFile) {\n                return (\n                    State.import.importConfig.edgeFile.isReady &&\n                    State.import.importConfig.nodeFile.isReady\n                );\n            } else {\n                return State.import.importConfig.edgeFile.isReady;\n            }\n        };\n\n        renderNodesSelection = () => {\n            const nodeFile = State.import.importConfig.nodeFile;\n\n            return State.import.importConfig.hasNodeFile ? (\n                <>\n                    <FileInput\n                        text={State.import.nodeFileName}\n                        onInputChange={(event) => {\n                            let target = event.target as HTMLInputElement;\n                            if (!target.files || target.files.length < 1) {\n                                return;\n                            }\n                            State.import.importConfig.hasNodeFile = true;\n                            State.import.nodeFileName = target.files[0].name;\n                            // after setting the selectedNodeFileFromInput, it will auto render the preview table\n                            State.import.selectedNodeFileFromInput =\n                                target.files[0];\n                        }}\n                    />\n\n                    <Switch\n                        label=\"Has Headers\"\n                        checked={nodeFile.hasHeader}\n                        onChange={() =>\n                            (nodeFile.hasHeader = !nodeFile.hasHeader)\n                        }\n                    />\n                    {nodeFile.isReady && (\n                        <div className=\"column-selection\">\n                            <PreviewTable file={nodeFile} />\n                            <br />\n                            Column for Node ID:\n                            <SimpleSelect\n                                items={nodeFile.columns}\n                                text={nodeFile.mapping.id}\n                                onSelect={(it) => (nodeFile.mapping.id = it)}\n                            />\n                        </div>\n                    )}\n                </>\n            ) : (\n                <H4>You don't need to import node file</H4>\n            );\n        };\n\n        renderEdgesSelection = () => {\n            const edgeFile = State.import.importConfig.edgeFile;\n            return (\n                <>\n                    <FileInput\n                        text={State.import.edgeFileName}\n                        onInputChange={(event) => {\n                            let target = event.target as HTMLInputElement;\n                            if (!target.files || target.files.length < 1) {\n                                return;\n                            }\n                            State.import.edgeFileName = target.files[0].name;\n                            State.import.selectedEdgeFileFromInput =\n                                target.files[0];\n                        }}\n                    />\n                    <Switch\n                        label=\"Has Headers\"\n                        checked={edgeFile.hasHeader}\n                        onChange={() =>\n                            (edgeFile.hasHeader = !edgeFile.hasHeader)\n                        }\n                    />\n                    {edgeFile.isReady && (\n                        <div>\n                            <PreviewTable file={edgeFile} />\n                            <br />\n                            Column for Source ID:\n                            <SimpleSelect\n                                items={edgeFile.columns}\n                                text={edgeFile.mapping.fromId}\n                                onSelect={(it) =>\n                                    (edgeFile.mapping.fromId = it)\n                                }\n                            />\n                            <br />\n                            Column for Target ID:\n                            <SimpleSelect\n                                items={edgeFile.columns}\n                                text={edgeFile.mapping.toId}\n                                onSelect={(it) => (edgeFile.mapping.toId = it)}\n                            />\n                        </div>\n                    )}\n                </>\n            );\n        };\n\n        renderDelimiterSelection() {\n            return (\n                <div>\n                    Selected Delimiter\n                    <SimpleSelect\n                        items={[\",\", \"\\\\t\", \";\", \"[SPACE]\"]}\n                        text={this.state.delimiter}\n                        onSelect={(newDelimiter) => {\n                            this.setState({ delimiter: newDelimiter });\n\n                            if (newDelimiter === \"\\\\t\") {\n                                newDelimiter = \"\\t\";\n                            } else if (newDelimiter === \"[SPACE]\") {\n                                newDelimiter = \" \";\n                            }\n\n                            State.import.importConfig.edgeFile.delimiter = newDelimiter;\n                            State.import.importConfig.nodeFile.delimiter = newDelimiter;\n                        }}\n                    />{\" \"}\n                </div>\n            );\n        }\n\n        importedNodes = () => {\n            return <Cell>{State.graph.rawGraph.order}</Cell>;\n        };\n\n        importedEdges = () => {\n            return <Cell>{State.graph.rawGraph.size}</Cell>;\n        };\n\n        closeDialog = () => {\n            State.import.importDialogOpen = false;\n        };\n\n        finalButtonProps: Partial<IButtonProps> = {\n            intent: \"primary\",\n            // disabled: this.canImport(),\n            onClick: () => {\n                State.import.isLoading = true;\n                State.import.importGraphFromCSV().then((res) => {\n                    State.graph.setGraph(res.graph, res.metadata);\n\n                    if (State.cluster.rawGraph.hasAttribute(\"default\")) {\n                        State.cluster.setCluster(\n                            State.graph.rawGraph.getAttribute(\"default\")\n                        );\n                    }\n\n                    State.import.isLoading = false;\n                    State.import.importDialogOpen = false;\n                });\n            },\n            text: \"Import\",\n        };\n\n        render() {\n            return (\n                <MultistepDialog\n                    ref={this.multiDialogRef}\n                    className={classnames(\"multistep-dialog-box\")}\n                    icon=\"import\"\n                    isOpen={State.import.importDialogOpen}\n                    onClose={() => {\n                        State.import.importDialogOpen = false;\n                    }}\n                    // nextButtonProps={this.nextButtonProps}\n                    finalButtonProps={this.finalButtonProps}\n                    onChange={(id) => {\n                        this.setState({\n                            step: id,\n                        });\n                    }}\n                    title=\"Open Files\"\n                >\n                    <DialogStep\n                        id=\"csv_edge\"\n                        title=\"Choose a Edge file\"\n                        panel={\n                            <div\n                                className={classnames(\n                                    Classes.DIALOG_BODY,\n                                    \"multistep-dialog-body\"\n                                )}\n                                style={{\n                                    justifyContent: \"center\",\n                                    alignItems: \"center\",\n                                    display: \"flex\",\n                                }}\n                            >\n                                {State.import.isLoading ? (\n                                    <Spinner />\n                                ) : (\n                                    <div>\n                                        <div\n                                            className={classnames(\n                                                Classes.DIALOG_BODY,\n                                                \"import-dialog\"\n                                            )}\n                                            style={{ maxWidth: \"40vw\" }}\n                                        >\n                                            {this.renderEdgesSelection()}\n                                            <br />\n                                            {this.renderDelimiterSelection()}\n                                        </div>\n                                    </div>\n                                )}\n                            </div>\n                        }\n                    />\n                    <DialogStep\n                        id=\"csv_node_need\"\n                        title=\"Do i need to import node file ?\"\n                        panel={\n                            <div\n                                className={classnames(\n                                    Classes.DIALOG_BODY,\n                                    \"multistep-dialog-body\"\n                                )}\n                                style={{\n                                    justifyContent: \"center\",\n                                    alignItems: \"center\",\n                                }}\n                            >\n                                <H2>Do i need to import node file?</H2>\n                                <H4>\n                                    You can import nodes file to add node\n                                    attributes to this graph\n                                </H4>\n                                <p>\n                                    To import attributes we will need to proceed\n                                    another csv files: a list of nodes, Nodes\n                                    must have at least an ID, other fields are\n                                    optional\n                                </p>\n                                <br />\n                                <Switch\n                                    large={true}\n                                    checked={\n                                        State.import.importConfig.hasNodeFile\n                                    }\n                                    label=\"I want to import node file\"\n                                    onChange={() =>\n                                        (State.import.importConfig.hasNodeFile = !State\n                                            .import.importConfig.hasNodeFile)\n                                    }\n                                />\n                            </div>\n                        }\n                    />\n                    <DialogStep\n                        id=\"csv_node\"\n                        title=\"Choose a Node file\"\n                        panel={\n                            <div\n                                className={classnames(\n                                    Classes.DIALOG_BODY,\n                                    \"multistep-dialog-body\"\n                                )}\n                                style={{\n                                    justifyContent: \"center\",\n                                    alignItems: \"center\",\n                                    display: \"flex\",\n                                }}\n                            >\n                                {State.import.isLoading ? (\n                                    <Spinner />\n                                ) : (\n                                    <div>\n                                        <div\n                                            className={classnames(\n                                                Classes.DIALOG_BODY,\n                                                \"import-dialog\"\n                                            )}\n                                            style={{ maxWidth: \"40vw\" }}\n                                        >\n                                            {this.renderNodesSelection()}\n                                        </div>\n                                    </div>\n                                )}\n                            </div>\n                        }\n                    />\n                    {/* <DialogStep\n                        id=\"Info\"\n                        title=\"Informtion of graph\"\n                        panel={\n                            <div>\n                                <Card>\n                                    <Table numRows={1}>\n                                        <Column\n                                            name=\" number of Nodes \"\n                                            cellRenderer={this.importedNodes}\n                                        />\n                                        <Column\n                                            name=\" number of Edges \"\n                                            cellRenderer={this.importedEdges}\n                                        />\n                                    </Table>\n                                </Card>\n                                <br />\n                                <Divider />\n                                <div>\n                                    Set an attribute for cluster:\n                                    <ClusterChooser\n                                        onSelect={(cluster) => {\n                                            State.cluster.setCluster(cluster);\n                                        }}\n                                        syncWith={State.cluster.clusterBy}\n                                    />\n                                </div>\n                            </div>\n                        }\n                    /> */}\n                </MultistepDialog>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport {\n    Button,\n    ButtonGroup,\n    Card,\n    Classes,\n    Dialog,\n    Divider,\n    Elevation,\n    H3,\n    Spinner,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport gexf from \"graphology-gexf/browser\";\nimport State from \"../../state\";\nimport { CSVLink } from \"react-csv\";\n\nexport default observer(\n    class ExportDialog extends React.Component {\n        state = {\n            ready: true,\n        };\n\n        /**\n         * compute the GEXF file from rawGraph\n         * delete the temporary _visualize attribute from the graph\n         *\n         * @returns {*}\n         */\n        computeGEXFFile() {\n            let graphCopy = State.graph.rawGraph.copy();\n            graphCopy.forEachNode((_node, attributes: any) => {\n                delete attributes[\"_visualize\"];\n            });\n            graphCopy.forEachEdge((_edge, attributes: any) => {\n                delete attributes[\"_visualize\"];\n            });\n            return gexf.write(graphCopy);\n        }\n\n        computeNodeFile() {\n            let headers: {\n                label: string;\n                key: string;\n            }[] = [];\n            headers.push({ label: \"_id\", key: \"_id\" });\n            State.graph.metadata.nodeProperties.map((value) => {\n                headers.push({ label: value, key: value });\n                return null;\n            });\n            \n            let exportData = State.graph.rawGraph.export();\n            let data: any[] = [];\n            exportData.nodes.forEach((node) => {\n                data.push({\n                    _id: node.key,\n                    ...node.attributes,\n                });\n            });\n            return { headers: headers, data: data };\n        }\n\n        computeEdgeFile() {\n            let headers: {\n                label: string;\n                key: string;\n            }[] = [\n                { label: \"source\", key: \"source\" },\n                { label: \"target\", key: \"target\" },\n            ];\n\n            let exportData = State.graph.rawGraph.export();\n            let data: any[] = [];\n            exportData.edges.forEach((edge) => {\n                data.push({\n                    source: edge.source,\n                    target: edge.target,\n                });\n            });\n            return { headers: headers, data: data };\n        }\n\n        render() {\n            return (\n                <Dialog\n                    icon=\"projects\"\n                    isOpen={State.preferences.exportDialogOpen}\n                    onClose={() => {\n                        State.preferences.exportDialogOpen = false;\n                    }}\n                    title={`Export Graph`}\n                >\n                    {!this.state.ready ? (\n                        <Spinner />\n                    ) : (\n                        <div className={classnames(Classes.DIALOG_BODY)}>\n                            <Card interactive={false} elevation={Elevation.ONE}>\n                                <H3>\n                                    GEXF Export{\" \"}\n                                    <Button\n                                        icon=\"help\"\n                                        minimal={true}\n                                        onClick={() => {\n                                            window.open(\n                                                \"https://gephi.org/gexf/format/\"\n                                            );\n                                        }}\n                                    />\n                                </H3>\n                                <Divider />\n\n                                <CSVLink\n                                    data={this.computeGEXFFile()}\n                                    filename={\"Snapshot-GEXF.gexf\"}\n                                    className=\"btn btn-primary\"\n                                    target=\"_blank\"\n                                >\n                                    <Button>Download GEXF File</Button>\n                                </CSVLink>\n                            </Card>\n                            <br />\n                            <Card interactive={false} elevation={Elevation.ONE}>\n                                <H3>\n                                    CSV Export{\" \"}\n                                    <Button\n                                        icon=\"help\"\n                                        minimal={true}\n                                        onClick={() => {\n                                            window.open(\n                                                \"https://github.com/grp202004/PiperNet#data-import\"\n                                            );\n                                        }}\n                                    />\n                                </H3>\n\n                                <Divider />\n                                <ButtonGroup>\n                                    <CSVLink\n                                        data={this.computeNodeFile().data}\n                                        headers={this.computeNodeFile().headers}\n                                        separator={\",\"}\n                                        filename={\"Snapshot-Node.csv\"}\n                                        className=\"btn btn-primary\"\n                                        target=\"_blank\"\n                                    >\n                                        <Button>Download Node File</Button>\n                                    </CSVLink>\n                                    <Divider />\n                                    <CSVLink\n                                        data={this.computeEdgeFile().data}\n                                        headers={this.computeEdgeFile().headers}\n                                        separator={\",\"}\n                                        filename={\"Snapshot-Edge.csv\"}\n                                        className=\"btn btn-primary\"\n                                        target=\"_blank\"\n                                    >\n                                        <Button>Download Edge File</Button>\n                                    </CSVLink>\n                                </ButtonGroup>\n                            </Card>\n                        </div>\n                    )}\n                </Dialog>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Classes, Dialog } from \"@blueprintjs/core\";\nimport { Column, Table, TableLoadingOption } from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../state\";\n\ninterface Props {\n    for: string;\n    children: React.ReactNode;\n}\n\nexport default observer(\n    class DataSheetDialogWrapper extends React.Component<Props, {}> {\n        state = {\n            loading: true,\n        };\n\n        renderTable() {\n            if (this.state.loading) {\n                return (\n                    <div className=\"argo-table-container\">\n                        <Table\n                            className=\"pt-bordered pt-striped\"\n                            numRows={20}\n                            loadingOptions={[\n                                TableLoadingOption.CELLS,\n                                TableLoadingOption.COLUMN_HEADERS,\n                                TableLoadingOption.ROW_HEADERS,\n                            ]}\n                        >\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                            <Column />\n                        </Table>\n                    </div>\n                );\n            } else {\n                return this.props.children;\n            }\n        }\n\n        render() {\n            return (\n                <Dialog\n                    icon=\"database\"\n                    isOpen={\n                        this.props.for === \"node\"\n                            ? State.preferences.nodeDataSheetDialogOpen\n                            : State.preferences.edgeDataSheetDialogOpen\n                    }\n                    onOpened={() => {\n                        setTimeout(() => {\n                            this.setState({\n                                loading: false,\n                            });\n                        }, 100);\n                    }}\n                    onClose={() => {\n                        if (this.props.for === \"node\") {\n                            State.preferences.nodeDataSheetDialogOpen = false;\n                        } else {\n                            State.preferences.edgeDataSheetDialogOpen = false;\n                        }\n                        this.setState({\n                            loading: true,\n                        });\n                    }}\n                    title=\"Data Sheet\"\n                    style={{ minWidth: \"80vw\" }}\n                >\n                    <div className={classnames(Classes.DIALOG_BODY)}>\n                        {this.renderTable()}\n                    </div>\n                </Dialog>\n            );\n        }\n    }\n);\n","import { Attributes } from \"graphology-types\";\nimport React from \"react\";\n\n/** Event handler that exposes the target element's value as a boolean. */\nexport function handleBooleanChange(handler: (checked: boolean) => void) {\n    return (event: React.FormEvent<HTMLElement>) =>\n        handler((event.target as HTMLInputElement).checked);\n}\n\n/** Event handler that exposes the target element's value as a string. */\nexport function handleStringChange(handler: (value: string) => void) {\n    return (event: React.FormEvent<HTMLElement>) =>\n        handler((event.target as HTMLInputElement).value);\n}\n\n/** Event handler that exposes the target element's value as an inferred generic type. */\nexport function handleValueChange<T>(handler: (value: T) => void) {\n    return (event: React.FormEvent<HTMLElement>) =>\n        handler(((event.target as HTMLInputElement).value as unknown) as T);\n}\n\n/** Event handler that exposes the target element's value as a number. */\nexport function handleNumberChange(handler: (value: number) => void) {\n    return handleStringChange((value) => handler(+value));\n}\n\nexport function stringifyNodeDetail(attributes: Attributes): string {\n    let res = \"\";\n    for (var attribute in attributes) {\n        if (\n            attributes.hasOwnProperty(attribute) &&\n            attribute !== \"_visualize\" &&\n            attribute !== \"_options\"\n        ) {\n            res += attribute + \" : \" + attributes[attribute] + \" ; \";\n        }\n    }\n\n    return res;\n}\n\nexport function parseNumberOrString(value: string): string | number {\n    let numberVal = Number(value);\n    if (isNaN(numberVal)) {\n        return value;\n    } else {\n        return numberVal;\n    }\n}\n","import React from \"react\";\nimport {\n    Alert,\n    Button,\n    ButtonGroup,\n    Callout,\n    Code,\n    Divider,\n    InputGroup,\n    Intent,\n} from \"@blueprintjs/core\";\nimport {\n    Cell,\n    Column,\n    EditableCell,\n    ICellRenderer,\n    Table,\n} from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport DataSheetDialogWrapper from \"../utils/DataSheetDialogWrapper\";\nimport {\n    handleStringChange,\n    parseNumberOrString,\n    stringifyNodeDetail,\n} from \"../utils/InputFormUtils\";\nimport { Attributes, SerializedNode } from \"graphology-types\";\n\nlet GraphNodeTable = observer(\n    class GraphNodeTable extends React.Component {\n        state = {\n            filterQuery: \"\",\n            addNodeDialogOpen: false,\n            deleteAlertOpen: false,\n            nodeToDelete: null as SerializedNode | null,\n        };\n\n        get filteredTable() {\n            let newTable: SerializedNode[] = [];\n            State.graph.rawGraph.export().nodes.forEach((node) => {\n                if (\n                    node.key\n                        .toLocaleLowerCase()\n                        .includes(this.state.filterQuery.toLocaleLowerCase()) ||\n                    this.state.filterQuery === \"\"\n                ) {\n                    newTable.push(node);\n                }\n            });\n            return newTable;\n        }\n\n        nodeProperties = State.graph.metadata.nodeProperties;\n\n        renderColumns: any = () => {\n            const columns = this.nodeProperties.map((it, i) => {\n                if (it !== \"_options\") {\n                    return (\n                        <Column\n                            name={it}\n                            cellRenderer={(\n                                rowIndex: number,\n                                columnIndex: number\n                            ) => this.renderCell(rowIndex, it)}\n                        />\n                    );\n                }\n                return null;\n            });\n            return columns.filter((element) => {\n                return element !== undefined;\n            });\n        };\n\n        renderCell = (rowIndex: number, attribute: string) => {\n            let cellAttributes = this.filteredTable[rowIndex].attributes!!;\n            let cell = cellAttributes[attribute];\n\n            return (\n                <EditableCell\n                    value={cell}\n                    onChange={(newVal) =>\n                        this.setValue(newVal, rowIndex, attribute)\n                    }\n                    onConfirm={(newVal) =>\n                        this.setValue(newVal, rowIndex, attribute)\n                    }\n                    tooltip={cell}\n                />\n            );\n        };\n\n        // if the input is a number in string, it will convert the string into number to store\n        setValue = (value: string, rowIndex: number, attribute: string) => {\n            let id = this.filteredTable[rowIndex].key;\n            State.graph.rawGraph.setNodeAttribute(\n                id,\n                attribute,\n                parseNumberOrString(value)\n            );\n        };\n\n        deleteNodeRenderer: ICellRenderer = (rowIndex) => {\n            return (\n                <Cell>\n                    <Button\n                        onClick={() => {\n                            this.setState({\n                                nodeToDelete: this.filteredTable[rowIndex],\n                                deleteAlertOpen: true,\n                            });\n                        }}\n                        icon=\"trash\"\n                        intent=\"danger\"\n                        text=\"Delete\"\n                        minimal={true}\n                    />\n                </Cell>\n            );\n        };\n\n        deleteNodeAlert = () => {\n            return (\n                <Alert\n                    cancelButtonText=\"Cancel\"\n                    confirmButtonText=\"Confirm Delete\"\n                    icon=\"trash\"\n                    intent={Intent.DANGER}\n                    isOpen={this.state.deleteAlertOpen}\n                    onCancel={() => this.setState({ deleteAlertOpen: false })}\n                    onConfirm={() => {\n                        State.graph.mutating.dropNode(\n                            this.state.nodeToDelete?.key as string\n                        );\n                        this.setState({ deleteAlertOpen: false });\n                    }}\n                    style={{ minWidth: \"60vw\" }}\n                >\n                    <p>\n                        Are you sure you want to delete the node with ID{\" \"}\n                        <Code>{this.state.nodeToDelete?.key}</Code> with\n                        attributes:\n                        <Code>\n                            {stringifyNodeDetail(\n                                this.state.nodeToDelete\n                                    ?.attributes as Attributes\n                            )}\n                        </Code>\n                        This action cannot be reversed.\n                    </p>\n                </Alert>\n            );\n        };\n\n        style = {\n            textAlign: \"center\",\n        };\n\n        render() {\n            return (\n                <div>\n                    <Callout\n                        title={\n                            \"Try to click on a cell and type in something...\"\n                        }\n                        intent=\"primary\"\n                        icon=\"edit\"\n                    >\n                        The corresponding value of a node's attribute can be\n                        modified by clicking the cell and type in\n                    </Callout>\n\n                    <ButtonGroup>\n                        <Button\n                            onClick={() => this.forceUpdate()}\n                            icon=\"refresh\"\n                            intent=\"none\"\n                            text=\"Refresh\"\n                        />\n                        <Button\n                            onClick={() => {\n                                State.preferences.AddNodeDialogOpen = true;\n                            }}\n                            icon=\"new-object\"\n                            intent=\"primary\"\n                            text=\"Add Node\"\n                        />\n                        <Divider />\n                        <InputGroup\n                            style={{ width: \"40vw\" }}\n                            asyncControl={true}\n                            leftIcon=\"search\"\n                            onChange={handleStringChange((value) => {\n                                this.setState({ filterQuery: value });\n                            })}\n                            placeholder=\"Search any Node...\"\n                            value={this.state.filterQuery}\n                            fill={true}\n                        />\n                    </ButtonGroup>\n\n                    <hr />\n\n                    <Table\n                        className=\"argo-table\"\n                        defaultRowHeight={30}\n                        numRows={this.filteredTable.length}\n                    >\n                        <Column\n                            name=\"\"\n                            cellRenderer={this.deleteNodeRenderer}\n                            //@ts-ignore\n                            style={this.style}\n                        />\n                        <Column\n                            name=\"ID\"\n                            //@ts-ignore\n                            intent={Intent.SUCCESS}\n                            cellRenderer={(rowIndex) => {\n                                let id = this.filteredTable[rowIndex].key;\n                                return <Cell>{id}</Cell>;\n                            }}\n                        />\n                        {this.renderColumns()}\n                    </Table>\n                    {this.deleteNodeAlert()}\n                </div>\n            );\n        }\n    }\n);\n\nexport default observer(\n    class NodeDataSheetDialog extends React.Component {\n        render() {\n            return (\n                <DataSheetDialogWrapper for=\"node\">\n                    <GraphNodeTable />\n                </DataSheetDialogWrapper>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Button, FormGroup, MenuItem, Tooltip } from \"@blueprintjs/core\";\nimport { Select } from \"@blueprintjs/select\";\nimport { Attributes, SerializedNode } from \"graphology-types\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport { stringifyNodeDetail } from \"./InputFormUtils\";\n\n/**\n *\n * @interface Props\n */\ninterface Props {\n    /**\n     * the text to be shown above the selectButton\n     *\n     * @type {string}\n     * @memberof Props\n     */\n    text: string;\n\n    /**\n     * function to call when a candidate is selected, will be called on every selection of candidate\n     * the {nodeId} is the id of the selected node\n     *\n     * @memberof Props\n     */\n    onChange: (nodeId: string) => void;\n}\n\n/**\n * this component can be used to choose the node among all the nodes, with basic search filters available\n * to use it, you have to specify the text shown above the selectButton as well as the onChange function to call when a candidate is selected\n */\nexport default observer(\n    class NodeChooser extends React.Component<Props, {}> {\n        state = {\n            select: \"Choose \" + this.props.text,\n        };\n\n        render() {\n            return (\n                <FormGroup\n                    label={this.props.text}\n                    labelFor=\"text-input\"\n                    labelInfo=\"(required)\"\n                >\n                    <Select\n                        filterable={true}\n                        items={State.graph.rawGraph.export().nodes}\n                        itemPredicate={(\n                            query: string,\n                            item: SerializedNode<Attributes>\n                        ) => {\n                            return item.key.includes(query);\n                        }}\n                        itemRenderer={(item: SerializedNode<Attributes>) => {\n                            return (\n                                <Tooltip\n                                    content={stringifyNodeDetail(\n                                        item.attributes ?? {}\n                                    )}\n                                >\n                                    <MenuItem\n                                        key={item.key}\n                                        text={item.key}\n                                        onClick={() => {\n                                            let key = item.key;\n                                            this.setState({ select: key });\n                                            this.props.onChange(key);\n                                        }}\n                                    />\n                                </Tooltip>\n                            );\n                        }}\n                        noResults={\n                            <MenuItem disabled={true} text=\"No results.\" />\n                        }\n                        onItemSelect={() => {}}\n                    >\n                        <Button\n                            text={this.state.select}\n                            rightIcon=\"double-caret-vertical\"\n                        />\n                    </Select>\n                </FormGroup>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport {\n    Alert,\n    Button,\n    ButtonGroup,\n    Callout,\n    Classes,\n    Code,\n    Dialog,\n    Divider,\n    InputGroup,\n    Intent,\n} from \"@blueprintjs/core\";\nimport {\n    Cell,\n    Column,\n    ICellRenderer,\n    RenderMode,\n    Table,\n} from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport DataSheetDialogWrapper from \"../utils/DataSheetDialogWrapper\";\nimport { Attributes, SerializedEdge } from \"graphology-types\";\nimport { handleStringChange } from \"../utils/InputFormUtils\";\nimport NodeChooser from \"../utils/NodeChooser\";\n\nlet GraphEdgeTable = observer(\n    class GraphEdgeTable extends React.Component {\n        state = {\n            addEdgeDialogOpen: false,\n            deleteAlertOpen: false,\n            edgeToDelete: null as null | SerializedEdge<Attributes>,\n            filterQuery: null as null | string,\n            chosenSource: null as null | string,\n            chosenTarget: null as null | string,\n        };\n\n        get filteredTable() {\n            let newTable: SerializedEdge<Attributes>[] = [];\n            State.graph.rawGraph.export().edges.forEach((edge) => {\n                if (\n                    !this.state.filterQuery ||\n                    edge.source\n                        .toLocaleLowerCase()\n                        .includes(this.state.filterQuery.toLocaleLowerCase()) ||\n                    edge.target\n                        .toLocaleLowerCase()\n                        .includes(this.state.filterQuery.toLocaleLowerCase()) ||\n                    this.state.filterQuery === \"\"\n                ) {\n                    newTable.push(edge);\n                }\n            });\n            return newTable;\n        }\n\n        deleteEdgeRenderer: ICellRenderer = (rowIndex) => {\n            return (\n                <Cell>\n                    <Button\n                        onClick={() => {\n                            this.setState({\n                                edgeToDelete: this.filteredTable[rowIndex],\n                                deleteAlertOpen: true,\n                            });\n                        }}\n                        icon=\"trash\"\n                        intent=\"danger\"\n                        text=\"Delete\"\n                        minimal={true}\n                    />\n                </Cell>\n            );\n        };\n\n        deleteEdgeAlert = () => {\n            return (\n                <Alert\n                    cancelButtonText=\"Cancel\"\n                    confirmButtonText=\"Confirm Delete\"\n                    icon=\"trash\"\n                    intent={Intent.DANGER}\n                    isOpen={this.state.deleteAlertOpen}\n                    onCancel={() => this.setState({ deleteAlertOpen: false })}\n                    onConfirm={() => {\n                        State.graph.mutating.dropEdge(\n                            this.state.edgeToDelete?.key as string\n                        );\n                        this.setState({ deleteAlertOpen: false });\n                    }}\n                >\n                    <p>\n                        Are you sure you want to delete the edge with ID{\" \"}\n                        <Code>{this.state.edgeToDelete?.key}</Code> from Node ID{\" \"}\n                        <Code>{this.state.edgeToDelete?.source}</Code> to Node\n                        ID <Code>{this.state.edgeToDelete?.target}</Code>. This\n                        action cannot be reversed.\n                    </p>\n                </Alert>\n            );\n        };\n\n        addEdgeDialog = () => {\n            return (\n                <Dialog\n                    isOpen={this.state.addEdgeDialogOpen}\n                    icon=\"new-link\"\n                    onClose={() => this.setState({ addEdgeDialogOpen: false })}\n                    onClosed={() =>\n                        this.setState({\n                            chosenSource: null,\n                            chosenTarget: null,\n                        })\n                    }\n                    title=\"Add Edge\"\n                >\n                    <div className={Classes.DIALOG_BODY}>\n                        <p>\n                            <strong>\n                                You can only add unique undirected edges to the\n                                graph dataset.\n                            </strong>\n                        </p>\n                        <p>\n                            A <em>UNIQUE</em> edge means there should only exist\n                            one edge that connects between the source and the\n                            target.\n                        </p>\n                        <ButtonGroup fill={true}>\n                            <NodeChooser\n                                text=\"Source Node\"\n                                onChange={(value) => {\n                                    this.setState({ chosenSource: value });\n                                }}\n                            />\n                            <Divider />\n                            <NodeChooser\n                                text=\"Target Node\"\n                                onChange={(value) => {\n                                    this.setState({ chosenTarget: value });\n                                }}\n                            />\n                        </ButtonGroup>\n                        <p>New edges are added to the end of the table.</p>\n                        {!this.canImport && (\n                            <Callout\n                                title=\"Invalid Edge\"\n                                intent=\"danger\"\n                                icon=\"edit\"\n                            >\n                                The new edge is invalid because either this is a\n                                edge that already in the graph or cannot form a\n                                valid undirected edge\n                            </Callout>\n                        )}\n                    </div>\n                    <div className={Classes.DIALOG_FOOTER}>\n                        <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                            <Button\n                                onClick={() =>\n                                    this.setState({ addEdgeDialogOpen: false })\n                                }\n                            >\n                                Cancel\n                            </Button>\n                            <Button\n                                intent={Intent.PRIMARY}\n                                onClick={() => {\n                                    State.graph.mutating.addEdge(\n                                        this.state.chosenSource!,\n                                        this.state.chosenTarget!\n                                    );\n                                    this.setState({ addEdgeDialogOpen: false });\n                                }}\n                                disabled={!this.canImport}\n                            >\n                                Confirm\n                            </Button>\n                        </div>\n                    </div>\n                </Dialog>\n            );\n        };\n\n        get canImport(): boolean {\n            if (!this.state.chosenSource || !this.state.chosenTarget) {\n                return false;\n            } else if (this.state.chosenSource === this.state.chosenTarget) {\n                return false;\n            } else {\n                return (\n                    !State.graph.rawGraph.hasEdge(\n                        this.state.chosenSource,\n                        this.state.chosenTarget\n                    ) &&\n                    !State.graph.rawGraph.hasEdge(\n                        this.state.chosenTarget,\n                        this.state.chosenSource\n                    )\n                );\n            }\n        }\n\n        style = {\n            textAlign: \"center\",\n        };\n\n        render() {\n            return (\n                <div>\n                    <ButtonGroup>\n                        <Button\n                            onClick={() => this.forceUpdate()}\n                            icon=\"refresh\"\n                            intent=\"none\"\n                            text=\"Refresh\"\n                        />\n                        <Button\n                            onClick={() =>\n                                this.setState({ addEdgeDialogOpen: true })\n                            }\n                            icon=\"new-link\"\n                            intent=\"primary\"\n                            text=\"Add Edge\"\n                        />\n                        <Divider />\n                        <InputGroup\n                            style={{ width: \"40vw\" }}\n                            asyncControl={true}\n                            leftIcon=\"search\"\n                            onChange={handleStringChange((value) => {\n                                this.setState({ filterQuery: value });\n                            })}\n                            placeholder=\"Search any Source or Target of an Edge...\"\n                            value={this.state.filterQuery ?? \"\"}\n                        />\n                    </ButtonGroup>\n\n                    <hr />\n                    <Table\n                        className=\"argo-table\"\n                        numRows={this.filteredTable.length}\n                        defaultRowHeight={30}\n                        renderMode={RenderMode.NONE}\n                    >\n                        <Column\n                            name=\"\"\n                            cellRenderer={this.deleteEdgeRenderer}\n                            //@ts-ignore\n                            style={this.style}\n                        />\n                        <Column\n                            name=\"Source\"\n                            //@ts-ignore\n                            intent={Intent.PRIMARY}\n                            cellRenderer={(rowIndex) => {\n                                return (\n                                    <Cell>\n                                        {this.filteredTable[rowIndex].source}\n                                    </Cell>\n                                );\n                            }}\n                        />\n                        <Column\n                            name=\"Target\"\n                            //@ts-ignore\n                            intent={Intent.PRIMARY}\n                            cellRenderer={(rowIndex) => {\n                                return (\n                                    <Cell>\n                                        {this.filteredTable[rowIndex].target}\n                                    </Cell>\n                                );\n                            }}\n                        />\n                    </Table>\n                    {this.deleteEdgeAlert()}\n                    {this.addEdgeDialog()}\n                </div>\n            );\n        }\n    }\n);\n\nexport default observer(\n    class EdgeDataSheetDialog extends React.Component {\n        render() {\n            return (\n                <DataSheetDialogWrapper for=\"edge\">\n                    <GraphEdgeTable />\n                </DataSheetDialogWrapper>\n            );\n        }\n    }\n);\n","import {\n    Button,\n    Card,\n    Elevation,\n    FormGroup,\n    H5,\n    InputGroup,\n    Tooltip,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport React from \"react\";\nimport State from \"../../state\";\nimport { Attributes } from \"graphology-types\";\nimport { handleStringChange, parseNumberOrString } from \"./InputFormUtils\";\n\n/**\n *\n * @interface Props\n */\ninterface Props {\n    /**\n     * function to call when a new node is successfully added\n     * the {nodeId} is the id of the newly added node, {attributes} is the attributes of the newly added node\n     *\n     * @memberof Props\n     */\n    onAdded: (nodeId: string, attributes: Attributes) => void;\n}\n\nexport default observer(\n    class NodeAdder extends React.Component<Props, {}> {\n        state = {\n            newNodeId: \"\",\n            attributes: {} as Attributes,\n        };\n\n        get canImport() {\n            return (\n                !State.graph.rawGraph.hasNode(this.state.newNodeId) &&\n                this.state.newNodeId !== \"\"\n            );\n        }\n\n        canImportTag = () => {\n            return this.canImport ? (\n                <Tooltip\n                    content={\n                        \"This Node Id is not used by any existing node yet\"\n                    }\n                    intent=\"success\"\n                >\n                    <Button icon=\"tick\" intent=\"success\" minimal={true} />\n                </Tooltip>\n            ) : (\n                <Tooltip\n                    content={\n                        \"This Node Id is currently in use by other nodes, try with another one instead\"\n                    }\n                    intent=\"warning\"\n                >\n                    <Button icon=\"cross\" intent=\"warning\" minimal={true} />\n                </Tooltip>\n            );\n        };\n\n        renderAttributesForm = (attributes: string[]) => {\n            return attributes.map((attribute) => {\n                if (attribute !== \"_options\" && attribute !== \"_visualize\") {\n                    return (\n                        <FormGroup label={attribute}>\n                            <InputGroup\n                                asyncControl={true}\n                                placeholder={\n                                    \"Enter the value for attribute: \" +\n                                    attribute\n                                }\n                                onChange={handleStringChange((value) => {\n                                    let newValue = this.state.attributes;\n                                    newValue[attribute] = parseNumberOrString(\n                                        value\n                                    );\n                                    this.setState({ attributes: newValue });\n                                })}\n                                value={this.state.attributes[attribute]}\n                            />\n                        </FormGroup>\n                    );\n                } else {\n                    return null;\n                }\n            });\n        };\n\n        render() {\n            return (\n                <Card elevation={Elevation.ONE}>\n                    <FormGroup label=\"New Node ID\" labelInfo=\"(required)\">\n                        <InputGroup\n                            autoFocus={true}\n                            asyncControl={true}\n                            placeholder=\"Enter the new Node Id...\"\n                            intent={this.canImport ? \"success\" : \"warning\"}\n                            rightElement={this.canImportTag()}\n                            onChange={handleStringChange((value) =>\n                                this.setState({ newNodeId: value })\n                            )}\n                            value={this.state.newNodeId}\n                        />\n                    </FormGroup>\n                    <Card elevation={Elevation.ONE}>\n                        <H5>Attributes</H5>\n                        {this.renderAttributesForm(\n                            State.graph.metadata.nodeProperties\n                        )}\n                    </Card>\n                    <hr />\n                    <Button\n                        intent=\"primary\"\n                        onClick={() => {\n                            State.graph.decorateRawNode(\n                                this.state.newNodeId,\n                                this.state.attributes\n                            );\n                            State.graph.mutating.addNode(\n                                this.state.newNodeId,\n                                this.state.attributes\n                            );\n                            this.props.onAdded(\n                                this.state.newNodeId,\n                                this.state.attributes\n                            );\n                            State.preferences.AddNodeDialogOpen = false;\n                            // State.preferences.rightClickBackgroundPanelOpen = false;\n                            // this.forceUpdate();\n                            // State.graphDelegate.cameraFocusOn(this.state.newNodeId);\n                        }}\n                        disabled={!this.canImport}\n                    >\n                        Confirm\n                    </Button>\n                </Card>\n            );\n        }\n        componentDidMount = () => {\n            State.graph.metadata.nodeProperties.forEach((prop) => {\n                let newValue = this.state.attributes;\n                newValue[prop] = \"\";\n                this.setState({ attributes: newValue });\n            });\n        };\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport { Classes, Dialog, Tag } from \"@blueprintjs/core\";\nimport NodeAdder from \"../utils/NodeAdder\";\nimport State from \"../../state\";\n\nexport default observer(\n    class AddNodeDialog extends React.Component {\n        render() {\n            return (\n                <Dialog\n                    isOpen={State.preferences.AddNodeDialogOpen}\n                    icon=\"new-object\"\n                    onClose={() => {\n                        State.preferences.AddNodeDialogOpen = false;\n                    }}\n                    title=\"Add Node\"\n                >\n                    <div className={Classes.DIALOG_BODY}>\n                        <p>\n                            <strong>\n                                You can only add node with unique node id to the\n                                graph dataset.\n                            </strong>\n                        </p>\n                        <p>\n                            A <em>UNIQUE</em> node means there should only exist\n                            one node that has the respective node id.\n                        </p>\n                        <Tag>New nodes are added to the end of the table</Tag>\n                        <hr />\n                        <NodeAdder\n                            onAdded={() => {\n                                this.setState({ addNodeDialogOpen: false });\n                                this.forceUpdate();\n                            }}\n                        />\n                    </div>\n                </Dialog>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport {\n    Button,\n    ButtonGroup,\n    Callout,\n    Classes,\n    Dialog,\n    Divider,\n    Intent,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport NodeChooser from \"../utils/NodeChooser\";\nexport default observer(\n    class AddEdgeDialog extends React.Component {\n        state = {\n            chosenSource: null as null | string,\n            chosenTarget: null as null | string,\n        };\n\n        get canImport(): boolean {\n            if (!this.state.chosenSource || !this.state.chosenTarget) {\n                return false;\n            } else if (this.state.chosenSource === this.state.chosenTarget) {\n                return false;\n            } else {\n                return (\n                    !State.graph.rawGraph.hasEdge(\n                        this.state.chosenSource,\n                        this.state.chosenTarget\n                    ) &&\n                    !State.graph.rawGraph.hasEdge(\n                        this.state.chosenTarget,\n                        this.state.chosenSource\n                    )\n                );\n            }\n        }\n\n        render() {\n            return (\n                <Dialog\n                    isOpen={State.preferences.AddEdgeDialogOpen}\n                    icon=\"new-link\"\n                    onClose={() => {\n                        State.preferences.AddEdgeDialogOpen = false;\n                    }}\n                    onClosed={() =>\n                        this.setState({\n                            chosenSource: null,\n                            chosenTarget: null,\n                        })\n                    }\n                    title=\"Add Edge\"\n                >\n                    <div className={Classes.DIALOG_BODY}>\n                        <p>\n                            <strong>\n                                You can only add unique undirected edges to the\n                                graph dataset.\n                            </strong>\n                        </p>\n                        <p>\n                            A <em>UNIQUE</em> edge means there should only exist\n                            one edge that connects between the source and the\n                            target.\n                        </p>\n                        <ButtonGroup fill={true}>\n                            <NodeChooser\n                                text=\"Source Node\"\n                                onChange={(value) => {\n                                    this.setState({ chosenSource: value });\n                                }}\n                            />\n                            <Divider />\n                            <NodeChooser\n                                text=\"Target Node\"\n                                onChange={(value) => {\n                                    this.setState({ chosenTarget: value });\n                                }}\n                            />\n                        </ButtonGroup>\n                        <p>New edges are added to the end of the table.</p>\n                        {!this.canImport && (\n                            <Callout\n                                title=\"Invalid Edge\"\n                                intent=\"danger\"\n                                icon=\"edit\"\n                            >\n                                The new edge is invalid because either this is a\n                                edge that already in the graph or cannot form a\n                                valid undirected edge\n                            </Callout>\n                        )}\n                    </div>\n                    <div className={Classes.DIALOG_FOOTER}>\n                        <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                            <Button\n                                onClick={() => {\n                                    State.preferences.AddEdgeDialogOpen = false;\n                                }}\n                            >\n                                Cancel\n                            </Button>\n                            {/* //todo:\n                            <Button\n                                onClick={() => {\n                                    State.preferences.AddEdgeDialogOpen = false;\n                                }}\n                            >\n                                Preview\n                            </Button> */}\n                            <Button\n                                intent={Intent.PRIMARY}\n                                onClick={() => {\n                                    State.graph.mutating.addEdge(\n                                        this.state.chosenSource!,\n                                        this.state.chosenTarget!\n                                    );\n                                    this.forceUpdate();\n                                    State.preferences.AddEdgeDialogOpen = false;\n                                }}\n                                disabled={!this.canImport}\n                            >\n                                Confirm\n                            </Button>\n                        </div>\n                    </div>\n                </Dialog>\n            );\n        }\n    }\n);\n","/* eslint-disable jsx-a11y/label-has-for */\nimport React from \"react\";\nimport {\n    Button,\n    ButtonGroup,\n    Classes,\n    Dialog,\n    FileInput,\n    Intent,\n    Spinner,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../state\";\n\nexport default observer(\n    class ImportGEXFDialog extends React.Component {\n        state = {\n            fileIsSelect: false,\n        };\n\n        renderImportButton() {\n            return (\n                <div className={Classes.DIALOG_FOOTER}>\n                    <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n                        <ButtonGroup>\n                            <Button\n                                className={classnames({\n                                    [Classes.DISABLED]: !this.state\n                                        .fileIsSelect,\n                                })}\n                                intent={Intent.PRIMARY}\n                                onClick={() => {\n                                    State.import.isLoading = true;\n                                    State.import\n                                        .importGraphFromGEXF()\n                                        .then((res) => {\n                                            State.graph.setGraph(\n                                                res.graph,\n                                                res.metadata\n                                            );\n\n                                            if (\n                                                State.cluster.rawGraph.hasAttribute(\n                                                    \"default\"\n                                                )\n                                            ) {\n                                                State.cluster.setCluster(\n                                                    State.graph.rawGraph.getAttribute(\n                                                        \"default\"\n                                                    )\n                                                );\n                                            }\n\n                                            State.import.isLoading = false;\n                                            State.import.importGEXFDialogOpen = false;\n                                        });\n                                }}\n                                text=\"Import\"\n                            />\n                        </ButtonGroup>\n                    </div>\n                </div>\n            );\n        }\n\n        render() {\n            return (\n                <Dialog\n                    icon=\"document-open\"\n                    isOpen={State.import.importGEXFDialogOpen}\n                    onClose={() => {\n                        State.import.importGEXFDialogOpen = false;\n                    }}\n                    title=\"Open GEXF\"\n                >\n                    {/* if is loading, then show Spinner */}\n                    {State.import.isLoading ? (\n                        <Spinner />\n                    ) : (\n                        <div\n                            className={classnames(\n                                Classes.DIALOG_BODY,\n                                \"import-dialog\"\n                            )}\n                        >\n                            <div>\n                                <div\n                                    className={classnames(\n                                        Classes.CONTROL_GROUP\n                                    )}\n                                >\n                                    <div\n                                        className={classnames(\n                                            Classes.INPUT_GROUP,\n                                            Classes.FILL\n                                        )}\n                                    >\n                                        <FileInput\n                                            text={State.import.gexfFileName}\n                                            onInputChange={(event) => {\n                                                let target = event.target as HTMLInputElement;\n                                                if (\n                                                    !target.files ||\n                                                    target.files.length < 1\n                                                ) {\n                                                    return;\n                                                }\n                                                State.import.gexfFileName =\n                                                    target.files[0].name;\n                                                // after setting the selectedNodeFileFromInput, it will auto render the preview table\n                                                State.import.selectedGEXFFileFromInput =\n                                                    target.files[0];\n\n                                                this.setState({\n                                                    fileIsSelect: true,\n                                                });\n                                            }}\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                            {this.renderImportButton()}\n                        </div>\n                    )}\n                </Dialog>\n            );\n        }\n    }\n);\n","import React from \"react\";\n// import PreferencesDialog from \"./PreferencesDialog\";\nimport ImportDialog from \"./dialogs/importDialog\";\nimport ExportDialog from \"./dialogs/ExportDialog\";\n// import ProjectDetailDialog from \"./ProjectDetailDialog\";\n// import RenameSnapshotDialog from \"./RenameSnapshotDialog\";\n// import StatisticsDialog from './StatisticsDialog';\n// import HelpDialog from './HelpDialog';\n// import NeighborDialog from './NeighborDialog';\nimport NodeDataSheetDialog from \"./dialogs/NodeDataSheetDialog\";\nimport EdgeDataSheetDialog from \"./dialogs/EdgeDataSheetDialog\";\nimport AddNodeDialog from \"./dialogs/AddNodeDialog\";\nimport AddEdgeDialog from \"./dialogs/AddEdgeDialog\";\nimport ImportGEXFDialog from \"./dialogs/ImportGEXFDialog\";\n\nexport default class Dialogs extends React.Component {\n    render() {\n        return (\n            <div style={{ display: \"none\" }}>\n                {/* <PreferencesDialog /> */}\n                <ImportGEXFDialog />\n                <ImportDialog />\n                {/*\n                <ProjectDetailDialog />\n                <RenameSnapshotDialog />\n                <StatisticsDialog />\n                <HelpDialog />\n                <NeighborDialog />\\\n                */}\n                <AddNodeDialog />\n                <AddEdgeDialog />\n                <NodeDataSheetDialog />\n                <EdgeDataSheetDialog />\n                <ExportDialog />\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport { Attributes } from \"graphology-types\";\nimport classnames from \"classnames\";\nimport State from \"../state/index\";\n\nexport default observer(\n    class SelectionBox extends React.Component {\n        state = {\n            boxStyle: {\n                left: 0,\n                top: 0,\n                width: 0,\n                height: 0,\n            },\n            startPoint: { x: 0, y: 0 },\n            endPoint: { x: 0, y: 0 },\n            mouseDown: false,\n        };\n\n        onMouseDownCallback = (\n            event: React.MouseEvent<HTMLDivElement, MouseEvent>\n        ) => {\n            let startpoint = { x: event.clientX, y: event.clientY };\n            this.setState({\n                startPoint: startpoint,\n                mouseDown: true,\n            });\n        };\n\n        onMouseMoveCallback = (\n            event: React.MouseEvent<HTMLDivElement, MouseEvent>\n        ) => {\n            if (this.state.mouseDown) {\n                let endPoint = { x: event.clientX, y: event.clientY };\n                // this.setState({ endPoint: endPoint });\n                this.setState({\n                    endPoint: endPoint,\n                    boxStyle: this._calculateSelectionBox(\n                        this.state.startPoint,\n                        this.state.endPoint\n                    ),\n                });\n            }\n        };\n\n        onMouseUpCallback = (\n            event: React.MouseEvent<HTMLDivElement, MouseEvent>\n        ) => {\n            State.interaction.boxSelection_endPoint = {\n                x: this.state.endPoint.x,\n                y: this.state.endPoint.y,\n            };\n            State.interaction.boxSelection_startPoint = {\n                x: this.state.startPoint.x,\n                y: this.state.startPoint.y,\n            };\n\n            this.setState({\n                startPoint: { x: 0, y: 0 },\n                endPoint: { x: 0, y: 0 },\n                boxStyle: {\n                    left: 0,\n                    top: 0,\n                    width: 0,\n                    height: 0,\n                },\n                mouseDown: false,\n            });\n            State.interaction.boxSelectNode();\n\n            State.interaction.boxSelectionOpen = false;\n        };\n\n        _calculateSelectionBox(\n            startPoint: Attributes,\n            endPoint: Attributes\n        ): Attributes {\n            let left = Math.min(startPoint.x, endPoint.x);\n            let top = Math.min(startPoint.y, endPoint.y);\n            let width = Math.abs(startPoint.x - endPoint.x);\n            let height = Math.abs(startPoint.y - endPoint.y);\n            return { left: left, top: top, width: width, height: height };\n        }\n\n        render() {\n            return (\n                <div\n                    className={classnames(\"boxCanvas\")}\n                    onMouseDown={this.onMouseDownCallback}\n                    onMouseMove={this.onMouseMoveCallback}\n                    onMouseUp={this.onMouseUpCallback}\n                >\n                    <div\n                        className={classnames(\"selectionBox\")}\n                        style={this.state.boxStyle}\n                    ></div>\n                </div>\n            );\n        }\n    }\n);\n","import ReactDOM from \"react-dom\";\nimport State from \"..\";\nimport * as THREE from \"three\";\nimport { Object3D } from \"three\";\nimport ComponentRef from \"../../components/ComponentRef\";\n\nexport function onDocumentLeftClick(event: MouseEvent) {\n    if (\n        State.cluster.clusterBy === null ||\n        !State.graphDelegate.graphDelegateMethods\n    ) {\n        return;\n    }\n    let element = ReactDOM.findDOMNode(ComponentRef.visualizer);\n    let box = (element as Element)?.getBoundingClientRect();\n\n    let vector = new THREE.Vector3(\n        ((event.clientX - box.left) / box.width) * 2 - 1,\n        -((event.clientY - box.top) / box.height) * 2 + 1,\n        0.5\n    );\n\n    let camera = State.graphDelegate.graphDelegateMethods?.camera();\n    if (!camera) {\n        return;\n    }\n    vector = vector.unproject(camera);\n\n    let raycaster = new THREE.Raycaster(\n        camera.position,\n        vector.sub(camera.position).normalize()\n    );\n    let intersects = raycaster.intersectObjects(\n        State.graphDelegate.clusterObject.fusionClusterObjects\n            ?.children as Object3D[],\n        true\n    );\n\n    if (intersects.length > 0) {\n        State.clusterInteraction.clusterLeftClickCallback(\n            intersects[0].object.uuid,\n            event\n        );\n        console.log(\"currently Clicked ClusterId\", intersects[0].object.uuid);\n    }\n}\n\nexport function onDocumentRightClick(event: MouseEvent) {\n    if (\n        State.cluster.clusterBy === null ||\n        !State.graphDelegate.graphDelegateMethods\n    ) {\n        return;\n    }\n    let element = ReactDOM.findDOMNode(ComponentRef.visualizer);\n    let box = (element as Element)?.getBoundingClientRect();\n\n    let vector = new THREE.Vector3(\n        ((event.clientX - box.left) / box.width) * 2 - 1,\n        -((event.clientY - box.top) / box.height) * 2 + 1,\n        0.5\n    );\n\n    let camera = State.graphDelegate.graphDelegateMethods?.camera();\n    if (!camera) {\n        return;\n    }\n    vector = vector.unproject(camera);\n\n    let raycaster = new THREE.Raycaster(\n        camera.position,\n        vector.sub(camera.position).normalize()\n    );\n    let intersects = raycaster.intersectObjects(\n        State.graphDelegate.clusterObject.fusionClusterObjects\n            ?.children as Object3D[],\n        true\n    );\n\n    if (intersects.length > 0) {\n        State.clusterInteraction.clusterRightClickCallback(\n            intersects[0].object.uuid,\n            event\n        );\n    } else {\n        State.clusterInteraction.clusterRightClickCallback(null, event);\n    }\n    console.log(\n        \"currently Right-Clicked ClusterId\",\n        intersects[0]?.object?.uuid ?? null\n    );\n}\n\nexport function onDocumentMouseMove(event: MouseEvent) {\n    if (\n        State.cluster.clusterBy === null ||\n        !State.graphDelegate.graphDelegateMethods\n    ) {\n        State.clusterInteraction.currentlyHoveredClusterId = null;\n        return;\n    }\n    let element = ReactDOM.findDOMNode(ComponentRef.visualizer);\n    let box = (element as Element)?.getBoundingClientRect();\n\n    let vector = new THREE.Vector3(\n        ((event.clientX - box.left) / box.width) * 2 - 1,\n        -((event.clientY - box.top) / box.height) * 2 + 1,\n        0.5\n    );\n\n    let camera = State.graphDelegate.graphDelegateMethods?.camera();\n    if (!camera) {\n        return;\n    }\n    vector = vector.unproject(camera);\n\n    let raycaster = new THREE.Raycaster(\n        camera.position,\n        vector.sub(camera.position).normalize()\n    );\n    let intersects = raycaster.intersectObjects(\n        State.graphDelegate.clusterObject.fusionClusterObjects\n            ?.children as Object3D[],\n        true\n    );\n\n    if (intersects.length > 0) {\n        State.clusterInteraction.clusterHoverCallback(\n            intersects[0].object.uuid,\n            event\n        );\n    } else {\n        State.clusterInteraction.clusterHoverCallback(null, event);\n    }\n    console.log(\n        \"currentlyHoveredClusterId\",\n        intersects[0]?.object?.uuid ?? null\n    );\n}\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport CanvasDraw from \"react-canvas-draw\";\nimport ReactDOM from \"react-dom\";\nimport ComponentRef from \"../ComponentRef\";\nimport State from \"../../state\";\n\nexport default observer(\n    class CanvasDrawPanel extends React.Component {\n        //@ts-ignore\n        canvasRef: React.MutableRefObject<CanvasDraw> = React.createRef();\n\n        get canvasMethods() {\n            return this.canvasRef.current;\n        }\n\n        get canvas() {\n            let element = ReactDOM.findDOMNode(ComponentRef.visualizer);\n            return (element as Element)?.getBoundingClientRect();\n        }\n\n        render() {\n            return (\n                <div\n                    onMouseUp={() => {\n                        this.exportDrawing();\n                    }}\n                >\n                    <CanvasDraw\n                        ref={this.canvasRef}\n                        style={{\n                            position: \"absolute\",\n                            top: this.canvas.y,\n                        }}\n                        canvasHeight={this.canvas.height}\n                        canvasWidth={this.canvas.width}\n                        lazyRadius={0}\n                        brushRadius={3}\n                        brushColor={\"#F6B26B\"}\n                        catenaryColor={\"#F6B26B\"}\n                    />\n                </div>\n            );\n        }\n\n        exportDrawing() {\n            State.helper.clusterSplittingCurrentStep = 3;\n            let hightDiff = 50;\n            const data = JSON.parse(this.canvasMethods.getSaveData());\n            let drawPoints = data?.lines[0]?.points as {\n                x: number;\n                y: number;\n            }[];\n            if (!drawPoints) {\n                return;\n            }\n            drawPoints.map((value) => {\n                value.y += hightDiff;\n            });\n\n            // line was drawn left to right\n            if (drawPoints[0].x < drawPoints[drawPoints.length - 1].x) {\n                drawPoints.unshift({ x: 0, y: 0 });\n                drawPoints.push({ x: this.canvas.width, y: 0 });\n                drawPoints.push({ x: 0, y: 0 });\n            } else {\n                drawPoints.reverse();\n                drawPoints.unshift({ x: 0, y: 0 });\n                drawPoints.push({ x: this.canvas.width, y: 0 });\n                drawPoints.push({ x: 0, y: 0 });\n            }\n\n            // const firstPoint = drawPoints[0];\n            // const x1 = firstPoint.x,\n            //     y1 = firstPoint.y;\n            // const lastPoint = drawPoints[drawPoints.length - 1];\n            // const x2 = lastPoint.x,\n            //     y2 = lastPoint.y;\n            // const slope = (y1 - y2) / (x1 - x2);\n            // const b = (x1 * y2 - x2 * y1) / (x1 - x2);\n\n            // const leftIntersect = { x: 0, y: b };\n            // const rightIntersect = {\n            //     x: this.canvas.width,\n            //     y: slope * this.canvas.width + b,\n            // };\n            // const topIntersect = { x: -b / slope, y: 0 };\n            // const bottomIntersect = {\n            //     x: (this.canvas.height - b) / slope,\n            //     y: this.canvas.height,\n            // };\n\n            State.clusterInteraction.lineSegment = drawPoints;\n            State.clusterInteraction.computeSplitCluster();\n        }\n\n        clearDrawing() {\n            this.canvasMethods.clear();\n        }\n\n        componentDidMount = () => {\n            ComponentRef.canvasDrawPanel = this;\n            this.clearDrawing();\n        };\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport ForceGraph3D, {\n    ForceGraphMethods,\n    LinkObject,\n    NodeObject,\n} from \"react-force-graph-3d\";\nimport ComponentRef from \"../ComponentRef\";\nimport State from \"../../state\";\nimport SpriteText from \"three-spritetext\";\nimport {\n    ICustomLinkObject,\n    ICustomNodeObject,\n} from \"../../state/GraphDelegate\";\nimport { reaction } from \"mobx\";\nimport { VisualizationMode } from \"../../state/PreferencesStore\";\nimport SelectionBox from \"../SelectionBox\";\nimport * as CustomMouseEvent from \"../../state/utils/MouseEventUtils\";\nimport CanvasDrawPanel from \"../panels/CanvasDrawPanel\";\n\ninterface Props {\n    controlType: \"trackball\" | \"orbit\" | \"fly\";\n}\n\nexport default observer(\n    class ThreeJSVis extends React.Component<Props, {}> {\n        state = {\n            visualizationGraph: State.graphDelegate.visualizationGraph(),\n            nodePointerInteraction: true,\n        };\n\n        // @ts-ignore\n        graphRef: React.MutableRefObject<ForceGraphMethods> = React.createRef();\n\n        get graphMethods(): ForceGraphMethods {\n            return this.graphRef.current;\n        }\n\n        graphDelegate = State.graphDelegate;\n\n        hoverNodeCallback = (\n            node: NodeObject | null,\n            previousNode: NodeObject | null\n        ) => {\n            if (State.search.isPreviewing) return;\n            // to avoid frequent refresh\n\n            if (node === null) {\n                State.interaction.currentlyHoveredNodeId = null;\n            } else if (node !== previousNode) {\n                let current: string = node.id as string;\n                State.interaction.currentlyHoveredNodeId = current;\n            }\n            // console.log(State.graph.rawGraph);\n        };\n\n        nodeLeftClickCallback = (node: NodeObject, event: MouseEvent) => {\n            if (!this.state.nodePointerInteraction) {\n                return;\n            }\n            let nodeId = node.id as string;\n            if (\n                State.preferences.visualizationMode ===\n                VisualizationMode.NodeSelection\n            ) {\n                // multi-selection\n                let index;\n                // if already in the list of selected, remove\n                if (\n                    (index = State.interaction.selectedNodes.indexOf(\n                        nodeId\n                    )) !== -1\n                ) {\n                    State.interaction.selectedNodes.splice(index, 1);\n                } else {\n                    // if not in the list, add\n                    State.interaction.selectedNodes.push(nodeId);\n                }\n            } else {\n                // single select\n                State.interaction.selectedNodes = [node.id as string];\n            }\n        };\n\n        nodeRightClickCallback = (node: NodeObject, event: MouseEvent) => {\n            if (!this.state.nodePointerInteraction) {\n                return;\n            }\n            State.interaction.selectedNode = node.id as string;\n            State.preferences.rightClickPositionX = event.x;\n            State.preferences.rightClickPositionY = event.y;\n            State.preferences.rightClickOn = \"Node\";\n            State.preferences.rightClickPanelOpen = true;\n            State.preferences.closeAllPanel(\"rightClickPanel\");\n        };\n\n        backgroundClickCallback = () => {\n            // cancel all selection\n            State.interaction.flush();\n            State.interaction.selectedNodes = [];\n            State.preferences.rightClickPanelOpen = false;\n            State.preferences.closeAllPanel(\"rightClickPanel\");\n        };\n\n        backgroundRightClickCallback = (event: MouseEvent) => {\n            if (!this.state.nodePointerInteraction) {\n                return;\n            }\n            State.preferences.rightClickPositionX = event.x;\n            State.preferences.rightClickPositionY = event.y;\n            State.preferences.rightClickOn = \"Background\";\n            State.preferences.rightClickPanelOpen = true;\n            State.preferences.closeAllPanel(\"rightClickPanel\");\n        };\n\n        computeNodeColor(_node: NodeObject) {\n            let node = _node as ICustomNodeObject;\n            if (node.hovered) {\n                return State.css.node.highlightColor;\n            } else if (node.selected) {\n                return State.css.node.selectedColor;\n            } else if (node.multiSelected) {\n                return State.css.node.multiSelectedColor;\n            } else {\n                return State.css.node.defaultColor;\n            }\n        }\n\n        computeEdgeColor(_edge: LinkObject) {\n            let edge = _edge as ICustomLinkObject;\n            if (edge.hovered) {\n                return State.css.edge.highlightColor;\n            } else if (edge.selected) {\n                return State.css.edge.selectedColor;\n            } else {\n                return State.css.edge.defaultColor;\n            }\n        }\n        computeEdgeWidth(_edge: LinkObject) {\n            let edge = _edge as ICustomLinkObject;\n            if (edge.hovered) {\n                return State.css.edge.highlightWidth;\n            } else if (edge.selected) {\n                return State.css.edge.highlightWidth;\n            } else {\n                return State.css.edge.defaultWidth;\n            }\n        }\n        renderGraph = () => {\n            if (State.preferences.view === \"3D\") {\n                return (\n                    <div>\n                        {State.preferences.visualizationMode ===\n                            VisualizationMode.NodeSelection &&\n                            State.interaction.boxSelectionOpen && (\n                                <SelectionBox />\n                            )}\n                        {State.preferences.visualizationMode ===\n                            VisualizationMode.ClusterSplitting &&\n                            State.clusterInteraction.drawPanelActivate && (\n                                <CanvasDrawPanel />\n                            )}\n                        <ForceGraph3D\n                            // Data Segment\n                            ref={this.graphRef}\n                            graphData={this.state.visualizationGraph}\n                            controlType={this.props.controlType}\n                            // Node Visualization Segment\n                            nodeLabel=\"id\"\n                            nodeRelSize={State.css.node.size}\n                            nodeColor={this.computeNodeColor}\n                            nodeVisibility={this.graphDelegate.nodeVisibility}\n                            nodeResolution={State.css.node.resolution}\n                            nodeThreeObjectExtend={true}\n                            nodeThreeObject={(node) => {\n                                const sprite = new SpriteText(`${node.id}`);\n                                sprite.color = State.css.label.color;\n                                sprite.textHeight = State.css.label.size;\n                                sprite.visible = State.css.label.show;\n                                sprite.backgroundColor = \"\";\n                                sprite.translateX(State.css.node.size + 2);\n                                return sprite;\n                            }}\n                            // Node Manipulation Segment\n                            onNodeHover={this.hoverNodeCallback}\n                            onNodeClick={this.nodeLeftClickCallback}\n                            onNodeRightClick={this.nodeRightClickCallback}\n                            onNodeDragEnd={(node) => {\n                                node.fx = node.x;\n                                node.fy = node.y;\n                                node.fz = node.z;\n                            }}\n                            // Link Visualization Segment\n                            linkVisibility={this.graphDelegate.linkVisibility}\n                            linkWidth={this.computeEdgeWidth}\n                            linkColor={this.computeEdgeColor}\n                            // Graph Manipulation Segment\n                            onBackgroundRightClick={\n                                this.backgroundRightClickCallback\n                            }\n                            onBackgroundClick={this.backgroundClickCallback}\n                            enablePointerInteraction={\n                                this.state.nodePointerInteraction\n                            }\n                            // Engine\n                            onEngineTick={() => {\n                                this.graphDelegate.clusterObject.clusterDelegation();\n                            }}\n                        />\n                    </div>\n                );\n                // } else {\n                //     return (\n                //         <ForceGraph2D\n                //             graphData={State.graph.adapterGraph}\n                //             dagMode={\"td\"}\n                //             // dagLevelDistance={300}\n                //             // backgroundColor=\"#101020\"\n                //             nodeRelSize={1}\n                //             // nodeId=\"path\"\n                //             // nodeVal={(node) => 100 / (node.level + 1)}\n                //             // nodeLabel=\"path\"\n                //             // nodeAutoColorBy=\"module\"\n                //             // linkDirectionalParticles={2}\n                //             // linkDirectionalParticleWidth={2}\n                //             d3VelocityDecay={0.3}\n                //         />\n                //     );\n            }\n        };\n\n        render() {\n            return <div>{this.renderGraph()}</div>;\n        }\n\n        updateVisualizationGraph() {\n            this.setState({\n                visualizationGraph: State.graphDelegate.visualizationGraph(),\n            });\n        }\n\n        clusterInteractionListener(set: boolean) {\n            if (set) {\n                document.addEventListener(\n                    \"mousemove\",\n                    CustomMouseEvent.onDocumentMouseMove\n                );\n                document.addEventListener(\n                    \"click\",\n                    CustomMouseEvent.onDocumentLeftClick\n                );\n                document.addEventListener(\n                    \"contextmenu\",\n                    CustomMouseEvent.onDocumentRightClick\n                );\n                console.log(\"MouseEvent listening\");\n            } else {\n                document.removeEventListener(\n                    \"mousemove\",\n                    CustomMouseEvent.onDocumentMouseMove\n                );\n                document.removeEventListener(\n                    \"click\",\n                    CustomMouseEvent.onDocumentLeftClick\n                );\n                document.removeEventListener(\n                    \"contextmenu\",\n                    CustomMouseEvent.onDocumentRightClick\n                );\n                console.log(\"MouseEvent stop listening\");\n            }\n        }\n\n        componentDidMount() {\n            this.graphDelegate.mountDelegateMethods(this.graphMethods);\n            this.clusterInteractionListener(true);\n            ComponentRef.visualizer = this;\n        }\n    }\n);\n\nreaction(\n    () => State.preferences.visualizationMode,\n    (visualizationMode) => {\n        switch (visualizationMode) {\n            case VisualizationMode.Normal:\n                ComponentRef.visualizer?.setState({\n                    nodePointerInteraction: true,\n                });\n                ComponentRef.visualizer?.clusterInteractionListener(true);\n                break;\n\n            case VisualizationMode.NodeSelection:\n                ComponentRef.visualizer?.setState({\n                    nodePointerInteraction: true,\n                });\n                ComponentRef.visualizer?.clusterInteractionListener(false);\n                break;\n\n            case VisualizationMode.ClusterSelection:\n                ComponentRef.visualizer?.setState({\n                    nodePointerInteraction: false,\n                });\n                ComponentRef.visualizer?.clusterInteractionListener(true);\n                break;\n\n            case VisualizationMode.ClusterSplitting:\n                ComponentRef.visualizer?.setState({\n                    nodePointerInteraction: false,\n                });\n                ComponentRef.visualizer?.clusterInteractionListener(true);\n                State.clusterInteraction.flush();\n                State.helper.clusterSplittingPanelStackOpen = true;\n                break;\n        }\n    }\n);\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { Classes } from \"@blueprintjs/core\";\nimport { Cell, Column, EditableCell, Table } from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state/index\";\nimport ComponentRef from \"../ComponentRef\";\n\ninterface Props {\n    /**\n     * the node id of the select node\n     *\n     * @type {string}\n     * @memberof Props\n     */\n    onNode: string;\n}\n\nexport default observer(\n    class NodeDetail extends React.Component<Props, {}> {\n        cellRenderer_property = (rowIndex: number) => {\n            return <Cell>{State.graph.metadata.nodeProperties[rowIndex]}</Cell>;\n        };\n\n        cellRenderer_value = (rowIndex: number) => {\n            let data = State.graph.rawGraph.getNodeAttribute(\n                this.props.onNode,\n                State.graph.metadata.nodeProperties[rowIndex]\n            );\n            // return a Editable Cell where user can edit the value of certain property;\n            return (\n                <EditableCell\n                    value={data}\n                    onChange={(newVal) =>\n                        State.graph.rawGraph.setNodeAttribute(\n                            this.props.onNode,\n                            State.graph.metadata.nodeProperties[rowIndex],\n                            newVal\n                        )\n                    }\n                    onConfirm={(newVal) =>\n                        State.graph.rawGraph.setNodeAttribute(\n                            this.props.onNode,\n                            State.graph.metadata.nodeProperties[rowIndex],\n                            newVal\n                        )\n                    }\n                    tooltip={data}\n                />\n            );\n        };\n\n        formatLongFloat = (nodeAttributeValue: any) => {\n            const num = Number(nodeAttributeValue);\n            if (Number.isNaN(num) || num > 1 || num < 0) {\n                // Do not format just return original\n                return nodeAttributeValue;\n            }\n            // Format to no more than 3 significant digit.\n            return Number.parseFloat(num.toString()).toPrecision(3);\n        };\n\n        render() {\n            return (\n                <div\n                    className={classnames(\n                        \"right-overlay-card\",\n                        \"transparent-frame\"\n                    )}\n                >\n                    <div\n                        className={classnames(\n                            Classes.CARD,\n                            \"node-details-table\"\n                        )}\n                    >\n                        <Table\n                            numRows={State.graph.metadata.nodeProperties.length}\n                            enableRowHeader={false}\n                        >\n                            <Column\n                                name=\"Properties\"\n                                cellRenderer={this.cellRenderer_property}\n                            />\n                            <Column\n                                name=\"Value\"\n                                cellRenderer={this.cellRenderer_value}\n                            />\n                        </Table>\n                    </div>\n                </div>\n            );\n        }\n        componentDidMount = () => {\n            ComponentRef.nodeDetail = React.createRef();\n        };\n    }\n);\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { Classes } from \"@blueprintjs/core\";\nimport { Cell, Column, Table } from \"@blueprintjs/table\";\nimport { observer } from \"mobx-react\";\nimport ComponentRef from \"../ComponentRef\";\nimport State from \"../../state/index\";\n\nexport default observer(\n    class MultipleNodeDetail extends React.Component {\n        render() {\n            return (\n                <div\n                    className={classnames(\n                        \"left-bottom-overlay-card\",\n                        \"transparent-frame\"\n                    )}\n                >\n                    <div className={classnames(Classes.CARD)}>\n                        <Table numRows={State.interaction.selectedNodes.length}>\n                            {State.graph.metadata.nodeProperties.map((it) => (\n                                <Column\n                                    key={it}\n                                    name={it}\n                                    cellRenderer={(i) => (\n                                        <Cell>\n                                            {State.graph.rawGraph.getNodeAttribute(\n                                                State.interaction.selectedNodes[\n                                                    i\n                                                ] as string,\n                                                it as string\n                                            )}\n                                        </Cell>\n                                    )}\n                                />\n                            ))}\n                        </Table>\n                    </div>\n                </div>\n            );\n        }\n        componentDidMount = () => {\n            ComponentRef.multiNodeDetail = this;\n        };\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport { InputGroup, Menu, MenuItem } from \"@blueprintjs/core\";\nimport classnames from \"classnames\";\nimport { handleStringChange } from \"../utils/InputFormUtils\";\n\nexport default observer(\n    class SearchPanel extends React.Component {\n        renderSearchResults = () => {\n            return State.search.candidates.map((it) => {\n                return (\n                    <MenuItem\n                        text={it}\n                        onMouseOver={() => {\n                            State.search.isPreviewing = true;\n                            State.interaction.currentlyHoveredNodeId = it;\n                            State.graphDelegate.cameraFocusOn(it);\n                        }}\n                    />\n                );\n            });\n        };\n\n        render() {\n            return (\n                <div\n                    className={classnames(\n                        \"bottom-overlay-card\",\n                        \"transparent-frame\"\n                    )}\n                >\n                    <div className={classnames(\"search\")}>\n                        {State.search.candidates.length !== 0 && (\n                            <Menu\n                                large={true}\n                                className={classnames(\"search-menu\")}\n                                onMouseLeave={() => {\n                                    State.search.isPreviewing = false;\n                                }}\n                            >\n                                {this.renderSearchResults()}\n                            </Menu>\n                        )}\n                        <InputGroup\n                            asyncControl={true}\n                            large={true}\n                            leftIcon=\"search\"\n                            onChange={handleStringChange(\n                                (value) => (State.search.searchStr = value)\n                            )}\n                            placeholder=\"Search any Node...\"\n                            value={State.search.searchStr}\n                        />\n                    </div>\n                </div>\n            );\n        }\n    }\n);\n// export default EdgesPanel;\n","import React from \"react\";\nimport { Alert, Button, Card, Code, H6, Intent } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../state\";\nimport {\n    Cell,\n    Column,\n    ICellRenderer,\n    RenderMode,\n    Table,\n} from \"@blueprintjs/table\";\n\ninterface Props {\n    /**\n     * the node id of the select node to delete Edge\n     *\n     * @type {string}\n     * @memberof Props\n     */\n    onNode: string;\n}\n\nexport default observer(\n    class DeleteEdgeInteractionPanel extends React.Component<Props, {}> {\n        state = {\n            targetNode: null as string | null,\n            deleteAlertOpen: false,\n        };\n\n        get neighbors(): string[] {\n            return State.graph.rawGraph.neighbors(this.props.onNode);\n        }\n\n        deleteEdgeRenderer: ICellRenderer = (rowIndex) => {\n            let targetNode = this.neighbors[rowIndex];\n            return (\n                <Cell>\n                    <Button\n                        onClick={() => {\n                            this.setState({\n                                targetNode: targetNode,\n                                deleteAlertOpen: true,\n                            });\n                        }}\n                        icon=\"trash\"\n                        intent=\"danger\"\n                        text=\"Delete\"\n                        minimal={true}\n                    />\n                </Cell>\n            );\n        };\n\n        deleteEdgeAlert = () => {\n            if (this.state.targetNode === null) {\n                return null;\n            }\n\n            let edgeToDelete: string | undefined;\n\n            if (\n                (edgeToDelete = State.graph.rawGraph.edge(\n                    this.state.targetNode,\n                    this.props.onNode\n                )) === undefined\n            ) {\n                edgeToDelete = State.graph.rawGraph.edge(\n                    this.props.onNode,\n                    this.state.targetNode\n                );\n            }\n\n            return (\n                <Alert\n                    cancelButtonText=\"Cancel\"\n                    confirmButtonText=\"Confirm Delete\"\n                    icon=\"trash\"\n                    intent={Intent.DANGER}\n                    isOpen={this.state.deleteAlertOpen}\n                    onCancel={() => this.setState({ deleteAlertOpen: false })}\n                    onConfirm={() => {\n                        State.graph.mutating.dropEdge(edgeToDelete as string);\n                        this.setState({ deleteAlertOpen: false });\n                        State.preferences.deleteEdgePanelOpen = false;\n                    }}\n                >\n                    <p>\n                        Are you sure you want to delete the edge with Key{\" \"}\n                        <Code>{edgeToDelete as string}</Code> between Node ID{\" \"}\n                        <Code>{this.state.targetNode}</Code> and Node ID{\" \"}\n                        <Code>{this.props.onNode}</Code>. This action cannot be\n                        reversed.\n                    </p>\n                </Alert>\n            );\n        };\n\n        neighborsRenderer: ICellRenderer = (rowIndex: number) => {\n            return (\n                <Cell interactive={true}>\n                    <div\n                        onMouseEnter={() => {\n                            State.graphDelegate.cameraFocusOn(\n                                this.props.onNode,\n                                400\n                            );\n                            State.interaction.selectedEdge = State.interaction.getEdgeKey(\n                                this.props.onNode,\n                                this.neighbors[rowIndex]\n                            ) as string;\n                        }}\n                    >\n                        {this.neighbors[rowIndex]}\n                    </div>\n                </Cell>\n            );\n        };\n\n        render() {\n            return (\n                <div\n                    className={classnames(\n                        \"right-bottom-overlay-card\",\n                        \"transparent-frame\"\n                    )}\n                >\n                    <Card className={classnames(\"node-details-table\")}>\n                        <Button\n                            icon=\"cross\"\n                            onClick={() => {\n                                State.preferences.deleteEdgePanelOpen = false;\n                                State.interaction.selectedEdge = null;\n                                State.graphDelegate.graphDelegateMethods.refresh(); // update color of selected edges\n                            }}\n                        >\n                            Close\n                        </Button>\n                        <H6> Node ID: {this.props.onNode}</H6>\n                        <Table\n                            numRows={this.neighbors.length}\n                            defaultRowHeight={30}\n                            renderMode={RenderMode.NONE}\n                        >\n                            <Column\n                                name=\"\"\n                                cellRenderer={this.deleteEdgeRenderer}\n                                //@ts-ignore\n                                style={this.style}\n                            />\n                            <Column\n                                name=\"Node ID\"\n                                //@ts-ignore\n                                intent={Intent.PRIMARY}\n                                cellRenderer={this.neighborsRenderer}\n                            />\n                        </Table>\n                        {this.deleteEdgeAlert()}\n                    </Card>\n                </div>\n            );\n        }\n    }\n);\n","import React, { ReactNode } from \"react\";\nimport { Button, Card, Classes, Collapse, Elevation } from \"@blueprintjs/core\";\nimport classnames from \"classnames\";\nimport { observer } from \"mobx-react\";\n\ninterface Props {\n    name: string;\n    isOpen: boolean;\n    onToggle: (event: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n    children: ReactNode;\n}\n\nexport default observer(\n    class SimpleSelect extends React.Component<Props, {}> {\n        render() {\n            return (\n                <Card elevation={Elevation.THREE}>\n                    <Button\n                        className={classnames(\n                            Classes.LARGE,\n                            Classes.FILL,\n                            \"text-align-left\"\n                        )}\n                        rightIcon={\n                            this.props.isOpen ? \"chevron-up\" : \"chevron-down\"\n                        }\n                        onClick={this.props.onToggle}\n                    >\n                        {this.props.name}\n                    </Button>\n                    <Collapse isOpen={this.props.isOpen}>\n                        {this.props.children}\n                    </Collapse>\n                </Card>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport { Classes, Slider } from \"@blueprintjs/core\";\nimport classnames from \"classnames\";\nimport Collapsable from \"../utils/Collapsable\";\nimport SimpleSelect from \"../utils/SimpleSelect\";\n\nexport default observer(\n    class ClusterPanel extends React.Component {\n        state = {\n            shapeOptionOpen: false,\n            forceOptionOpen: false,\n        };\n\n        forceCollapse = () => {\n            return (\n                <Collapsable\n                    name=\"Force\"\n                    isOpen={this.state.forceOptionOpen}\n                    onToggle={() =>\n                        this.setState({\n                            forceOptionOpen: !this.state.forceOptionOpen,\n                        })\n                    }\n                >\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\n                        Cluster Force Distance:\n                        <br />\n                        <Slider\n                            min={0}\n                            max={100}\n                            stepSize={10}\n                            labelStepSize={20}\n                            onChange={(value) => {\n                                State.css.cluster.clusterForce = value;\n                                State.graphDelegate.updateClusterForce();\n                            }}\n                            value={State.css.cluster.clusterForce}\n                        />\n                    </div>\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\n                        Normal Force Distance:\n                        <br />\n                        <Slider\n                            min={0}\n                            max={100}\n                            stepSize={10}\n                            labelStepSize={20}\n                            onChange={(value) => {\n                                State.css.cluster.normalForce = value;\n                                State.graphDelegate.updateClusterForce();\n                            }}\n                            value={State.css.cluster.normalForce}\n                        />\n                    </div>\n                </Collapsable>\n            );\n        };\n\n        shapeCollapse = () => {\n            return (\n                <Collapsable\n                    name=\"Shape\"\n                    isOpen={this.state.shapeOptionOpen}\n                    onToggle={() =>\n                        this.setState({\n                            shapeOptionOpen: !this.state.shapeOptionOpen,\n                        })\n                    }\n                >\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\n                        <p style={{ textAlign: \"left\" }}>\n                            Cluster Shape:\n                            <span style={{ float: \"right\" }}>\n                                <SimpleSelect\n                                    items={[\"convexHull\", \"sphere\"]}\n                                    text={State.css.cluster.shape}\n                                    onSelect={(it) => {\n                                        State.css.cluster.shape = it;\n                                    }}\n                                    small={true}\n                                />\n                            </span>\n                        </p>\n                    </div>\n                    {State.css.cluster.shape === \"sphere\" && (\n                        <div className={classnames(Classes.CARD, \"sub-option\")}>\n                            Cluster Resolution:\n                            <br />\n                            <Slider\n                                min={2}\n                                max={20}\n                                stepSize={1}\n                                labelStepSize={5}\n                                onChange={(value) => {\n                                    State.css.cluster.resolution = value;\n                                    State.graphDelegate.graphDelegateMethods.refresh();\n                                }}\n                                value={State.css.cluster.resolution}\n                            />\n                        </div>\n                    )}\n                </Collapsable>\n            );\n        };\n\n        render() {\n            return (\n                <div>\n                    <div>\n                        <p>Modifying All Clusters</p>\n                    </div>\n                    {this.forceCollapse()}\n                    {this.shapeCollapse()}\n                </div>\n            );\n        }\n    }\n);\n// export default EdgesPanel;\n","import React from \"react\";\nimport {\n    Button,\n    Popover,\n    PopoverInteractionKind,\n    Position,\n} from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport { ColorResult, SketchPicker } from \"react-color\";\n\n/**\n *\n * @interface Props\n */\ninterface Props {\n    /**\n     * the color to be previewed on the button\n     *\n     * @type {string}\n     * @memberof Props\n     */\n    color: string;\n\n    /**\n     * function to call when a candidate is selected, will be called on every selection of candidate\n     *\n     * @memberof Props\n     */\n    onChange: (color: ColorResult) => void;\n}\n\n/**\n * this component can be used to choose the node among all the nodes, with basic search filters available\n * to use it, you have to specify the text shown above the selectButton as well as the onChange function to call when a candidate is selected\n */\nexport default observer(\n    class ColorPicker extends React.Component<Props, {}> {\n        render() {\n            return (\n                <Popover\n                    interactionKind={PopoverInteractionKind.CLICK}\n                    popoverClassName=\"bp3-popover-content-sizing\"\n                    position={Position.RIGHT}\n                >\n                    <Button\n                        text=\"  \"\n                        style={{\n                            backgroundColor: this.props.color,\n                        }}\n                        small={true}\n                    />\n                    <div>\n                        <SketchPicker\n                            color={this.props.color}\n                            onChange={(it) => {\n                                this.props.onChange(it);\n                            }}\n                        />\n                    </div>\n                </Popover>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport { Classes } from \"@blueprintjs/core\";\nimport classnames from \"classnames\";\nimport Collapsable from \"../utils/Collapsable\";\nimport ColorPicker from \"../utils/ColorPicker\";\n\nexport default observer(\n    class EdgesPanel extends React.Component {\n        state = {\n            sizeOptionOpen: false,\n            thicknessOptionOpen: false,\n            colorOptionOpen: false,\n            forceOptionOpen: false,\n        };\n\n        render() {\n            return (\n                <div>\n                    <p>{`Modifying All Edges`}</p>\n\n                    {/* Collapsable Option: Color */}\n                    <Collapsable\n                        name=\"Color\"\n                        isOpen={this.state.colorOptionOpen}\n                        onToggle={() =>\n                            this.setState({\n                                colorOptionOpen: !this.state.colorOptionOpen,\n                            })\n                        }\n                    >\n                        <div className={classnames(Classes.CARD, \"sub-option\")}>\n                            <section>\n                                <p style={{ textAlign: \"left\" }}>\n                                    Default Color:\n                                    <span style={{ float: \"right\" }}>\n                                        <ColorPicker\n                                            color={State.css.edge.defaultColor}\n                                            onChange={(it) => {\n                                                State.css.edge.defaultColor =\n                                                    it.hex;\n\n                                                State.graphDelegate.graphDelegateMethods.refresh();\n                                            }}\n                                        />\n                                    </span>\n                                </p>\n                            </section>\n\n                            <section>\n                                <p style={{ textAlign: \"left\" }}>\n                                    Selected Color:\n                                    <span style={{ float: \"right\" }}>\n                                        <ColorPicker\n                                            color={State.css.edge.selectedColor}\n                                            onChange={(it) => {\n                                                State.css.edge.selectedColor =\n                                                    it.hex;\n\n                                                State.graphDelegate.graphDelegateMethods.refresh();\n                                            }}\n                                        />\n                                    </span>\n                                </p>\n                            </section>\n\n                            <section>\n                                <p style={{ textAlign: \"left\" }}>\n                                    Highlight Color:\n                                    <span style={{ float: \"right\" }}>\n                                        <ColorPicker\n                                            color={\n                                                State.css.edge.highlightColor\n                                            }\n                                            onChange={(it) => {\n                                                State.css.edge.highlightColor =\n                                                    it.hex;\n\n                                                State.graphDelegate.graphDelegateMethods.refresh();\n                                            }}\n                                        />\n                                    </span>\n                                </p>\n                            </section>\n                        </div>\n                    </Collapsable>\n                </div>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Classes, Slider, Switch } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport classnames from \"classnames\";\nimport ColorPicker from \"../utils/ColorPicker\";\n\nexport default observer(\n    class LabelsPanel extends React.Component {\n        render() {\n            return (\n                <div>\n                    <Switch\n                        label=\"Show Node Label\"\n                        checked={State.css.label.show}\n                        onChange={() => {\n                            State.css.label.show = !State.css.label.show;\n                            State.graphDelegate.graphDelegateMethods.refresh();\n                        }}\n                    />\n                    <br />\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\n                        Label Size:\n                        <br />\n                        <Slider\n                            min={1}\n                            max={10}\n                            stepSize={1}\n                            labelStepSize={2}\n                            onChange={(value) => {\n                                State.css.label.size = value;\n                                State.graphDelegate.graphDelegateMethods.refresh();\n                            }}\n                            value={State.css.label.size}\n                        />\n                        <br />\n                        <p style={{ textAlign: \"left\" }}>\n                            Label Color:\n                            <span style={{ float: \"right\" }}>\n                                <ColorPicker\n                                    color={State.css.label.color}\n                                    onChange={(it) => {\n                                        State.css.label.color = it.hex;\n                                        State.graphDelegate.graphDelegateMethods.refresh();\n                                    }}\n                                />\n                            </span>\n                        </p>\n                    </div>\n                </div>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { observer } from \"mobx-react\";\nimport State from \"../../state\";\nimport { Classes, Slider } from \"@blueprintjs/core\";\nimport classnames from \"classnames\";\nimport Collapsable from \"../utils/Collapsable\";\nimport ColorPicker from \"../utils/ColorPicker\";\n\nexport default observer(\n    class NodesPanel extends React.Component {\n        state = {\n            timeOutRef: null,\n            colorOptionOpen: false,\n            sizeOptionOpen: false,\n            shapeOptionOpen: false,\n        };\n\n        colorCollapse = () => {\n            return (\n                <Collapsable\n                    name=\"Color\"\n                    isOpen={this.state.colorOptionOpen}\n                    onToggle={() =>\n                        this.setState({\n                            colorOptionOpen: !this.state.colorOptionOpen,\n                        })\n                    }\n                >\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\n                        <section>\n                            <p style={{ textAlign: \"left\" }}>\n                                Default Color:\n                                <span style={{ float: \"right\" }}>\n                                    <ColorPicker\n                                        color={State.css.node.defaultColor}\n                                        onChange={(it) => {\n                                            State.css.node.defaultColor =\n                                                it.hex;\n\n                                            State.graphDelegate.graphDelegateMethods.refresh();\n                                        }}\n                                    />\n                                </span>\n                            </p>\n                        </section>\n\n                        <section>\n                            <p style={{ textAlign: \"left\" }}>\n                                Selected Color:\n                                <span style={{ float: \"right\" }}>\n                                    <ColorPicker\n                                        color={State.css.node.selectedColor}\n                                        onChange={(it) => {\n                                            State.css.node.selectedColor =\n                                                it.hex;\n\n                                            State.graphDelegate.graphDelegateMethods.refresh();\n                                        }}\n                                    />\n                                </span>\n                            </p>\n                        </section>\n\n                        <section>\n                            <p style={{ textAlign: \"left\" }}>\n                                Highlight Color:\n                                <span style={{ float: \"right\" }}>\n                                    <ColorPicker\n                                        color={State.css.node.highlightColor}\n                                        onChange={(it) => {\n                                            State.css.node.highlightColor =\n                                                it.hex;\n\n                                            State.graphDelegate.graphDelegateMethods.refresh();\n                                        }}\n                                    />\n                                </span>\n                            </p>\n                        </section>\n                    </div>\n                </Collapsable>\n            );\n        };\n\n        sizeCollapse = () => {\n            return (\n                <Collapsable\n                    name=\"Size\"\n                    isOpen={this.state.sizeOptionOpen}\n                    onToggle={() =>\n                        this.setState({\n                            sizeOptionOpen: !this.state.sizeOptionOpen,\n                        })\n                    }\n                >\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\n                        Node Size:\n                        <br />\n                        <Slider\n                            min={1}\n                            max={20}\n                            stepSize={1}\n                            labelStepSize={5}\n                            onChange={(value) => {\n                                State.css.node.size = value;\n                                State.graphDelegate.graphDelegateMethods.refresh();\n                            }}\n                            value={State.css.node.size}\n                        />\n                    </div>\n                </Collapsable>\n            );\n        };\n\n        shapeCollapse = () => {\n            return (\n                <Collapsable\n                    name=\"Shape\"\n                    isOpen={this.state.shapeOptionOpen}\n                    onToggle={() =>\n                        this.setState({\n                            shapeOptionOpen: !this.state.shapeOptionOpen,\n                        })\n                    }\n                >\n                    <div className={classnames(Classes.CARD, \"sub-option\")}>\n                        Node Resolution:\n                        <br />\n                        <Slider\n                            min={2}\n                            max={20}\n                            stepSize={1}\n                            labelStepSize={5}\n                            onChange={(value) => {\n                                State.css.node.resolution = value;\n                            }}\n                            value={State.css.node.resolution}\n                        />\n                    </div>\n                </Collapsable>\n            );\n        };\n\n        render() {\n            return (\n                <div>\n                    <div>\n                        <p>Modifying All Nodes</p>\n                    </div>\n                    {this.colorCollapse()}\n                    {this.sizeCollapse()}\n                    {this.shapeCollapse()}\n                </div>\n            );\n        }\n    }\n);\n","import { H3, Tab, Tabs } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport React from \"react\";\nimport ClusterPanel from \"./ClusterPanel\";\nimport EdgesPanel from \"./EdgesPanel\";\nimport LabelsPanel from \"./LabelsPanel\";\nimport NodesPanel from \"./NodesPanel\";\n\nexport default observer(\n    class RenderOptionsCard extends React.Component {\n        render() {\n            return (\n                <div>\n                    <H3>Graph Options</H3>\n                    <Tabs animate={true}>\n                        <Tab id=\"nodes\" title=\"Nodes\" panel={<NodesPanel />} />\n                        <Tab id=\"edges\" title=\"Edges\" panel={<EdgesPanel />} />\n                        <Tab\n                            id=\"labels\"\n                            title=\"Labels\"\n                            panel={<LabelsPanel />}\n                        />\n                        <Tab\n                            id=\"clusters\"\n                            title=\"Clusters\"\n                            panel={<ClusterPanel />}\n                        />\n\n                        <Tabs.Expander />\n                    </Tabs>\n                </div>\n            );\n        }\n    }\n);\n","import React from \"react\";\n\nimport {\n    Button,\n    Intent,\n    Panel,\n    PanelProps,\n    PanelStack2,\n    Classes,\n    H4,\n    Callout,\n} from \"@blueprintjs/core\";\nimport { Popover2, Tooltip2 } from \"@blueprintjs/labs\";\nimport classnames from \"classnames\";\nimport State from \"../../../state\";\nimport { VisualizationMode } from \"../../../state/PreferencesStore\";\nimport { observer } from \"mobx-react\";\nimport ComponentRef from \"../../ComponentRef\";\n\ninterface CustomPanelEntry {\n    step: number;\n    title: string;\n    component: JSX.Element;\n}\n\nconst allPanelStacks = [\n    {\n        step: 1,\n        title: \"Select Cluster\",\n        component: (\n            <p>\n                Select a <b>Cluster</b> to split by clicking it\n            </p>\n        ),\n    } as CustomPanelEntry,\n    {\n        step: 2,\n        title: \"Draw Line\",\n        component: (\n            <div\n                style={{\n                    display: \"flex\",\n                }}\n            >\n                <p>\n                    Use the mouse to <b>hold and draw a line </b> to split this\n                    Cluster\n                </p>\n                <div>\n                    <Button\n                        intent=\"danger\"\n                        small={true}\n                        onClick={() => {\n                            State.helper.clusterSplittingCurrentStep = 1;\n                        }}\n                    >\n                        Back\n                    </Button>\n                </div>\n            </div>\n        ),\n    } as CustomPanelEntry,\n    {\n        step: 3,\n        title: \"Confirm?\",\n        component: (\n            <div>\n                <H4>Confirm Splitting of Cluster? </H4>\n                <div\n                    style={{\n                        display: \"flex\",\n                        justifyContent: \"space-between\",\n                    }}\n                >\n                    <Button\n                        intent=\"danger\"\n                        small={true}\n                        onClick={() => {\n                            State.helper.clusterSplittingCurrentStep = 2;\n                        }}\n                    >\n                        Cancel\n                    </Button>\n                    <Button\n                        intent=\"primary\"\n                        small={true}\n                        onClick={() => {\n                            State.helper.clusterSplittingPanelStackOpen = false;\n                            State.clusterInteraction.splitCluster();\n                            State.preferences.visualizationMode =\n                                VisualizationMode.Normal;\n                            State.helper.clusterSplittingCurrentStep = 1;\n                        }}\n                    >\n                        Confirm\n                    </Button>\n                </div>\n            </div>\n        ),\n    } as CustomPanelEntry,\n];\n\ninterface PanelInfo {\n    panelNumber: number;\n}\n\nconst CustomPanel: React.FC<PanelProps<PanelInfo>> = (props) => {\n    return <Callout>{allPanelStacks[props.panelNumber - 1].component}</Callout>;\n};\n\ninterface Props {\n    currentStep: 1 | 2 | 3;\n}\n\nexport default observer(\n    class ClusterSplittingPanelStack extends React.Component<Props, {}> {\n        private firstPanel: Panel<PanelInfo> = {\n            props: {\n                panelNumber: 1,\n            },\n            renderPanel: CustomPanel,\n            title: allPanelStacks[0].title,\n        };\n\n        private secondPanel: Panel<PanelInfo> = {\n            props: {\n                panelNumber: 2,\n            },\n            renderPanel: CustomPanel,\n            title: allPanelStacks[1].title,\n        };\n\n        private thirdPanel: Panel<PanelInfo> = {\n            props: {\n                panelNumber: 3,\n            },\n            renderPanel: CustomPanel,\n            title: allPanelStacks[2].title,\n        };\n\n        get currentPanelStack() {\n            switch (State.helper.clusterSplittingCurrentStep) {\n                case 1:\n                    return [this.firstPanel];\n\n                case 2:\n                    return [this.firstPanel, this.secondPanel];\n\n                case 3:\n                    return [this.firstPanel, this.secondPanel, this.thirdPanel];\n                default:\n                    return [];\n            }\n        }\n\n        private renderPanelStack = () => {\n            return (\n                <div\n                    style={{ width: \"300px\", height: \"100px\", display: \"flex\" }}\n                >\n                    <Button\n                        icon=\"cross\"\n                        minimal={true}\n                        onClick={() => {\n                            State.helper.clusterSplittingPanelStackOpen = false;\n                        }}\n                    ></Button>\n                    <PanelStack2\n                        initialPanel={this.firstPanel}\n                        stack={this.currentPanelStack}\n                    />\n                </div>\n            );\n        };\n\n        render() {\n            return (\n                <Popover2\n                    placement=\"right\"\n                    usePortal={false}\n                    content={this.renderPanelStack()}\n                    isOpen={\n                        State.preferences.visualizationMode ===\n                            VisualizationMode.ClusterSplitting &&\n                        State.helper.clusterSplittingPanelStackOpen\n                    }\n                    onOpened={() => {\n                        State.helper.clusterSplittingCurrentStep = 1;\n                    }}\n                >\n                    <Tooltip2\n                        usePortal={false}\n                        content={VisualizationMode.ClusterSplitting}\n                    >\n                        <Button\n                            className={classnames([\n                                Classes.BUTTON,\n                                Classes.MINIMAL,\n                            ])}\n                            intent={Intent.DANGER}\n                            text={VisualizationMode.ClusterSplitting}\n                            active={\n                                State.preferences.visualizationMode ===\n                                VisualizationMode.ClusterSplitting\n                            }\n                            onClick={() => {\n                                State.preferences.visualizationMode =\n                                    VisualizationMode.ClusterSplitting;\n\n                                State.helper.clusterSplittingPanelStackOpen = true;\n                            }}\n                        />\n                    </Tooltip2>\n                </Popover2>\n            );\n        }\n        componentDidMount = () => {\n            ComponentRef.clusterSplittingPanelStack = this;\n        };\n    }\n);\n","import React from \"react\";\n\nimport {\n    Button,\n    Intent,\n    Panel,\n    PanelProps,\n    PanelStack2,\n    Classes,\n    H4,\n    Callout,\n    RadioGroup,\n    Radio,\n} from \"@blueprintjs/core\";\nimport { Popover2, Tooltip2 } from \"@blueprintjs/labs\";\nimport classnames from \"classnames\";\nimport State from \"../../../state\";\nimport { VisualizationMode } from \"../../../state/PreferencesStore\";\nimport { observer } from \"mobx-react\";\nimport ComponentRef from \"../../ComponentRef\";\n\nexport default observer(\n    class NodeSelectionPanel extends React.Component {\n        handleChange = () => {\n            State.interaction.boxSelectionOpen = !State.interaction\n                .boxSelectionOpen;\n        };\n        private renderPanelStack = () => {\n            return (\n                <div\n                    style={{ width: \"300px\", height: \"100px\", display: \"flex\" }}\n                >\n                    <Button\n                        icon=\"cross\"\n                        minimal={true}\n                        onClick={() => {\n                            State.helper.NodeSelectionPanelOpen = false;\n                        }}\n                    ></Button>\n                    <RadioGroup\n                        label=\"Node Multi-Selection Mode\"\n                        onChange={this.handleChange}\n                        selectedValue={\n                            State.interaction.boxSelectionOpen ? \"two\" : \"one\"\n                        }\n                    >\n                        <Radio label=\"Click\" value=\"one\" />\n                        <Radio label=\"Box-Selection\" value=\"two\" />\n                    </RadioGroup>\n                </div>\n            );\n        };\n\n        render() {\n            return (\n                <Popover2\n                    placement=\"right\"\n                    usePortal={false}\n                    content={this.renderPanelStack()}\n                    isOpen={\n                        State.preferences.visualizationMode ===\n                            VisualizationMode.NodeSelection &&\n                        State.helper.NodeSelectionPanelOpen\n                    }\n                >\n                    <Tooltip2\n                        usePortal={false}\n                        content={VisualizationMode.NodeSelection}\n                    >\n                        <Button\n                            className={classnames([\n                                Classes.BUTTON,\n                                Classes.MINIMAL,\n                            ])}\n                            intent={Intent.WARNING}\n                            text={VisualizationMode.NodeSelection}\n                            active={\n                                State.preferences.visualizationMode ===\n                                VisualizationMode.NodeSelection\n                            }\n                            onClick={() => {\n                                State.preferences.visualizationMode =\n                                    VisualizationMode.NodeSelection;\n\n                                State.helper.NodeSelectionPanelOpen = true;\n                            }}\n                        />\n                    </Tooltip2>\n                </Popover2>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Button, Classes, Intent } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../../state\";\nimport { VisualizationMode } from \"../../../state/PreferencesStore\";\nimport ClusterSplittingPanelStack from \"./ClusterSplittingPanelStack\";\nimport { Tooltip2 } from \"@blueprintjs/popover2\";\nimport NodeSelectionPanel from \"./NodeSelectionPanel\";\n\nexport default observer(\n    class InteractionModePanel extends React.Component {\n        getIntent(mode: VisualizationMode) {\n            switch (mode) {\n                case VisualizationMode.Normal:\n                    return Intent.PRIMARY;\n\n                case VisualizationMode.NodeSelection:\n                    return Intent.WARNING;\n\n                case VisualizationMode.ClusterSelection:\n                    return Intent.SUCCESS;\n\n                case VisualizationMode.ClusterSplitting:\n                    return Intent.DANGER;\n            }\n        }\n\n        renderMode(mode: VisualizationMode) {\n            return (\n                <Tooltip2 content={mode}>\n                    <Button\n                        className={classnames([\n                            Classes.BUTTON,\n                            Classes.MINIMAL,\n                        ])}\n                        text={mode}\n                        intent={this.getIntent(mode)}\n                        active={State.preferences.visualizationMode === mode}\n                        onClick={() => {\n                            State.preferences.visualizationMode = mode;\n                        }}\n                    />\n                </Tooltip2>\n            );\n        }\n\n        render() {\n            return (\n                <div className=\"selection-action-panel\">\n                    {this.renderMode(VisualizationMode.Normal)}\n                    <NodeSelectionPanel />\n                    {this.renderMode(VisualizationMode.ClusterSelection)}\n                    <ClusterSplittingPanelStack\n                        currentStep={State.helper.clusterSplittingCurrentStep}\n                    />\n                </div>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport { Classes, Menu, MenuDivider, MenuItem } from \"@blueprintjs/core\";\nimport { observer } from \"mobx-react\";\nimport classnames from \"classnames\";\nimport State from \"../../state\";\nimport { computed, makeObservable } from \"mobx\";\nimport { VisualizationMode } from \"../../state/PreferencesStore\";\n\ninterface Props {\n    /**\n     * what place this RightClick interaction is activated\n     *\n     * @type {(\"Node\" | \"Cluster\" | \"Background\")}\n     */\n    on: \"Node\" | \"Cluster\" | \"Background\";\n}\n\nexport default observer(\n    class RightClickPanel extends React.Component<Props, {}> {\n        constructor(props: any) {\n            super(props);\n            makeObservable(this, {\n                stylePosition: computed,\n            });\n        }\n\n        get stylePosition() {\n            return {\n                top: State.preferences.rightClickPositionY + 10 + \"px\",\n                left: State.preferences.rightClickPositionX + 10 + \"px\",\n            };\n        }\n\n        formNewCluster() {\n            let date = new Date().toLocaleString(\"en\");\n            let clusterId: string = `Cluster Generated @ ${date}`;\n            if (!State.graph.metadata.nodeProperties.includes(\"new-cluster\")) {\n                State.graph.metadata.nodeProperties.push(\"new-cluster\");\n            }\n            State.graph.rawGraph.forEachNode((_, attributes) => {\n                attributes[\"new-cluster\"] = \"\";\n            });\n            State.interaction.selectedNodes.map((nodeId) => {\n                State.graph.rawGraph.setNodeAttribute(\n                    nodeId,\n                    \"new-cluster\",\n                    clusterId\n                );\n            });\n            State.preferences.rightClickPanelOpen = false;\n            State.cluster.setCluster(\"new-cluster\");\n\n            State.interaction.flush();\n        }\n\n        renderNodeMenu() {\n            return (\n                <Menu\n                    className={classnames(\n                        Classes.ELEVATION_1,\n                        \"right-click-panel\"\n                    )}\n                    style={this.stylePosition}\n                >\n                    <MenuDivider\n                        title={\n                            (\"Node ID: \" +\n                                State.interaction.selectedNode) as string\n                        }\n                    />\n                    <MenuItem\n                        icon=\"graph-remove\"\n                        text=\"Delete Node\"\n                        onClick={() => {\n                            State.graph.mutating.dropNode(\n                                State.interaction.selectedNode as string\n                            );\n                            State.interaction.flush();\n                            State.preferences.rightClickPanelOpen = false;\n                        }}\n                    />\n                    <MenuDivider />\n                    <MenuItem\n                        icon=\"inner-join\"\n                        text=\"Form a New Cluster\"\n                        onClick={this.formNewCluster}\n                        disabled={State.interaction.selectedNodes.length === 0}\n                    />\n                    <MenuItem\n                        icon=\"eraser\"\n                        text=\"Cancel Selection\"\n                        onClick={() => {\n                            State.interaction.flush();\n                            State.preferences.rightClickPanelOpen = false;\n                        }}\n                        disabled={State.interaction.selectedNodes.length === 0}\n                    />\n                    <MenuItem\n                        icon=\"graph-remove\"\n                        text=\"Delete Selected Nodes\"\n                        onClick={() => {\n                            State.interaction.selectedNodes.forEach((node) => {\n                                State.graph.mutating.dropNode(node);\n                            });\n                            State.interaction.flush();\n                            State.preferences.rightClickPanelOpen = false;\n                        }}\n                    />\n                    <MenuDivider />\n                    <MenuItem\n                        icon=\"new-link\"\n                        text=\"Add Edge\"\n                        onClick={() => {\n                            State.preferences.AddEdgeDialogOpen = true;\n                            State.interaction.flush();\n                            State.preferences.rightClickPanelOpen = false;\n                        }}\n                    />\n                    <MenuItem\n                        icon=\"cross\"\n                        text=\"Delete Edge\"\n                        onClick={() => {\n                            State.preferences.deleteEdgePanelOpen = true;\n                            State.preferences.rightClickPanelOpen = false;\n                        }}\n                    />\n                </Menu>\n            );\n        }\n\n        renderClusterMenu() {\n            return (\n                <Menu\n                    className={classnames(\n                        Classes.ELEVATION_1,\n                        \"right-click-panel\"\n                    )}\n                    style={this.stylePosition}\n                >\n                    <MenuItem\n                        icon=\"group-objects\"\n                        text=\"Merge Cluster\"\n                        onClick={() => {\n                            State.clusterInteraction.mergeSelectedCluster();\n                            State.preferences.rightClickPanelOpen = false;\n                        }}\n                    />\n                    <MenuDivider />\n                </Menu>\n            );\n        }\n\n        renderBackgroundMenu() {\n            return (\n                <Menu\n                    className={classnames(\n                        Classes.ELEVATION_1,\n                        \"right-click-panel\"\n                    )}\n                    style={this.stylePosition}\n                >\n                    <MenuItem\n                        icon=\"new-object\"\n                        text=\"Add Node\"\n                        onClick={() => {\n                            State.preferences.AddNodeDialogOpen = true;\n                            State.preferences.rightClickPanelOpen = false;\n                        }}\n                    />\n                    <MenuDivider />\n                </Menu>\n            );\n        }\n\n        render() {\n            if (this.props.on === \"Node\") {\n                return this.renderNodeMenu();\n            } else if (this.props.on === \"Cluster\") {\n                return this.renderClusterMenu();\n            } else if (this.props.on === \"Background\") {\n                return this.renderBackgroundMenu();\n            }\n        }\n    }\n);\n","import React from \"react\";\nimport { Button, Classes } from \"@blueprintjs/core\";\nimport classnames from \"classnames\";\nimport { observer } from \"mobx-react\";\nimport State from \"../state\";\nimport NodeDetailPanel from \"./panels/NodeDetailPanel\";\nimport MultiDetailPanel from \"./panels/MultiDetailPanel\";\nimport SearchPanel from \"./panels/SearchPanel\";\nimport DeleteEdgeInteractionPanel from \"./panels/DeleteEdgeInteractionPanel\";\nimport GraphOptionsCard from \"./panels/GraphOptionsCard\";\nimport InteractionModePanel from \"./panels/InteractionModePanel/InteractionModePanel\";\nimport RightClickPanel from \"./panels/RightClickPanel\";\n\nexport default observer(\n    class FloatingCards extends React.Component {\n        optionsVisible = {\n            left: \"0em\",\n        };\n        optionsInvisible = {\n            left: \"-2200em\",\n        };\n        sideButtonVis = {\n            marginLeft: \"50px\",\n        };\n        sideButtonInv = {\n            marginLeft: \"-15px\",\n        };\n        toggleOptions = () => {\n            State.preferences.graphOptionsCardOpen = !State.preferences\n                .graphOptionsCardOpen;\n        };\n        render() {\n            return (\n                <div className=\"floating-overlay\">\n                    <div className=\"left-cards\">\n                        <div\n                            className={classnames(\n                                Classes.CARD,\n                                Classes.ELEVATION_2,\n                                \"overlay-card\",\n                                \"transparent-frame\",\n                                \"left-cards\"\n                            )}\n                            style={\n                                State.preferences.graphOptionsCardOpen\n                                    ? this.optionsVisible\n                                    : this.optionsInvisible\n                            }\n                        >\n                            <br />\n                            <Button\n                                className=\"openbtn2\"\n                                icon=\"chevron-left\"\n                                onClick={this.toggleOptions}\n                            />\n                            <br />\n                            <GraphOptionsCard />\n                        </div>\n                        <div\n                            className={classnames(\n                                Classes.CARD,\n                                Classes.ELEVATION_2,\n                                \"overlay-card\",\n                                \"transparent-frame\"\n                            )}\n                            style={{\n                                width: \"1em\",\n                                paddingTop: \"1em\",\n                                paddingRight: \"0.7em\",\n                                paddingBottom: \"0.5em\",\n                                marginLeft: \"-5.4em\",\n                            }}\n                        >\n                            <Button\n                                icon=\"more\"\n                                className=\"openbtn\"\n                                onClick={this.toggleOptions}\n                                style={\n                                    State.preferences.graphOptionsCardOpen\n                                        ? this.sideButtonInv\n                                        : this.sideButtonVis\n                                }\n                            />\n                        </div>\n                    </div>\n\n                    {/* single selected */}\n                    {/* {State.graph.selectedNodes.length === 1 && (\n                        <NodeDetail node={State.graph.currentlyHoveredId} />\n                    )} */}\n                    {State.interaction.currentlyHoveredNodeId &&\n                        State.interaction.selectedNodes.length === 0 && (\n                            <NodeDetailPanel\n                                onNode={\n                                    State.interaction.currentlyHoveredNodeId\n                                }\n                            />\n                        )}\n\n                    {/* multiple selected */}\n                    {/* {State.graph.selectedNodes.length !== 1 && State.graph.currentlyHovered && (\n                        <NodeDetail node={State.graph.currentlyHovered.data.ref} />\n                    )} */}\n                    {State.interaction.selectedNodes.length !== 0 && (\n                        <MultiDetailPanel />\n                    )}\n\n                    <SearchPanel />\n                    {State.preferences.rightClickPanelOpen &&\n                        State.preferences.rightClickOn && (\n                            <RightClickPanel\n                                on={State.preferences.rightClickOn}\n                            />\n                        )}\n                    {State.preferences.deleteEdgePanelOpen &&\n                        State.interaction.selectedNode && (\n                            <DeleteEdgeInteractionPanel\n                                onNode={State.interaction.selectedNode}\n                            />\n                        )}\n                    <InteractionModePanel />\n                </div>\n            );\n        }\n    }\n);\n","import React from \"react\";\nimport classnames from \"classnames\";\nimport { Classes } from \"@blueprintjs/core\";\nimport Navbar from \"./components/Navbar\";\nimport Dialogs from \"./components/Dialogs\";\nimport ThreeJSVis from \"./components/visualize/Visualizer\";\n// import NodeDetail from \"./components/panels/NodeDetailPanel\";\n// import State from \"./state\";\n// import EdgesPanel from \"./components/panels/EdgesPanel\";\n// import LabelsPanel from \"./components/panels/LabelsPanel\";\n// import SelectionPanel from \"./components/panels/SelectionPanel\";\n// import GlobalPanel from \"./components/panels/GlobalPanel\";\n// import NodesPanel from \"./components/panels/NodesPanel\";\nimport FloatingCards from \"./components/FloatingCards\";\n\nfunction App() {\n    return (\n        <div\n            className={classnames({\n                \"app-wrapper\": true,\n                [Classes.DARK]: true,\n            })}\n        >\n            <Navbar />\n            <main className=\"main\">\n                <ThreeJSVis />\n            </main>\n            <FloatingCards />\n            <Dialogs />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"@blueprintjs/core/lib/css/blueprint.css\";\nimport \"@blueprintjs/table/lib/css/table.css\";\nimport \"@blueprintjs/select/lib/css/blueprint-select.css\";\nimport \"@blueprintjs/popover2/lib/css/blueprint-popover2.css\";\nimport \"normalize.css\";\nimport \"./App.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}